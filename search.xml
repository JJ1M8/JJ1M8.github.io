<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>day 10:列表的相关操作</title>
    <url>/2020/04/03/day-10-%E5%88%97%E8%A1%A8%E7%9A%84%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="列表的相关操作"><a href="#列表的相关操作" class="headerlink" title="列表的相关操作"></a>列表的相关操作</h2><a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-string">"""</span><br><span class="hljs-string">列表的操作</span><br><span class="hljs-string">"""</span><br><span class="hljs-comment">#重复输出</span><br><span class="hljs-comment">#print(L1*3)</span><br>L1 = [<span class="hljs-string">"Python"</span>,<span class="hljs-string">"PHPPHP"</span>,<span class="hljs-string">"H5EE"</span>,<span class="hljs-string">"Js"</span>,<span class="hljs-string">"Java"</span>]<br>print(L1[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>:<span class="hljs-number">5</span>]) <span class="hljs-comment">#[1:5]不会取到5</span><br>print(L1[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>:<span class="hljs-number">3</span>])<br>print(L1[<span class="hljs-number">2</span>][<span class="hljs-number">-2</span>:])<br><br><span class="hljs-comment">#in not in成员判断</span><br>L2 = <span class="hljs-string">"Python"</span><br>print(L2 <span class="hljs-keyword">in</span> L1)<br><br><span class="hljs-comment">#遍历</span><br><span class="hljs-keyword">for</span> val <span class="hljs-keyword">in</span> L1:<br>    print(val)<br>i = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> i &lt;len(L1):<br>    print(L1[i])<br>    i+=<span class="hljs-number">1</span><br><br><span class="hljs-comment">#append 追加，末尾</span><br>L1.append(<span class="hljs-string">"C++"</span>)<br><span class="hljs-keyword">for</span> val <span class="hljs-keyword">in</span> L1:<br>    print(val)<br><span class="hljs-comment">#insert 插入，在指定位置</span><br>L1.insert(<span class="hljs-number">1</span>,<span class="hljs-string">"haha"</span>)<br><span class="hljs-keyword">for</span> val <span class="hljs-keyword">in</span> L1:<br>    print(val)<br><span class="hljs-comment">#extend 扩展，将</span><br>L2 = [<span class="hljs-string">"123"</span>,<span class="hljs-string">"456"</span>]<br>L1.append(L2)<br>print(L1)<br>L1.extend(L2)<br>print(L1)<br><br><span class="hljs-comment">#pop 传递待删除的元素的索引值，并且发返回被删除的元素</span><br><span class="hljs-comment">#不传参数就会删除最后一个值，</span><br>res = L1.pop(<span class="hljs-number">1</span>)<br>print(L1,res)<br><span class="hljs-comment">#remove 删除指定的元素，如果有重复， 默认删除第一个</span><br>L1.remove(<span class="hljs-string">"Python"</span>)<br>print(L1)<br><span class="hljs-comment">#count 查询某元素的出现次数</span><br>res = L1.count(<span class="hljs-string">"123"</span>)<br>print(res)<br><span class="hljs-comment">#index 查询元素的索引 ("",5) 5值起始位置</span><br>res = L1.index([<span class="hljs-string">"123"</span>,<span class="hljs-string">"456"</span>])<br>print(res)<br>print(L1.pop(res),L1)<br><span class="hljs-comment">#reverse 列表中的元素从右到左重新存放一遍</span><br>L1.reverse()<br>print(L1)<br><span class="hljs-comment">#sort 对列表中的数据排序整理</span><br>L1.sort()<br>print(L1)<br>L1.sort(reverse = <span class="hljs-literal">True</span>)<span class="hljs-comment">#倒序排</span><br>print(L1)<br>L1.sort(key=len)    <span class="hljs-comment">#按长度</span><br>print(L1)<br>L = [<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">8</span>,<span class="hljs-number">-3</span>,<span class="hljs-number">-1</span>]<br>L.sort(key=abs) <span class="hljs-comment">#按绝对值</span><br>print(L)<br><span class="hljs-comment">#如果在sort想保留原数据</span><br><br><span class="hljs-comment">#clear 清空列表</span><br>L.clear()<br>print(L) <span class="hljs-comment">#空列表</span><br><br><span class="hljs-comment">#copy 复制</span><br>res = L1.copy()<br>print(res)<br><br>L = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,[<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]]<span class="hljs-comment">#浅拷贝，只拷贝了最外层，内层改变是会一起改变的</span><br>res = L.copy()<br>print(res)<br>L[<span class="hljs-number">4</span>].append(<span class="hljs-number">7</span>)<br>print(res)  <span class="hljs-comment">#会随着改变，内层拷贝不过来，会指向原列表的二级列表（地址）</span><br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>day 11：列表推导式与深浅拷贝</title>
    <url>/2020/04/03/day-11%EF%BC%9A%E5%88%97%E8%A1%A8%E6%8E%A8%E5%AF%BC%E5%BC%8F%E4%B8%8E%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
    <content><![CDATA[<h1 id="1、列表推导式"><a href="#1、列表推导式" class="headerlink" title="1、列表推导式"></a>1、列表推导式</h1><p>通过使用列表推导式，用简洁的代码实现复杂功能<br>例如：<br>打印10与10各个数字的组合</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">res = [(x,y) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(<span class="hljs-number">10</span>) <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> range(<span class="hljs-number">10</span>)]<br>print(res)<br></code></pre></td></tr></table></figure>
<p>打印偶数奇数的组合</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">res = [(x,y) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(<span class="hljs-number">10</span>) <span class="hljs-keyword">if</span> x%<span class="hljs-number">2</span>==<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> range(<span class="hljs-number">10</span>)<br>       <span class="hljs-keyword">if</span> y%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>]<br>print(res)<br></code></pre></td></tr></table></figure>
<p>打印ABC与123的组合</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">res = [x+y <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-string">"ABC"</span> <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-string">"123"</span>]<br>print(res)<span class="hljs-comment">#会先循环先写的</span><br></code></pre></td></tr></table></figure>
<p>练习：<br>给一列表M打印要求数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#给一列表M打印要求数据</span><br>M = [[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>],[<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>]]<br><span class="hljs-comment">#求 1 4 7</span><br>res = [var[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> M]<br>print(res)<br><span class="hljs-comment">#求1 5 9</span><br>res = [M[i][i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(M))]<br>print(res)<br></code></pre></td></tr></table></figure>
<p>给一列表，求每一元素的长度的列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#涉及到每一个元素就使用for var in L</span><br>L = [<span class="hljs-string">"continue"</span>,<span class="hljs-string">"else"</span>,<span class="hljs-string">"if"</span>,<span class="hljs-string">"break"</span>,<span class="hljs-string">"pass"</span>,<span class="hljs-string">"def"</span>]<br><span class="hljs-comment">#res = [len(L[i]) for i in range(len(L))]</span><br>res = [len(var) <span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> L]<br>print(res)<br></code></pre></td></tr></table></figure>

<h1 id="2、深浅拷贝"><a href="#2、深浅拷贝" class="headerlink" title="2、深浅拷贝"></a>2、深浅拷贝</h1><p>1、赋值是同一内存地址，b指向a的内存地址，当a的值发生改变的时候，b也会变</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,[<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]]<br>b = a<br>a.append(<span class="hljs-number">7</span>)<br>print(b)<br></code></pre></td></tr></table></figure>
<p>2、浅拷贝，拷贝第一层，第二层还是拷贝地址</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> copy<br>a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,[<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]]<br>c = copy.copy(a)<br>a[<span class="hljs-number">4</span>].append(<span class="hljs-number">7</span>)<br>a.append(<span class="hljs-number">8</span>)<br>print(c)<br></code></pre></td></tr></table></figure>
<p>3、深拷贝，拷贝所有数据，全部新开辟一块内存，a变，d不会有变化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,[<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]]<br>d = copy.deepcopy(a)<br>a[<span class="hljs-number">4</span>].append(<span class="hljs-number">7</span>)<br>a.append(<span class="hljs-number">8</span>)<br>print(d)<br></code></pre></td></tr></table></figure>

<p>以上三条输出分别为：<br>[1, 2, 3, 4, [5, 6], 7]<br>[1, 2, 3, 4, [5, 6, 7]]<br>[1, 2, 3, 4, [5, 6]]</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>day 4：数据类型转换与运算</title>
    <url>/2020/04/03/day-4%EF%BC%9A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E4%B8%8E%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<h2 id="一、向集合转换"><a href="#一、向集合转换" class="headerlink" title="一、向集合转换"></a>一、向集合转换</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">var=<span class="hljs-number">1</span>               <span class="hljs-comment">#整型，浮点型，复数，bool</span><br>val = set(var)<br>print(val,type(val)) <span class="hljs-comment">#报错！所有数值类型不能转化成集合</span><br><br>var = <span class="hljs-string">"hello"</span>     <br>val = set(var)<br>print(val,type(val))<br></code></pre></td></tr></table></figure>
<a id="more"></a>
<p>总结：<br>所有数值类型不能转化成集合<br>所有容器类型都可以<br>字典只能转化键</p>
<h2 id="二、向字典转换"><a href="#二、向字典转换" class="headerlink" title="二、向字典转换"></a>二、向字典转换</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">var = <span class="hljs-string">""</span><br>val = dict(var)<br>print(val, type(val))<br><br>var = [[<span class="hljs-number">1</span>,<span class="hljs-string">"hello"</span>],[<span class="hljs-number">2</span>,<span class="hljs-string">"word"</span>]]<br>val = dict(var)<br>print(val, type(val))<br></code></pre></td></tr></table></figure>
<p>总结：<br>所有字符类型不能转换<br>容器类型只要是空都可以<br>列表中[[1,”hello”],[2,”word”]]，嵌套二级列表，有且只有两个元素才可以</p>
<h2 id="三、数值运算"><a href="#三、数值运算" class="headerlink" title="三、数值运算"></a>三、数值运算</h2><p>//  取整（取结果，去掉余数的意思）<br>**  幂运算</p>
<p>7/5  版本2中是1，版本3中是1.4</p>
<p>（其余运算类似c）</p>
<h2 id="四、逻辑运算"><a href="#四、逻辑运算" class="headerlink" title="四、逻辑运算"></a>四、逻辑运算</h2><p>两个相等是全等于，必须数值相同 为True</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">a=<span class="hljs-number">1.0</span><br>b=<span class="hljs-number">1</span><br>print(a==b) <span class="hljs-comment">#结果为True</span><br></code></pre></td></tr></table></figure>

<p>（其余运算类似c）</p>
<h2 id="五、赋值运算"><a href="#五、赋值运算" class="headerlink" title="五、赋值运算"></a>五、赋值运算</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">a**=<span class="hljs-number">3</span>  等于 a=a**<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure>
<h2 id="六、逻辑运算"><a href="#六、逻辑运算" class="headerlink" title="六、逻辑运算"></a>六、逻辑运算</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">and</span>、<span class="hljs-keyword">or</span>、<span class="hljs-keyword">not</span>、xor（^）<br></code></pre></td></tr></table></figure>
<h2 id="七、成员运算"><a href="#七、成员运算" class="headerlink" title="七、成员运算"></a>七、成员运算</h2><p>在容器中in、不在容器中not in</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">var = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>print(<span class="hljs-number">6</span> <span class="hljs-keyword">in</span> var)<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>day 6：循环</title>
    <url>/2020/04/03/day-6%EF%BC%9A%E5%BE%AA%E7%8E%AF/</url>
    <content><![CDATA[<h2 id="一、while循环"><a href="#一、while循环" class="headerlink" title="一、while循环"></a>一、while循环</h2><p>while True：死循环，只能使用break</p>
<p>break：  退出当前循环</p>
<p>continue：继续下一轮循环</p>
<p>pass  在循环体或者函数体空时防止报错</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random <span class="hljs-comment">#引入随机数</span><br><br>luck_num = random.randint(<span class="hljs-number">10</span>,<span class="hljs-number">99</span>)<br>luck_num_g = luck_num % <span class="hljs-number">10</span><br>luck_num_s = luck_num //<span class="hljs-number">10</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    buy_num = int(input(<span class="hljs-string">"请输入一个两位数："</span>))<br>    <span class="hljs-keyword">if</span> buy_num == luck_num:<br>        print(<span class="hljs-string">"一等奖"</span>)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">elif</span> buy_num % <span class="hljs-number">10</span> == luck_num_s <span class="hljs-keyword">and</span> buy_num //<span class="hljs-number">10</span> == luck_num_g:<br>        print(<span class="hljs-string">"二等奖"</span>)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        print(<span class="hljs-string">"遗憾,没中奖"</span>)<br></code></pre></td></tr></table></figure>
<h2 id="二、使用while打印乘法表"><a href="#二、使用while打印乘法表" class="headerlink" title="二、使用while打印乘法表"></a>二、使用while打印乘法表</h2><p> 正三角</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">i = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> i &lt; <span class="hljs-number">10</span>:<br>    j = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> j &lt;= i:<br>        print(j,<span class="hljs-string">"x"</span>,i,<span class="hljs-string">"="</span>,i*j,end=<span class="hljs-string">" "</span>)<br>        j += <span class="hljs-number">1</span><br>    print()<br>    i += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>
<p>倒三角</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">i = <span class="hljs-number">9</span><br><span class="hljs-keyword">while</span> i &gt; <span class="hljs-number">0</span>:<br>    j = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> j &lt;= i:<br>        print(j,<span class="hljs-string">"*"</span>,i,<span class="hljs-string">"="</span>,i*j,end=<span class="hljs-string">" "</span>)<br>        j += <span class="hljs-number">1</span><br>    print()<br>    i -= <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>
<p>向左三角</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> i &lt; <span class="hljs-number">10</span>:<br>    count = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> count&lt;k:<br>        print(end=<span class="hljs-string">"        "</span>)<br>        count+=<span class="hljs-number">1</span><br>    k-=<span class="hljs-number">1</span><br>    j = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> j &lt;= i:<br>        print(<span class="hljs-string">"%s*%s=%s"</span>%(j,i,i*j),end=<span class="hljs-string">"\t"</span>)<br>        j += <span class="hljs-number">1</span><br>    print()<br>    i += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>
<p>向左倒三角</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">i = <span class="hljs-number">9</span><br><br><br><span class="hljs-keyword">while</span> i &gt;<span class="hljs-number">0</span>:<br>    k = <span class="hljs-number">9</span><br>    <span class="hljs-keyword">while</span> k &gt; i:<br>        print(end=<span class="hljs-string">"        "</span>)<br>        k -= <span class="hljs-number">1</span><br>    j = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> j &lt;= i:<br>        print(<span class="hljs-string">"%s*%s=%s"</span>%(j,i,i*j),end=<span class="hljs-string">"\t"</span>)<br>        j += <span class="hljs-number">1</span><br>    print()<br>    i -= <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>
<h2 id="三、使用for循环"><a href="#三、使用for循环" class="headerlink" title="三、使用for循环"></a>三、使用for循环</h2><p>常在遍历时候使用，</p>
<p>在字典中取出键值，但可以用var.values()获得键值,用var.items()得到它本身</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">var = <span class="hljs-string">"今年过年不收礼啊，"</span><br><span class="hljs-keyword">for</span> val <span class="hljs-keyword">in</span> var:<br>    print(val)<br><span class="hljs-comment">#for循环嵌套</span><br><br>var = [<span class="hljs-string">"python"</span>,<span class="hljs-string">"hello"</span>,<span class="hljs-string">"java"</span>,<span class="hljs-string">"c"</span>]<br><span class="hljs-keyword">for</span> val <span class="hljs-keyword">in</span> var:<br>    print(val)<br>    <span class="hljs-keyword">for</span> res <span class="hljs-keyword">in</span> val:<br>        print(res)<br><br>var = &#123;<span class="hljs-string">"a"</span>:<span class="hljs-number">1</span>,<span class="hljs-string">"b"</span>:<span class="hljs-number">2</span>,<span class="hljs-string">"c"</span>:<span class="hljs-number">3</span>&#125;<br><span class="hljs-keyword">for</span> val <span class="hljs-keyword">in</span> var.items():<br>    print(val)<br></code></pre></td></tr></table></figure>
<p>#在二级列表的使用中，可以使用abc这样的获得相应值，要求长度相同</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">var = [[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>],[<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>]]<br><span class="hljs-keyword">for</span> a,b,c <span class="hljs-keyword">in</span> var:<br>    print(a,b,c)<br><br><br>range(a,b) a为起始，b为最大值<span class="hljs-number">-1</span>，(如果没有a那么就是从<span class="hljs-number">0</span>开始 通过<span class="hljs-keyword">for</span>循环打印乘法表<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,i+<span class="hljs-number">1</span>):<br>        print(<span class="hljs-string">"%sx%s=%s"</span>%(j,i,i*j),end=<span class="hljs-string">"\t"</span>)<br>    print()<br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(i, <span class="hljs-number">10</span>):<br>        print(<span class="hljs-string">"%sx%s=%s"</span> % (i, j, i * j), end=<span class="hljs-string">"\t"</span>)<br>    print()<br><br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>):<br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, <span class="hljs-number">10</span> - i):<br>        print(end=<span class="hljs-string">"        "</span>)<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, i + <span class="hljs-number">1</span>):<br>        print(<span class="hljs-string">"%sx%s=%s"</span> % (j, i, i * j), end=<span class="hljs-string">"\t"</span>)<br>    print()<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>day 5：小练习与分支结构</title>
    <url>/2020/04/03/day-5%EF%BC%9A%E5%B0%8F%E7%BB%83%E4%B9%A0%E4%B8%8E%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h2 id="一、身份检测"><a href="#一、身份检测" class="headerlink" title="一、身份检测"></a>一、身份检测</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">is</span> 是<br><span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> 不是<br><br><span class="hljs-comment"># var = "man"</span><br><span class="hljs-comment"># val = "man"</span><br><span class="hljs-comment"># res = var is not val</span><br><span class="hljs-comment"># print(res)</span><br></code></pre></td></tr></table></figure>
<h2 id="二、位运算"><a href="#二、位运算" class="headerlink" title="二、位运算"></a>二、位运算</h2><a id="more"></a>

<p>&amp; 按位于<br>| 按位或<br>^ 按位或<br>~ 按位取反<br>&lt;&lt; 左移</p>
<blockquote>
<blockquote>
<p>右移</p>
</blockquote>
</blockquote>
<h2 id="三、分支结构"><a href="#三、分支结构" class="headerlink" title="三、分支结构"></a>三、分支结构</h2><p>流程控制<br>流程：执行代码的顺序<br>顺序结构，分支结构，循环结构</p>
<p>单向分支 :<br>if 条件语句：<br>    功能<br>    …</p>
<p>双向分支：<br>if 条件1：<br>    功能1<br>else：<br>    功能2</p>
<p>多向分支：<br>if 条件1：<br>    功能1<br>elif 条件2：<br>    功能2<br>elif 条件3：<br>    功能3<br>…</p>
<p>巢状分支:（嵌套）<br>if 条件1：<br>    if 条件2：<br>        功能2<br>    else:<br>        功能3<br>else<br>    功能4</p>
<h2 id="四、内容输入"><a href="#四、内容输入" class="headerlink" title="四、内容输入"></a>四、内容输入</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">name = input()<br>name = input(<span class="hljs-string">"请输入你的用户名："</span>)<br>num = int(input(<span class="hljs-string">"请输入你的年龄："</span>)) <br>得到int型的输入<br><br>name = input(<span class="hljs-string">"请输入你的用户名："</span>)<br><span class="hljs-keyword">if</span> name == <span class="hljs-string">"admin"</span>:<br>    print(<span class="hljs-string">"管理员登录！"</span>)<br>num = int(input(<span class="hljs-string">"请输入你的年龄："</span>))<br>print(num,type(num))<br></code></pre></td></tr></table></figure>
<h2 id="五、输入年份判断生肖"><a href="#五、输入年份判断生肖" class="headerlink" title="五、输入年份判断生肖"></a>五、输入年份判断生肖</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">year = int(input(<span class="hljs-string">"请输入一个要查询的年份："</span>))<br><span class="hljs-keyword">if</span> year % <span class="hljs-number">12</span> == <span class="hljs-number">2</span>:<br>    print(<span class="hljs-string">"今年是狗年"</span>)<br><span class="hljs-keyword">elif</span> year % <span class="hljs-number">12</span> == <span class="hljs-number">3</span>:<br>    print(<span class="hljs-string">"今年是猪年"</span>)<br><span class="hljs-keyword">elif</span> year % <span class="hljs-number">12</span> == <span class="hljs-number">4</span>:<br>    print(<span class="hljs-string">"鼠年"</span>)<br><span class="hljs-keyword">elif</span> year % <span class="hljs-number">12</span> == <span class="hljs-number">5</span>:<br>    print(<span class="hljs-string">"牛年"</span>)<br><span class="hljs-keyword">elif</span> year % <span class="hljs-number">12</span> == <span class="hljs-number">6</span>:<br>    print(<span class="hljs-string">"虎年"</span>)<br><span class="hljs-keyword">elif</span> year % <span class="hljs-number">12</span> == <span class="hljs-number">7</span>:<br>    print(<span class="hljs-string">"兔年"</span>)<br><span class="hljs-keyword">elif</span> year % <span class="hljs-number">12</span> == <span class="hljs-number">8</span>:<br>    print(<span class="hljs-string">"龙年"</span>)<br><span class="hljs-keyword">elif</span> year % <span class="hljs-number">12</span> == <span class="hljs-number">9</span>:<br>    print(<span class="hljs-string">"蛇年"</span>)<br><span class="hljs-keyword">elif</span> year % <span class="hljs-number">12</span> == <span class="hljs-number">10</span>:<br>    print(<span class="hljs-string">"马年"</span>)<br><span class="hljs-keyword">elif</span> year % <span class="hljs-number">12</span> == <span class="hljs-number">11</span>:<br>    print(<span class="hljs-string">"羊年"</span>)<br><span class="hljs-keyword">elif</span> year % <span class="hljs-number">12</span> == <span class="hljs-number">0</span>:<br>    print(<span class="hljs-string">"猴年"</span>)<br><span class="hljs-keyword">elif</span> year % <span class="hljs-number">12</span> == <span class="hljs-number">1</span>:<br>    print(<span class="hljs-string">"鸡年"</span>)<br></code></pre></td></tr></table></figure>
<h2 id="六、彩票抽奖"><a href="#六、彩票抽奖" class="headerlink" title="六、彩票抽奖"></a>六、彩票抽奖</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">用户输入一个两位数，<br>输入的数值与指定的号码对比，<br>如果两个数值一样，就是一等奖<br>如果两个数一样，郸顺序不一样，是二等奖<br>如果只有一个数值一样，不得奖<br><span class="hljs-keyword">import</span> random <span class="hljs-comment">#引入随机数</span><br><br>luck_num = random.randint(<span class="hljs-number">10</span>,<span class="hljs-number">99</span>)<br>luck_num_g = luck_num % <span class="hljs-number">10</span><br>luck_num_s = luck_num //<span class="hljs-number">10</span><br>buy_num = int(input(<span class="hljs-string">"请输入一个两位数："</span>))<br><span class="hljs-keyword">if</span> buy_num == luck_num:<br>    print(<span class="hljs-string">"一等奖"</span>)<br><span class="hljs-keyword">elif</span> buy_num % <span class="hljs-number">10</span> == luck_num_s <span class="hljs-keyword">and</span> buy_num //<span class="hljs-number">10</span> == luck_num_g:<br>    print(<span class="hljs-string">"二等奖"</span>)<br><span class="hljs-keyword">else</span>:<br>    print(<span class="hljs-string">"遗憾,没中奖"</span>)<br></code></pre></td></tr></table></figure>
<p>​</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>day 7：函数，字符串切片</title>
    <url>/2020/04/03/day-7%EF%BC%9A%E5%87%BD%E6%95%B0%EF%BC%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%87%E7%89%87/</url>
    <content><![CDATA[<h2 id="一、不定长参数"><a href="#一、不定长参数" class="headerlink" title="一、不定长参数"></a>一、不定长参数</h2><p>全局变量：顶格写的变量，在任何地方都可以使用 局部变量：</p>
<p>在代码组中定义，只能在代码组中使用</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#函数定义</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">opration</span><span class="hljs-params">(a,b,c,d)</span>:</span><br>    sum1 = a + b + c + d<br>    print(sum1)<br>opration(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br><br><span class="hljs-comment">#使用容器作为参数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">opration</span><span class="hljs-params">(*args)</span>:</span><br>    sum1 = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> args:<br>        sum1+=var<br>    <span class="hljs-keyword">return</span> sum1<br>res = opration(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br>print(res)<br><br><span class="hljs-comment"># * 垃圾回收站，他不能接收关键字参数,不能接收关键字参数</span><br><span class="hljs-comment">#带* 的参数要放在形参的最后面</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">opration</span><span class="hljs-params">(a,b,c,*d)</span>:</span><br>    print(a)<br>    print(b)<br>    print(c)<br>    print(d)<br>opration(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>)<br><br><span class="hljs-comment"># **接收不定长关键字参数,只能放在最后</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">opration</span><span class="hljs-params">(a,b,c,d,*args,**kwargs)</span>:</span><br>    print(a,b,c,d)<br>    print(args)<br>    print(kwargs)<br>opration(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,A = <span class="hljs-number">9</span>,B = <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure>
<h2 id="二、函数闭包"><a href="#二、函数闭包" class="headerlink" title="二、函数闭包"></a>二、函数闭包</h2><p>函数闭包：内部函数调用外部函数的变量（非全局变量， 则称内部函数为闭包 即调用一个函数，返回一个新的函数来，称为闭包</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span><span class="hljs-params">()</span>:</span><br>    num = <span class="hljs-number">1</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func1</span><span class="hljs-params">()</span>:</span><br>        num=<span class="hljs-number">2</span><br>        print(num)<br>    print(num)<br>    func1()<br>    print(num)<br>func() <span class="hljs-comment">#1,2,1</span><br><br><span class="hljs-comment">#先return inner这个函数，之后res代表inner，而num1传入了20</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">outer</span><span class="hljs-params">(num1)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inner</span><span class="hljs-params">(num2)</span>:</span><br>        <span class="hljs-keyword">return</span> num1 + num2<br>    <span class="hljs-keyword">return</span> inner<br>res = outer(<span class="hljs-number">20</span>)<br>result = res(<span class="hljs-number">10</span>)<br>print(result)<br><br><span class="hljs-comment">#在使用闭包的时候，在内部没有引用的外部变量才可以</span><br><span class="hljs-comment">#而内部有使用时，代码会运行内部的变量，而导致没定义的报错</span><br><span class="hljs-comment"># def outer(a):</span><br><span class="hljs-comment">#     def inner():</span><br><span class="hljs-comment">#         a = a+1</span><br><span class="hljs-comment">#         return a</span><br><span class="hljs-comment">#     return inner</span><br><span class="hljs-comment"># res = outer(1)</span><br><span class="hljs-comment"># result = res()</span><br><span class="hljs-comment"># print(result)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">outer</span><span class="hljs-params">(a)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inner</span><span class="hljs-params">()</span>:</span><br>        a[<span class="hljs-number">0</span>] = a[<span class="hljs-number">0</span>]+<span class="hljs-number">1</span>   <span class="hljs-comment">#使用容器后，并没有定义a，而是对a的一个取值</span><br>        <span class="hljs-keyword">return</span> a<br>    <span class="hljs-keyword">return</span> inner<br>res = outer([<span class="hljs-number">1</span>])<br>result = res()<br>print(result)<br></code></pre></td></tr></table></figure>
<h2 id="三、字符串和列表的切片"><a href="#三、字符串和列表的切片" class="headerlink" title="三、字符串和列表的切片"></a>三、字符串和列表的切片</h2><p>[开始索引:结束索引:间隔] 切片操作(结束索引取不到)</p>
<p>不加结束索引代表从开始索引取到最后</p>
<p>间隔缺省则是1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">str1 = <span class="hljs-string">"停车坐爱枫林晚，霜叶红于二月花"</span><br>print(str1[<span class="hljs-number">-3</span>],str1[<span class="hljs-number">-2</span>],str1[<span class="hljs-number">-1</span>])<br>print(str1[<span class="hljs-number">-3</span>:])<br>print(str1[::<span class="hljs-number">2</span>])<br>print(str1[<span class="hljs-number">4</span>:<span class="hljs-number">0</span>:<span class="hljs-number">-1</span>])<br>print(str1[::<span class="hljs-number">-1</span> ])<br><br>var = range(<span class="hljs-number">100</span>)<br>print(var[<span class="hljs-number">25</span>:<span class="hljs-number">31</span>])<br>print(var[<span class="hljs-number">70</span>:<span class="hljs-number">83</span>:<span class="hljs-number">3</span>])<br>print(var[<span class="hljs-number">90</span>:<span class="hljs-number">84</span>:<span class="hljs-number">-1</span>])<br>print(var[<span class="hljs-number">99</span>:<span class="hljs-number">69</span>:<span class="hljs-number">-5</span>])<br>print(var[<span class="hljs-number">-10</span>:<span class="hljs-number">-30</span>:<span class="hljs-number">-2</span>])<br><br>print(var[<span class="hljs-number">90</span>:<span class="hljs-number">200</span>]) <span class="hljs-comment">#a取到90到99</span><br>print(var[<span class="hljs-number">150</span>:<span class="hljs-number">200</span>])<span class="hljs-comment">#取出来为空。</span><br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>day 8:字符串相关方法</title>
    <url>/2020/04/03/day-8-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E5%85%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="字符串内置方法："><a href="#字符串内置方法：" class="headerlink" title="字符串内置方法："></a>字符串内置方法：</h2><p>dir（） 查询这个类型的数据有什么操作方法</p>
<p>通过ctrl+鼠标键可以查看使用方法</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">str1 = <span class="hljs-string">"hello world"</span><br>print(dir(str1))<br><br><span class="hljs-comment">#capitalize 整个字符串的首字母大写</span><br>str2 = str1.capitalize()<br>print(str2)<br><br><span class="hljs-comment">#title 每个单词的首字母大写</span><br>str3 = str1.title()<br>print(str3)<br><br><span class="hljs-comment">#upper 所有字母大写</span><br>str4 = str1.upper()<br>print(str4)<br><br><span class="hljs-comment">#lower 所有字母小写</span><br>str5 = str4.lower()<br>print(str5)<br><br><span class="hljs-comment">#swapcase 大小写互换</span><br>str6 = str5.swapcase()<br>print(str6)<br><br><span class="hljs-comment">#count 查询字符在字符串出现的次数,可以自定义查找位置</span><br>res = str1.count(<span class="hljs-string">"o"</span>,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>)<br>print(res)<br><br><span class="hljs-comment">#find 查找某字符出现的位置,默认只查询一个</span><br>res = str1.find(<span class="hljs-string">"o"</span>)<br>print(res)<br><br><span class="hljs-comment">#startswith 判断是否以某个字符串开头，可以加区间</span><br>res = str1.startswith(<span class="hljs-string">"o"</span>,<span class="hljs-number">4</span>)<br>print(res)<br><br><span class="hljs-comment">#endswith 判断是否以某一个字符串借位</span><br>res = str1.endswith(<span class="hljs-string">"d"</span>,<span class="hljs-number">4</span>)<br>print(res)<br><br><span class="hljs-comment">#isupper 判断是否都是大写字母</span><br><span class="hljs-comment">#islower</span><br>res = str1.isupper()<br>print(res)<br>res = str1.islower()<br>print(res)<br><br><span class="hljs-comment">#isalnum 判断字符串是否都是由数值，字母，汉字组成</span><br>str1 = <span class="hljs-string">"this中123"</span><br>res = str1.isalnum()<br>print(res)<br><br><span class="hljs-comment">#isdigit 判断字符串是否由十进制数值组成(这个比较常用)</span><br><span class="hljs-comment">#isdecimal 判断是否由数值组成de1字符串</span><br><span class="hljs-comment">#isnumeric 判断是否由数字组成的字符串</span><br>str1 = <span class="hljs-string">"123"</span><br>res = str1.isdigit()<br>print(res)<br>res = str1.isdecimal()<br>print(res)<br>res = str1.isnumeric()<br>print(res)<br><span class="hljs-string">"""</span><br><span class="hljs-string">isdigit()</span><br><span class="hljs-string">True: Unicode数字，byte数字（单字节），全角数字（双字节），罗马数字</span><br><span class="hljs-string">False: 汉字数字</span><br><span class="hljs-string">Error: 无</span><br><span class="hljs-string"></span><br><span class="hljs-string">isdecimal()</span><br><span class="hljs-string">True: Unicode数字，，全角数字（双字节）</span><br><span class="hljs-string">False: 罗马数字，汉字数字</span><br><span class="hljs-string">Error: byte数字（单字节）</span><br><span class="hljs-string"></span><br><span class="hljs-string">isnumeric()</span><br><span class="hljs-string">True: Unicode数字，全角数字（双字节），罗马数字，汉字数字</span><br><span class="hljs-string">False: 无</span><br><span class="hljs-string">Error: byte数字（单字节）</span><br><span class="hljs-string">"""</span><br><span class="hljs-comment">#isspace 判断字符串是否是由空白符组成</span><br>str1 = <span class="hljs-string">"\n"</span><br>res = str1.isspace()<br>print(res)<br><br><span class="hljs-comment">#istitle 判断是否每一个字母首字母都大写</span><br>str1 = <span class="hljs-string">"Hello World"</span><br>res = str1.istitle()<br>print(res)<br><br><span class="hljs-comment">#len 计算字符串的长度</span><br>res = len(str1)<br>print(res)<br><br><span class="hljs-comment">#split 按照指定的字符进行切分，默认按照空格</span><br>str2 = str1.split(<span class="hljs-string">" "</span>)<br>print(str2)<br><br><span class="hljs-comment">#splitlines 按照换行进行泄愤</span><br>str1 = <span class="hljs-string">"this is \n a \n test"</span><br>str2 = str1.splitlines()<br>print(str2)<br><br><span class="hljs-comment">#join 字符串拼接</span><br>str1 = <span class="hljs-string">"@"</span><br>str2 = <span class="hljs-string">"this"</span><br>str3 = str1.join(str2) <span class="hljs-comment">#t@h@i@s</span><br>print(str3)<br>str1 = <span class="hljs-string">"@"</span><br>str2 = [<span class="hljs-string">"this"</span>,<span class="hljs-string">"is"</span>,<span class="hljs-string">"a"</span>,<span class="hljs-string">"test"</span>]<br>str3 = str1.join(str2) <span class="hljs-comment">#this@is@a@test</span><br>print(str3)<br><br><span class="hljs-comment">#zfill 填充字符串</span><br>str1 = <span class="hljs-string">"this"</span><br>str2 = str1.zfill(<span class="hljs-number">20</span>)<span class="hljs-comment">#0000000000000000this</span><br>print(str2)<br><br><span class="hljs-comment">#center 用指定字符填充，然后字符串居中</span><br>str1 = <span class="hljs-string">"this"</span><br>str2 = str1.center(<span class="hljs-number">10</span>,<span class="hljs-string">"A"</span>) <span class="hljs-comment">#AAAthisAAA</span><br>print(str2)<br><span class="hljs-comment">#rjust</span><br>str1 = <span class="hljs-string">"this"</span><br>str2 = str1.rjust(<span class="hljs-number">10</span>,<span class="hljs-string">"@"</span>) <span class="hljs-comment">#@@@@@@this</span><br>print(str2)<br><span class="hljs-comment">#ljust</span><br>str1 = <span class="hljs-string">"this"</span><br>str2 = str1.ljust(<span class="hljs-number">10</span>,<span class="hljs-string">"@"</span>) <span class="hljs-comment">#this@@@@@@</span><br>print(str2)<br><br><span class="hljs-comment">#strip 取出两头某之丰富</span><br>str1 = <span class="hljs-string">"\nthis\n"</span><br>str2 = str1.strip()<br>print(str2)<br><span class="hljs-comment">#rstrip 从右边去掉某个字符</span><br>str1 = <span class="hljs-string">"\nthis\n"</span><br>str2 = str1.rstrip()<br>print(str2)<br><span class="hljs-comment">#lstrip 从右边去掉某个字符</span><br>str1 = <span class="hljs-string">"\nthis\n"</span><br>str2 = str1.lstrip()<br>print(str2)<br><br><span class="hljs-comment">#maketrans 和 translate</span><br>str1 = <span class="hljs-string">"this is test"</span><br>str2 = str1.maketrans(<span class="hljs-string">"t"</span>,<span class="hljs-string">"T"</span>) <span class="hljs-comment">#制作映射表</span><br>print(str2)<br>str3 = str1.translate(str2) <span class="hljs-comment">#传入映射表</span><br>print(str3)<br><br><span class="hljs-comment">#replace 替换 (更加好用)</span><br>str2 = str1.replace(<span class="hljs-string">"t"</span>,<span class="hljs-string">"T"</span>,<span class="hljs-number">2</span>)<br>print(str2)<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>day12：元祖的操作、字典的操作、文件操作、pickle模块</title>
    <url>/2020/04/03/day12%EF%BC%9A%E5%85%83%E7%A5%96%E7%9A%84%E6%93%8D%E4%BD%9C%E3%80%81%E5%AD%97%E5%85%B8%E7%9A%84%E6%93%8D%E4%BD%9C%E3%80%81%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E3%80%81pickle%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<h2 id="一、元祖遍历"><a href="#一、元祖遍历" class="headerlink" title="一、元祖遍历"></a>一、元祖遍历</h2><h3 id="使用for循环遍历"><a href="#使用for循环遍历" class="headerlink" title="使用for循环遍历"></a>使用for循环遍历</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">t = (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)<br><span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> t:<br>    print(var)<br>i = <span class="hljs-number">0</span><br>t = ((<span class="hljs-number">1</span>,<span class="hljs-number">2</span>),(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>),(<span class="hljs-number">5</span>,<span class="hljs-number">6</span>))<br><span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> t:<br>    <span class="hljs-keyword">for</span> val <span class="hljs-keyword">in</span> var:<br>        print(val)<br></code></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="使用while循环遍历"><a href="#使用while循环遍历" class="headerlink" title="使用while循环遍历"></a>使用while循环遍历</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> i &lt; len(t):<br>     print(t[i])<br>     i = i+<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>
<h3 id="元祖的-、"><a href="#元祖的-、" class="headerlink" title="元祖的+、*"></a>元祖的+、*</h3><p>+两个元祖合并，生成新元祖<br>*一个元祖重复输出，生成新元祖</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">t = (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)<br>t1 = (<span class="hljs-number">6</span>,<span class="hljs-number">7</span>)<br>t2 = t + t1<br>print(t2) <span class="hljs-comment">#元祖不能改变</span><br>t2 = t * <span class="hljs-number">3</span><br>print(t2)<br></code></pre></td></tr></table></figure>

<h2 id="二、元祖常用方法"><a href="#二、元祖常用方法" class="headerlink" title="二、元祖常用方法"></a>二、元祖常用方法</h2><p>由于元祖不能改变，所以其方法也少</p>
<h3 id="1、查询结果-index"><a href="#1、查询结果-index" class="headerlink" title="1、查询结果 index"></a><strong>1、查询结果 index</strong></h3><p>输入下标，返回元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#查询结果</span><br>res = t.index(<span class="hljs-number">2</span>)<br>print(res)<br></code></pre></td></tr></table></figure>
<h3 id="2、查询数量-count"><a href="#2、查询数量-count" class="headerlink" title="2、查询数量 count"></a><strong>2、查询数量 count</strong></h3><p>查询输入元素的出现次数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#查询数量</span><br>res = t.count(<span class="hljs-number">4</span>)<br>print(res)<br></code></pre></td></tr></table></figure>
<h3 id="3、元祖推导式"><a href="#3、元祖推导式" class="headerlink" title="3、元祖推导式"></a><strong>3、元祖推导式</strong></h3><p>产生生成器，可以使用for循环遍历</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">t = (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)<br>res = (var**<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> t)<br>print(res)      <span class="hljs-comment">#generator产生生成器</span><br><span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> res: <span class="hljs-comment">#可以通过for、next遍历</span><br>    print(var)<br></code></pre></td></tr></table></figure>

<h2 id="三、字典的操作"><a href="#三、字典的操作" class="headerlink" title="三、字典的操作"></a>三、字典的操作</h2><h3 id="字典的创建"><a href="#字典的创建" class="headerlink" title="字典的创建"></a><strong>字典的创建</strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">dict1 = &#123;<span class="hljs-string">"a"</span>:<span class="hljs-number">1</span>,<span class="hljs-string">"b"</span>:<span class="hljs-number">2</span>,<span class="hljs-string">"c"</span>:<span class="hljs-number">3</span>&#125;<br>print(dict1,type(dict1))<br><br>dict2 = dict([[<span class="hljs-string">"a"</span>,<span class="hljs-number">1</span>],[<span class="hljs-string">"b"</span>,<span class="hljs-number">2</span>]])<span class="hljs-comment">#通过转换实现，少用</span><br>print(dict2,type(dict2))<br><br>dict3 = dict(&#123;<span class="hljs-string">"a"</span>:<span class="hljs-number">1</span>,<span class="hljs-string">"b"</span>:<span class="hljs-number">2</span>,<span class="hljs-string">"c"</span>:<span class="hljs-number">3</span>&#125;)<span class="hljs-comment">#转换，把字典转换成字典</span><br>print(dict3,type(dict3))<br><br>dict4 = dict(a=<span class="hljs-number">1</span>, b=<span class="hljs-number">2</span>, c=<span class="hljs-number">3</span>)<br>print(dict4,type(dict4))<br><br>dict5 = dict(zip((<span class="hljs-string">"a"</span>,<span class="hljs-string">"b"</span>,<span class="hljs-string">"e"</span>,<span class="hljs-string">"c"</span>),(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)))<span class="hljs-comment">#长度不同，以最短的为主</span><br>print(dict5,type(dict5))<br></code></pre></td></tr></table></figure>
<h3 id="字典的遍历"><a href="#字典的遍历" class="headerlink" title="字典的遍历"></a><strong>字典的遍历</strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> key,value <span class="hljs-keyword">in</span> dict5.items():<br>    print(key,value)<br></code></pre></td></tr></table></figure>

<h2 id="四、字典的内置方法"><a href="#四、字典的内置方法" class="headerlink" title="四、字典的内置方法"></a>四、字典的内置方法</h2><h3 id="1、items-字典转化为类似元祖的方式"><a href="#1、items-字典转化为类似元祖的方式" class="headerlink" title="1、items 字典转化为类似元祖的方式"></a>1、items 字典转化为类似元祖的方式</h3><h3 id="2、keys-将字典所有key组合成一个序列"><a href="#2、keys-将字典所有key组合成一个序列" class="headerlink" title="2、keys    将字典所有key组合成一个序列"></a>2、keys    将字典所有key组合成一个序列</h3><h3 id="3、values-将字典所有value组合成一个序列"><a href="#3、values-将字典所有value组合成一个序列" class="headerlink" title="3、values  将字典所有value组合成一个序列**"></a>3、values  将字典所有value组合成一个序列**</h3><h3 id="4、复制-copy"><a href="#4、复制-copy" class="headerlink" title="4、复制 copy"></a><strong>4、复制 copy</strong></h3><p>copy是浅拷贝，当二级字典发生变化是，拷贝的也会改变</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#复制copy</span><br>dict1 = &#123;<span class="hljs-string">"1"</span>:&#123;<span class="hljs-string">"a"</span>:<span class="hljs-number">2</span>,<span class="hljs-string">"b"</span>:<span class="hljs-number">3</span>,<span class="hljs-string">"c"</span>:<span class="hljs-number">4</span>&#125;&#125;<br><span class="hljs-comment">#复制copy</span><br>dict2 = dict1.copy()<br>print(dict2)<br>dict1[<span class="hljs-string">"1"</span>][<span class="hljs-string">"d"</span>] = <span class="hljs-number">1</span> <span class="hljs-comment">#字典添加</span><br>print(dict2)        <span class="hljs-comment">#在二级字典里的会随之改变</span><br>print(dict1)<br></code></pre></td></tr></table></figure>
<h3 id="5、get-根据key，返回value"><a href="#5、get-根据key，返回value" class="headerlink" title="5、get 根据key，返回value"></a><strong>5、get 根据key，返回value</strong></h3><p>好处是没有的key，不会报错，而是返回none</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#get 根据key，获取value</span><br>dict1 = &#123;<span class="hljs-string">"a"</span>:<span class="hljs-number">1</span>,<span class="hljs-string">"b"</span>:<span class="hljs-number">2</span>,<span class="hljs-string">"c"</span>:<span class="hljs-number">3</span>&#125;<br><span class="hljs-comment">#res = dict1[1] #如果这里搜索没有的key，报错导致程序结束</span><br>res = dict1.get(<span class="hljs-string">"ab"</span>)<br>print(res) <span class="hljs-comment">#则返回none</span><br></code></pre></td></tr></table></figure>
<h3 id="6、pop-移除指定元素，返回键对应值，popitem-删除最后一个，字典为空，则报错"><a href="#6、pop-移除指定元素，返回键对应值，popitem-删除最后一个，字典为空，则报错" class="headerlink" title="6、pop 移除指定元素，返回键对应值，popitem() 删除最后一个，字典为空，则报错"></a><strong>6、pop 移除指定元素，返回键对应值，popitem() 删除最后一个，字典为空，则报错</strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#pop 移除指定元素，返回键对应值</span><br>res = dict1.pop(<span class="hljs-string">"a"</span>,<span class="hljs-string">"key is no in here"</span>)<span class="hljs-comment">#加上默认值则可以不用报错</span><br>print(res)<br>print(dict1)<br><span class="hljs-comment">#popitem() 删除最后一个，字典为空，则报错</span><br>dict1 = &#123;<span class="hljs-string">"a"</span>:<span class="hljs-number">1</span>,<span class="hljs-string">"b"</span>:<span class="hljs-number">2</span>,<span class="hljs-string">"c"</span>:<span class="hljs-number">3</span>&#125;<br>res = dict1.popitem()<br>print(res)<br>print(dict1)<br></code></pre></td></tr></table></figure>
<h3 id="7、setdefault-添加一个键，如果存在则不进行操作"><a href="#7、setdefault-添加一个键，如果存在则不进行操作" class="headerlink" title="7、setdefault 添加一个键，如果存在则不进行操作"></a><strong>7、setdefault 添加一个键，如果存在则不进行操作</strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#setdefault 添加一个键，如果存在则不进行操作</span><br>dict1.setdefault(<span class="hljs-string">"cc"</span>,<span class="hljs-number">7</span>)<br>print(dict1)<br></code></pre></td></tr></table></figure>
<h3 id="8、update-没有的键值会添加，已有的会进行更新"><a href="#8、update-没有的键值会添加，已有的会进行更新" class="headerlink" title="8、update 没有的键值会添加，已有的会进行更新"></a><strong>8、update 没有的键值会添加，已有的会进行更新</strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#update</span><br>dict1.update(&#123;<span class="hljs-string">"jj"</span>:<span class="hljs-string">"hh"</span>&#125;)<br>print(dict1)<br>dict2 = &#123;<span class="hljs-string">"d"</span>:<span class="hljs-number">5</span>,<span class="hljs-string">"e"</span>:<span class="hljs-number">5</span>,<span class="hljs-string">"ff"</span>:<span class="hljs-number">7</span>&#125;<br>dict1.update(dict2)<br>print(dict1)    <span class="hljs-comment">#没有的键值会添加，已有的会进行更新</span><br></code></pre></td></tr></table></figure>
<h2 id="五、文件操作"><a href="#五、文件操作" class="headerlink" title="五、文件操作"></a>五、文件操作</h2><p>open(file_path,mode)<br>mode 权限：</p>
<h3 id="w-write-写，如果没有这个人间会自动创建一个）"><a href="#w-write-写，如果没有这个人间会自动创建一个）" class="headerlink" title="w(write 写，如果没有这个人间会自动创建一个）"></a><strong>w(write 写，如果没有这个人间会自动创建一个）</strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">f = open(<span class="hljs-string">"user.txt"</span>,<span class="hljs-string">"w"</span>)<br>f.write(<span class="hljs-string">"www.python.com"</span>)<br>f.close()       <span class="hljs-comment">#写完之后记得关闭</span><br></code></pre></td></tr></table></figure>

<h3 id="r-read-读：read读取全部、readline读取一行、readlines以行为单位全部读取"><a href="#r-read-读：read读取全部、readline读取一行、readlines以行为单位全部读取" class="headerlink" title="r(read 读：read读取全部、readline读取一行、readlines以行为单位全部读取"></a><strong>r(read 读：read读取全部、readline读取一行、readlines以行为单位全部读取</strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">f = open(<span class="hljs-string">"user.txt"</span>,<span class="hljs-string">"r"</span>)<br><span class="hljs-comment">#content = f.read()</span><br><span class="hljs-comment">#content = f.readline()</span><br>content = f.readlines() <span class="hljs-comment">#最常用，以行为单位全部读取</span><br>print(content)<br>f.close()<br></code></pre></td></tr></table></figure>

<h3 id="a-append-追加，如果没有这个文件则创建一个，如果有则在文件末尾追加"><a href="#a-append-追加，如果没有这个文件则创建一个，如果有则在文件末尾追加" class="headerlink" title="a(append 追加，如果没有这个文件则创建一个，如果有则在文件末尾追加)"></a>a(append 追加，如果没有这个文件则创建一个，如果有则在文件末尾追加)</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">f = open(<span class="hljs-string">"user.txt"</span>,<span class="hljs-string">"a"</span>)<br>f.write(<span class="hljs-string">"hello"</span>)<br>f.close()<br></code></pre></td></tr></table></figure>

<h3 id="w-读写权限-会覆盖之前内容（先清空再覆盖"><a href="#w-读写权限-会覆盖之前内容（先清空再覆盖" class="headerlink" title="w+ 读写权限 会覆盖之前内容（先清空再覆盖"></a>w+ 读写权限 会覆盖之前内容（先清空再覆盖</h3><h3 id="r-读写-（不会先清空再覆盖，即没有创建新文件的权限"><a href="#r-读写-（不会先清空再覆盖，即没有创建新文件的权限" class="headerlink" title="r+ 读写  （不会先清空再覆盖，即没有创建新文件的权限"></a>r+ 读写  （不会先清空再覆盖，即没有创建新文件的权限</h3><h3 id="a-读写-（不会清除文件，而是在文件尾部追加）"><a href="#a-读写-（不会清除文件，而是在文件尾部追加）" class="headerlink" title="a+ 读写 （不会清除文件，而是在文件尾部追加）"></a>a+ 读写 （不会清除文件，而是在文件尾部追加）</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">f = open(<span class="hljs-string">"user.txt"</span>,<span class="hljs-string">"w+"</span>)<br>f.write(<span class="hljs-string">"hello world"</span>)<br>f.seek(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)  <span class="hljs-comment">#写操作之后光标会在最末端，导致读取从最末端开始，seek移动光标</span><br>content = f.read()<br>print(content)<br>f.close()<br>f = open(<span class="hljs-string">"user.txt"</span>,<span class="hljs-string">"r+"</span>)<br>f.write(<span class="hljs-string">"world"</span>)<br>f.seek(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)  <span class="hljs-comment">#写操作之后光标会在最末端，导致读取从最末端开始，seek移动光标</span><br>content = f.read()<br>print(content)<br>f.close()<br>f = open(<span class="hljs-string">"user.txt"</span>,<span class="hljs-string">"a+"</span>)<br>f.write(<span class="hljs-string">"world"</span>)<br>f.seek(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)  <span class="hljs-comment">#写操作之后光标会在最末端，导致读取从最末端开始，seek移动光标</span><br>content = f.read()<br>print(content)<br>f.close()<br><span class="hljs-string">"""</span><br><span class="hljs-string">输出结果为</span><br><span class="hljs-string">hello world</span><br><span class="hljs-string">world world</span><br><span class="hljs-string">world worldworld</span><br><span class="hljs-string">"""</span><br></code></pre></td></tr></table></figure>
<h3 id="wb-二进制写"><a href="#wb-二进制写" class="headerlink" title="wb 二进制写"></a>wb 二进制写</h3><h3 id="rb-二进制读"><a href="#rb-二进制读" class="headerlink" title="rb 二进制读"></a>rb 二进制读</h3><h3 id="ab-二进制追加写"><a href="#ab-二进制追加写" class="headerlink" title="ab 二进制追加写"></a>ab 二进制追加写</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#二进制模式一般在计算机交互时使用</span><br>f = open(<span class="hljs-string">"user.txt"</span>,<span class="hljs-string">"wb"</span>)<br>f.write(<span class="hljs-string">"我好好学习"</span>.encode(<span class="hljs-string">"utf-8"</span>))<br>f.close()<br><br>f = open(<span class="hljs-string">"user.txt"</span>,<span class="hljs-string">"rb"</span>)<br>content = f.read().decode(<span class="hljs-string">"utf-8"</span>)<br>print(content)<br>f.close()<br><br><span class="hljs-comment">#通过使用errors参数可以不报错，但是会是乱码</span><br>f = open(<span class="hljs-string">"user.txt"</span>,<span class="hljs-string">"w"</span>,encoding=<span class="hljs-string">"utf-8"</span>)<span class="hljs-comment"># binary mode doesn't take an encoding argument</span><br>f.write(<span class="hljs-string">"我好好学习"</span>)<br>f.close()<br>f = open(<span class="hljs-string">"user.txt"</span>,<span class="hljs-string">"r"</span>,encoding=<span class="hljs-string">"gbk"</span>,errors=<span class="hljs-string">"ignore"</span>)<br>content = f.read()<br>print(content)<br>f.close()<br></code></pre></td></tr></table></figure>
<h3 id="为什么要close"><a href="#为什么要close" class="headerlink" title="为什么要close"></a><strong>为什么要close</strong></h3><p>在write的时候，是写到缓冲区中，而不是直接写进文件，<br>并且，文件不去close会导致文件没有保存，既没有生成</p>
<p>刷新缓冲区的方式：（即把缓冲区的内容写入文件中）<br>    1、缓冲区呗占满了<br>    2、关闭文件时自动刷新<br>    3、程序运行结束<br>    4、手动刷新缓冲区 flush（）</p>
<h3 id="with语法，不用手动关闭文件，执行结束，自动关闭文件"><a href="#with语法，不用手动关闭文件，执行结束，自动关闭文件" class="headerlink" title="with语法，不用手动关闭文件，执行结束，自动关闭文件"></a><strong>with语法，不用手动关闭文件，执行结束，自动关闭文件</strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#with语法，不用手动关闭文件，执行结束，自动关闭文件</span><br><span class="hljs-keyword">with</span> open(<span class="hljs-string">"user.txt"</span>,<span class="hljs-string">"w"</span>,encoding=<span class="hljs-string">"utf-8"</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(<span class="hljs-string">"这是一个测试"</span>)<br><span class="hljs-keyword">with</span> open(<span class="hljs-string">"user.txt"</span>,<span class="hljs-string">"r"</span>,encoding=<span class="hljs-string">"utf-8"</span>) <span class="hljs-keyword">as</span> f:<br>    content = f.read()<br>    print(content)<br></code></pre></td></tr></table></figure>

<h2 id="六、pickle模块"><a href="#六、pickle模块" class="headerlink" title="六、pickle模块"></a>六、pickle模块</h2><p>使用前需要导入 import pickle<br>四个函数：<br>dump    （文件用）<br>load<br>dumps        （列表等使用）<br>loads<br>通过使用pickle模块可以方便二进制的数据传输解码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle <span class="hljs-comment">#是一个模块需要导入</span><br>L = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>res = pickle.dumps(L)<span class="hljs-comment">#当网络发送时，转换成二进制发送</span><br>print(res)<br>con = pickle.loads(res)<br>print(con)  <span class="hljs-comment">#接收时解码</span><br><br><span class="hljs-comment">#dump是用于文件操作的</span><br><span class="hljs-keyword">with</span> open(<span class="hljs-string">"user.txt"</span>,<span class="hljs-string">"wb"</span>) <span class="hljs-keyword">as</span> f:<br>    str = <span class="hljs-string">"这是一个测试"</span><br>    pickle.dump(str,f)<br><span class="hljs-keyword">with</span> open(<span class="hljs-string">"user.txt"</span>,<span class="hljs-string">"rb"</span>) <span class="hljs-keyword">as</span> f:<br>    res = pickle.load(f)<br>    print(res)<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>day 9：format操作与数字相关方法</title>
    <url>/2020/04/03/day-9%EF%BC%9Aformat%E6%93%8D%E4%BD%9C%E4%B8%8E%E6%95%B0%E5%AD%97%E7%9B%B8%E5%85%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="一、format-格式化字符"><a href="#一、format-格式化字符" class="headerlink" title="一、format 格式化字符"></a>一、format 格式化字符</h2><p>format 格式化字符 语法：通过{}和：来代替%<br>注意：format可以接受无限个参数，位置也可以不按顺序 参数也可以不使用也可以使用多次，2.6前不能为{}，2.7后可以为空</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">str1 = <span class="hljs-string">"&#123;&#125; say hello to &#123;&#125;"</span><br>str2 = str1.format(<span class="hljs-string">"jack"</span>,<span class="hljs-string">"rose"</span>)<br>print(str2)<br><br>str1 = <span class="hljs-string">"&#123;1&#125; say hello to &#123;0&#125;"</span>   <span class="hljs-comment">#可以通过索引改变顺序</span><br>str2 = str1.format(<span class="hljs-string">"jack"</span>,<span class="hljs-string">"rose"</span>)<br>print(str2)<br><br>str1 = <span class="hljs-string">"&#123;0[1]&#125; say hello to &#123;0[1]&#125;"</span>   <span class="hljs-comment">#可以通过索引改变顺序</span><br>str2 = str1.format([<span class="hljs-string">"jack"</span>,<span class="hljs-string">"rose"</span>])<br>print(str2)<br><br>str1 = <span class="hljs-string">"&#123;name&#125; is &#123;age&#125; years old"</span><br>str2 = str1.format(name = <span class="hljs-string">"jack"</span>, age = <span class="hljs-string">"19"</span>)<br>print(str2)<br><br><span class="hljs-comment">#format在网页爬虫中的应用</span><br>ur1 = <span class="hljs-string">"https://study.163.com/category/480000003121024#/?p=&#123;page&#125;"</span><br>start_page = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> start_page&lt;<span class="hljs-number">10</span>:<br>    ur1.format(page=start_page)<br>    start_page += <span class="hljs-number">1</span><br><br><span class="hljs-string">"""</span><br><span class="hljs-string">^ 居中</span><br><span class="hljs-string">&lt; 左对齐</span><br><span class="hljs-string">&gt; 右对齐(都比较少用)</span><br><span class="hljs-string">"""</span><br>str1 = <span class="hljs-string">"this"</span><br>str2 = <span class="hljs-string">"&#123;:@^10&#125;"</span>.format(str1)<br>print(str2)<br>str2 = <span class="hljs-string">"&#123;:@&lt;20&#125;"</span>.format(str1)<br>print(str2)<br><br><span class="hljs-comment">#调整精度</span><br>str1 = <span class="hljs-string">"&#123;:.3f&#125;"</span>.format(<span class="hljs-number">3.141592</span>)<br>print(str1)<br>str1 = <span class="hljs-string">"%.2f"</span>%(<span class="hljs-number">1.2345</span>)<br>print(str1)<br><br><span class="hljs-comment">#进制转换</span><br>str1 = <span class="hljs-string">"&#123;:b&#125;"</span>.format(<span class="hljs-number">16</span>)<br>print(str1)<br>str1 = <span class="hljs-string">"&#123;:d&#125;"</span>.format(<span class="hljs-number">16</span>)<br>print(str1)<br>str1 = <span class="hljs-string">"&#123;:o&#125;"</span>.format(<span class="hljs-number">16</span>)<br>print(str1)<br>str1 = <span class="hljs-string">"&#123;:x&#125;"</span>.format(<span class="hljs-number">16</span>)<br>print(str1)<br><br><span class="hljs-comment">#预留符</span><br>str1 = <span class="hljs-string">"&#123;:,&#125;"</span>.format(<span class="hljs-number">123415153452</span>)<span class="hljs-comment">#123,415,153,452</span><br>print(str1)<br><br><span class="hljs-comment">#locals 打印所有元素</span><br>name = <span class="hljs-string">"xiaoming"</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span><span class="hljs-params">()</span>:</span><br>    name = <span class="hljs-string">"xiaoming"</span><br>    age = <span class="hljs-string">"18"</span><br>print(locals())<br></code></pre></td></tr></table></figure>
<h2 id="二、数学相关方法"><a href="#二、数学相关方法" class="headerlink" title="二、数学相关方法"></a>二、数学相关方法</h2><p>abs() 绝对值<br>sum() 求和<br>max() 求最大值<br>min() 求最小值<br>pow(2,3,5) 幂运算 第三个参数是幂运算的结果对它取余<br>round() 对一个数值进行四舍五入<br>range(1,10,2) 1到10，间隔2（负号指反过来） </p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">num = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">7</span>,<span class="hljs-number">11</span>,<span class="hljs-number">5</span>]<br>i = <span class="hljs-number">0</span><br>res = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> i &lt; len(num):<br>    <span class="hljs-keyword">if</span> res &lt; num[i]:<br>        res = num[i]<br>    i+=<span class="hljs-number">1</span><br>print(res)<br>res = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> val <span class="hljs-keyword">in</span> num: <span class="hljs-comment">#通过for循环进行遍历更加方便</span><br>    <span class="hljs-keyword">if</span> val&gt;res:<br>        res = val<br>print(res)<br></code></pre></td></tr></table></figure>

<h2 id="三、字符相关"><a href="#三、字符相关" class="headerlink" title="三、字符相关"></a>三、字符相关</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-string">"""</span><br><span class="hljs-string">chr(32) 把ASCII码换成字符</span><br><span class="hljs-string">ord("A") 把字符转换成ASCII码</span><br><span class="hljs-string">eval()  把字符串去掉，换成数</span><br><span class="hljs-string">"""</span><br>num = <span class="hljs-number">1</span><br>str1 = <span class="hljs-string">"num+1"</span><br>print(eval(str1)) <span class="hljs-comment">#2</span><br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>day13：os模块、os.path方法、递归函数</title>
    <url>/2020/04/03/day13%EF%BC%9Aos%E6%A8%A1%E5%9D%97%E3%80%81os-path%E6%96%B9%E6%B3%95%E3%80%81%E9%80%92%E5%BD%92%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="一、os模块"><a href="#一、os模块" class="headerlink" title="一、os模块"></a>一、os模块</h2><p>os是系统自带的模块<br><strong>通过os.来进行使用</strong></p>
<h3 id="1、os-name查询系统名"><a href="#1、os-name查询系统名" class="headerlink" title="1、os.name查询系统名"></a>1、os.name查询系统名</h3><a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">res = os.name<br>print(res)<br></code></pre></td></tr></table></figure>
<h3 id="2、os-system调用系统命令"><a href="#2、os-system调用系统命令" class="headerlink" title="2、os.system调用系统命令"></a>2、os.system调用系统命令</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">os.system(<span class="hljs-string">"ipconfig"</span>) <span class="hljs-comment">#使用在cmd中可以使用的命令都可以用</span><br>os.system(<span class="hljs-string">"notepad"</span>)<br></code></pre></td></tr></table></figure>
<h3 id="3、os-getcwd-返回当前工作路径"><a href="#3、os-getcwd-返回当前工作路径" class="headerlink" title="3、os.getcwd()返回当前工作路径"></a>3、os.getcwd()返回当前工作路径</h3><p>绝对路径：从盘服开始的<br>相对路径：相对于当前工作路径写出的路径 ../上一级目录</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">res = os.getcwd()<br>print(res)<br></code></pre></td></tr></table></figure>
<h3 id="4、os-listdir（）-返回指定目录下的所有文件与文件夹"><a href="#4、os-listdir（）-返回指定目录下的所有文件与文件夹" class="headerlink" title="4、os.listdir（） 返回指定目录下的所有文件与文件夹"></a>4、os.listdir（） 返回指定目录下的所有文件与文件夹</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">res = os.listdir(<span class="hljs-string">"G:\project\pyProject\day13"</span>)<br>print(res)<br>res = os.listdir() <span class="hljs-comment">#"../" 则返回上一级目录</span><br>print(res)<br></code></pre></td></tr></table></figure>
<h3 id="5、os-remove-删除指定文件"><a href="#5、os-remove-删除指定文件" class="headerlink" title="5、os.remove 删除指定文件"></a>5、os.remove 删除指定文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">os.remove(<span class="hljs-string">"../txt"</span>)<br></code></pre></td></tr></table></figure>
<h3 id="6、os-mkdir-创建目录-os-makedirs-创建多级目录"><a href="#6、os-mkdir-创建目录-os-makedirs-创建多级目录" class="headerlink" title="6、os.mkdir 创建目录 os.makedirs 创建多级目录"></a>6、os.mkdir 创建目录 os.makedirs 创建多级目录</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">os.mkdir(<span class="hljs-string">"../day14"</span>)<br>os.makedirs(<span class="hljs-string">"../day14/day15/day16"</span>)<br></code></pre></td></tr></table></figure>
<h3 id="7、os-rmdir-删除指定目录"><a href="#7、os-rmdir-删除指定目录" class="headerlink" title="7、os.rmdir 删除指定目录"></a>7、os.rmdir 删除指定目录</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">os.rmdir(<span class="hljs-string">"../day14/day15/day16"</span>) <span class="hljs-comment">#删除了day16</span><br></code></pre></td></tr></table></figure>
<h3 id="8、os-removedirs-删除路劲中所有空文件"><a href="#8、os-removedirs-删除路劲中所有空文件" class="headerlink" title="8、os.removedirs 删除路劲中所有空文件"></a>8、os.removedirs 删除路劲中所有空文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">os.removedirs(<span class="hljs-string">"../day14/day15"</span>)<br><span class="hljs-string">"""</span><br><span class="hljs-string">如果文件夹中有文件不为空，则删除不掉，使用os不行</span><br><span class="hljs-string">使用shutil可以，shutil.rmtree("../day14")可以直接删除day14及其内部的东西</span><br><span class="hljs-string">"""</span><br></code></pre></td></tr></table></figure>
<h3 id="9、os-chdir-更换工作路径"><a href="#9、os-chdir-更换工作路径" class="headerlink" title="9、os.chdir 更换工作路径"></a>9、os.chdir 更换工作路径</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">os.chdir(<span class="hljs-string">"../day13"</span>)<br>res = os.getcwd()<br>print(res)<br></code></pre></td></tr></table></figure>
<h3 id="10、os-rename-更名-注意两个参数都是路径"><a href="#10、os-rename-更名-注意两个参数都是路径" class="headerlink" title="10、os.rename 更名,注意两个参数都是路径"></a>10、os.rename 更名,注意两个参数都是路径</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">os.rename(<span class="hljs-string">"../day10/a.py"</span>,<span class="hljs-string">"../day10/b.py"</span>)<span class="hljs-comment">#如果不写路径就会改到其他文件夹去导致文件位置改变</span><br></code></pre></td></tr></table></figure>
<h3 id="11、-os-walk-遍历目录下所有目录与文件"><a href="#11、-os-walk-遍历目录下所有目录与文件" class="headerlink" title="11、#os.walk 遍历目录下所有目录与文件"></a>11、#os.walk 遍历目录下所有目录与文件</h3><p>第一个参数：返回一个路径<br>第二个参数：这个路径下所有目录<br>第三个参数：这个路径下所有文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">res = os.walk(<span class="hljs-string">"../"</span>)<br><span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> res: <span class="hljs-comment">#res是生成器</span><br>    print(var)<br></code></pre></td></tr></table></figure>

<h2 id="二、os-path方法"><a href="#二、os-path方法" class="headerlink" title="二、os.path方法"></a>二、os.path方法</h2><h3 id="1、os-path-abspath将相对路径转化为绝对路径"><a href="#1、os-path-abspath将相对路径转化为绝对路径" class="headerlink" title="1、os.path.abspath将相对路径转化为绝对路径"></a>1、os.path.abspath将相对路径转化为绝对路径</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#-*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-comment">#os.path.abspath</span><br><span class="hljs-comment">#将相对路径转化为绝对路径</span><br>res = os.path.abspath(<span class="hljs-string">"../day10/b.py"</span>)<span class="hljs-comment">#G:\project\pyProject\day10\b\py</span><br>print(res)<br><span class="hljs-string">"""</span><br><span class="hljs-string">在window中，文件夹使用\来显示，这样可能是转义字符，要用“\\”</span><br><span class="hljs-string">最好写成//</span><br><span class="hljs-string">之后还会遇到这样转换操作 "".replace("\\","/")</span><br><span class="hljs-string">"""</span><br></code></pre></td></tr></table></figure>
<h3 id="2、os-path-split-分割目录和文件名"><a href="#2、os-path-split-分割目录和文件名" class="headerlink" title="2、os.path.split 分割目录和文件名"></a>2、os.path.split 分割目录和文件名</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#os.path.split 分割目录和文件名</span><br>res = os.path.split(<span class="hljs-string">"G:\project\pyProject\day10/b.py"</span>)<br>print(res) <span class="hljs-comment">#('G:\\project\\pyProject\\day10', 'b.py')</span><br></code></pre></td></tr></table></figure>
<h3 id="3、os-path-join-拼接目录和文件名"><a href="#3、os-path-join-拼接目录和文件名" class="headerlink" title="3、os.path.join 拼接目录和文件名"></a>3、os.path.join 拼接目录和文件名</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#os.path.join 拼接目录和文件名</span><br>res = os.path.join(<span class="hljs-string">"G:\\project\\pyProject\\day10"</span>,<span class="hljs-string">"b.py"</span>)<br>print(res) <span class="hljs-comment">#G;\project\pyProject\day10\b.py</span><br></code></pre></td></tr></table></figure>
<h3 id="4、os-path-exists-判断一个路径是否存在"><a href="#4、os-path-exists-判断一个路径是否存在" class="headerlink" title="4、os.path.exists 判断一个路径是否存在"></a>4、os.path.exists 判断一个路径是否存在</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#os.path.exists 判断一个路径是否存在</span><br>res = os.path.exists(<span class="hljs-string">"G:\\project\\pyProject\\day10\\b.py"</span>)<br>print(res)<br></code></pre></td></tr></table></figure>
<h3 id="5、os-path-isfile-判断是否是一个文件"><a href="#5、os-path-isfile-判断是否是一个文件" class="headerlink" title="5、os.path.isfile 判断是否是一个文件"></a>5、os.path.isfile 判断是否是一个文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">res = os.path.isfile(<span class="hljs-string">"G:\project\pyProject\day10\\b.py"</span>)<br>print(res)<br></code></pre></td></tr></table></figure>
<h3 id="6、os-path-isdir-判断是否是一个目录"><a href="#6、os-path-isdir-判断是否是一个目录" class="headerlink" title="6、os.path.isdir 判断是否是一个目录"></a>6、os.path.isdir 判断是否是一个目录</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#os.path.isdir 判断是否是一个目录</span><br>res = os.path.isdir(<span class="hljs-string">"G:/project/pyProject/day10"</span>)<br>print(res)<br></code></pre></td></tr></table></figure>
<h3 id="7、os-path-getsize-获取一个文件大小"><a href="#7、os-path-getsize-获取一个文件大小" class="headerlink" title="7、os.path.getsize 获取一个文件大小"></a>7、os.path.getsize 获取一个文件大小</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#os.path.getsize 获取一个文件大小</span><br>res = os.path.getsize(<span class="hljs-string">"G:\project\pyProject\day10\optionOfDict.py"</span>)<br>print(res) <span class="hljs-comment">#1663字节</span><br></code></pre></td></tr></table></figure>

<h2 id="三、递归函数"><a href="#三、递归函数" class="headerlink" title="三、递归函数"></a>三、递归函数</h2><p>递归，自身调用自身 最重要的是找到一个出口<br>好处：精简程序执行中的重复调用<br>例如：</p>
<h3 id="求阶乘"><a href="#求阶乘" class="headerlink" title="求阶乘"></a>求阶乘</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#求阶层 5*4*3*2*1</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span><span class="hljs-params">(n)</span>:</span><br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> func(n<span class="hljs-number">-1</span>) * n<br><span class="hljs-string">"""</span><br><span class="hljs-string">res = func(4)*5 -&gt; func(3)*4*5 -&gt; func(2)*3*4*5 -&gt; func(1)*2*3*4*5</span><br><span class="hljs-string">res = 1*2*3*4*5</span><br><span class="hljs-string">注意</span><br><span class="hljs-string">每调用一次函数就会增加一层栈帧 没计算一次就会少一层栈帧</span><br><span class="hljs-string">栈帧超过999就会报错</span><br><span class="hljs-string">"""</span><br>res = func(<span class="hljs-number">5</span>) <span class="hljs-comment">#999报错，超出了递归的最大范围</span><br>print(res)<br></code></pre></td></tr></table></figure>
<p>为了防止栈溢出报错，我们需要引用尾递归方法<br>遗憾的是python目前没有对尾递归进行优化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#尾递归</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fact</span><span class="hljs-params">(n)</span>:</span><br>    <span class="hljs-keyword">return</span> fact_iter(n,<span class="hljs-number">1</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fact_iter</span><span class="hljs-params">(num,product)</span>:</span><br>    <span class="hljs-keyword">if</span> num == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> product<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> fact_iter(num<span class="hljs-number">-1</span>,product*num)<br><span class="hljs-comment"># fact_iter(4,5)</span><br><span class="hljs-comment"># fact_iter(3,20)</span><br><span class="hljs-comment"># fact_iter(2.60)</span><br><span class="hljs-comment"># fact_iter(1,120)</span><br><span class="hljs-comment"># product = 120</span><br>print(fact(<span class="hljs-number">5</span>))<br></code></pre></td></tr></table></figure>
<h3 id="计算斐波那契额数列"><a href="#计算斐波那契额数列" class="headerlink" title="计算斐波那契额数列"></a><strong>计算斐波那契额数列</strong></h3><p>1、1、2、3、5、8、13、21、34、、、n</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">funcFBNQ</span><span class="hljs-params">(n)</span>:</span><br>    <span class="hljs-keyword">if</span> n==<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> n==<span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span>  funcFBNQ(n<span class="hljs-number">-2</span>) + funcFBNQ(n<span class="hljs-number">-1</span>)<br><span class="hljs-comment">#这个数为前两个数加前一个数</span><br>print(funcFBNQ(<span class="hljs-number">10</span>))<br></code></pre></td></tr></table></figure>
<h3 id="汉诺塔游戏"><a href="#汉诺塔游戏" class="headerlink" title="汉诺塔游戏"></a><strong>汉诺塔游戏</strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">funcHNT</span><span class="hljs-params">(n,a,b,c)</span>:</span><br>    <span class="hljs-keyword">if</span> n==<span class="hljs-number">1</span>:<br>        print(a,<span class="hljs-string">"--&gt;"</span>,c)<br>    <span class="hljs-keyword">else</span>:<br>        funcHNT(n<span class="hljs-number">-1</span>,a,c,b)<br>        print(a,<span class="hljs-string">"--&gt;"</span>,c)<br>        funcHNT(n<span class="hljs-number">-1</span>,b,a,c)<br>funcHNT(<span class="hljs-number">3</span>,<span class="hljs-string">"a"</span>,<span class="hljs-string">"b"</span>,<span class="hljs-string">"c"</span>)<br></code></pre></td></tr></table></figure>

<h2 id="四、超市小练习"><a href="#四、超市小练习" class="headerlink" title="四、超市小练习"></a>四、超市小练习</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#-*- coding: utf-8 -*-"</span><br>shop_list = [[<span class="hljs-string">"健力宝"</span>,<span class="hljs-number">5.6</span>],[<span class="hljs-string">"加多宝"</span>,<span class="hljs-number">10</span>],[<span class="hljs-string">"QQ星"</span>,<span class="hljs-number">50</span>],[<span class="hljs-string">"动脉"</span>,<span class="hljs-number">100</span>]]<br>buy_list = []<br>prise = <span class="hljs-number">0</span><br>print(<span class="hljs-string">"====================宝昌面包====================="</span>)<br><span class="hljs-keyword">for</span> num,shop <span class="hljs-keyword">in</span> enumerate(shop_list):<br>    print(num,shop[<span class="hljs-number">0</span>],shop[<span class="hljs-number">1</span>])<br>print(<span class="hljs-string">"按0退出系统"</span>)<br>print(<span class="hljs-string">"================================================="</span>)<br><br>salary = int(input(<span class="hljs-string">"请输入你有多少salary："</span>))<br><span class="hljs-keyword">if</span> salary &gt; <span class="hljs-number">0</span>:<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        buyNum = int(input(<span class="hljs-string">"请输入你要买的商品："</span>))<br>        <span class="hljs-keyword">if</span> buyNum == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> salary &gt;= shop_list[buyNum<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>]:<br>            print(<span class="hljs-string">"购买成功"</span>)<br>            salary -= shop_list[buyNum<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>]<br>            prise += shop_list[buyNum<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>]<br>            buy_list.append(shop_list[buyNum<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>])<br>            print(<span class="hljs-string">"感谢购买，消费%s，余额%s"</span> %(shop_list[buyNum<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>],salary))<br>        <span class="hljs-keyword">else</span>:<br>            print(<span class="hljs-string">"无法购买，穷逼"</span>)<br><br><span class="hljs-keyword">else</span>:<br>    print(<span class="hljs-string">"清先充钱"</span>)<br>print(<span class="hljs-string">"购买清单为："</span>)<br><span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> buy_list:<br>    print(var)<br>print(<span class="hljs-string">"感谢使用"</span>)<br></code></pre></td></tr></table></figure>

<h3 id="路径中有中文报错时，在文件头加上即可-coding-utf-8"><a href="#路径中有中文报错时，在文件头加上即可-coding-utf-8" class="headerlink" title="路径中有中文报错时，在文件头加上即可 #-- coding: utf-8 --"></a><strong>路径中有中文报错时，在文件头加上即可 #-<em>- coding: utf-8 -</em>-</strong></h3>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>day14：time模块、异常处理、装饰器、主程序调用</title>
    <url>/2020/04/03/day14%EF%BC%9Atime%E6%A8%A1%E5%9D%97%E3%80%81%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E3%80%81%E8%A3%85%E9%A5%B0%E5%99%A8%E3%80%81%E4%B8%BB%E7%A8%8B%E5%BA%8F%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<h2 id="一、time模块"><a href="#一、time模块" class="headerlink" title="一、time模块"></a>一、time模块</h2><p>import time使用前记得import</p>
<h3 id="1、time-time-时间戳"><a href="#1、time-time-时间戳" class="headerlink" title="1、time.time 时间戳"></a>1、time.time 时间戳</h3><p>从1970年1月1日0.0开始到现在过去了多少秒</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#time.time 时间戳</span><br>res = time.time()<span class="hljs-comment">#从1970年1月1日0.0开始到现在过去了多少秒</span><br>print(<span class="hljs-string">"timeis: %s"</span>%res)<br><span class="hljs-comment">#一般用于计算程序运行时间</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">100000</span>):<br>    <span class="hljs-keyword">pass</span><br>resl = time.time()<br>run = resl - res<br>print(<span class="hljs-string">"runTimeis: %s"</span>%run)<br></code></pre></td></tr></table></figure>
<h3 id="2、time-localtime"><a href="#2、time-localtime" class="headerlink" title="2、time.localtime"></a>2、time.localtime</h3><p>显示时间，有参数时显示1970-1-1零点过去两分钟（东八区会多八小时</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#time.localtime</span><br>res = time.localtime()<br>print(res)<br>res = time.localtime(<span class="hljs-number">120</span>)<span class="hljs-comment">#1970-1-1零点过去两分钟（东八区会多八小时</span><br>print(res)<br></code></pre></td></tr></table></figure>
<h3 id="3、time-gmtime世界协调时，会自动减去8小时"><a href="#3、time-gmtime世界协调时，会自动减去8小时" class="headerlink" title="3、time.gmtime世界协调时，会自动减去8小时"></a>3、time.gmtime世界协调时，会自动减去8小时</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#time.gmtime</span><br>var = time.gmtime() <span class="hljs-comment">#utf世界协调时，会自动减去8小时</span><br>print(var)<br></code></pre></td></tr></table></figure>
<h3 id="4、mktime-结构化一个时间戳"><a href="#4、mktime-结构化一个时间戳" class="headerlink" title="4、mktime 结构化一个时间戳"></a>4、mktime 结构化一个时间戳</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#mktime 结构化一个时间戳</span><br>res = time.mktime(var)<br>print(res)<br></code></pre></td></tr></table></figure>
<h3 id="5、time-ctime-返回英式时间-time-strtime-时间格式化"><a href="#5、time-ctime-返回英式时间-time-strtime-时间格式化" class="headerlink" title="5、time.ctime 返回英式时间 time.strtime 时间格式化"></a>5、time.ctime 返回英式时间 time.strtime 时间格式化</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#time.ctime 返回英式时间 time.strtime 时间格式化</span><br>res = time.ctime()<br>print(res)<br>res = time.strftime(<span class="hljs-string">"%Y-%m-%d %H:%M:%S"</span>,time.localtime())<br>print(res) <span class="hljs-comment">#2020-03-11 10:39:31</span><br></code></pre></td></tr></table></figure>
<h3 id="6、time-strptime-结构化时间"><a href="#6、time-strptime-结构化时间" class="headerlink" title="6、time.strptime 结构化时间"></a>6、time.strptime 结构化时间</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#time.strptime 结构化时间</span><br>var = time.strptime(res,<span class="hljs-string">"%Y-%m-%d %X"</span>)<br>print(var)<br></code></pre></td></tr></table></figure>
<h3 id="7、time-sleep-休眠"><a href="#7、time-sleep-休眠" class="headerlink" title="7、time.sleep 休眠"></a>7、time.sleep 休眠</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#time.sleep</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    print(<span class="hljs-string">"yeyeyeye"</span>)<br>    time.sleep(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure>

<h2 id="二、异常处理"><a href="#二、异常处理" class="headerlink" title="二、异常处理"></a>二、异常处理</h2><p>异常处理<br>try:<br>    可能发生错误的语句<br>except 异常类型:<br>    如果发生异常 那么执行此处的语句</p>
<p>目的：当程序中出现异常后也能继续运行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-string">"""</span><br><span class="hljs-string">异常处理</span><br><span class="hljs-string">try:</span><br><span class="hljs-string">    可能发生错误的语句</span><br><span class="hljs-string">except 异常类型:</span><br><span class="hljs-string">    如果发生异常 那么执行此处的语句</span><br><span class="hljs-string"></span><br><span class="hljs-string">当程序中出现异常后也能继续运行</span><br><span class="hljs-string">"""</span><br><span class="hljs-keyword">try</span>:<br>    print(<span class="hljs-number">1</span>/<span class="hljs-number">0</span>)<br><span class="hljs-keyword">except</span> ZeroDivisionError <span class="hljs-keyword">as</span> e:<br>    print(e)    <span class="hljs-comment">#division by zero</span><br>    print(<span class="hljs-string">"除数不能为0"</span>)<br><br>L = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-keyword">try</span>:<br>    print(L[<span class="hljs-number">6</span>])<br><span class="hljs-keyword">except</span> IndexError <span class="hljs-keyword">as</span> e:<br>    print(e) <span class="hljs-comment">#list index out of range</span><br>print(<span class="hljs-string">"1"</span>+<span class="hljs-string">"1"</span>)<br></code></pre></td></tr></table></figure>
<p>异常处理<br>try:<br>    可能发生错误的语句<br>except 异常类型:<br>    如果发生异常 那么执行此处的语句<br>else:<br>    没发生异常执行的语句</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-string">"""</span><br><span class="hljs-string">异常处理</span><br><span class="hljs-string">try:</span><br><span class="hljs-string">    可能发生错误的语句</span><br><span class="hljs-string">except 异常类型:</span><br><span class="hljs-string">    如果发生异常 那么执行此处的语句</span><br><span class="hljs-string">else:</span><br><span class="hljs-string">    没发生异常执行的语句</span><br><span class="hljs-string">"""</span><br>L = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-keyword">try</span>:<br>    print(L[<span class="hljs-number">2</span>])<br><span class="hljs-keyword">except</span> IndexError <span class="hljs-keyword">as</span> e:<br>    print(e) <span class="hljs-comment">#list index out of range</span><br><span class="hljs-keyword">else</span>:<br>    print(<span class="hljs-string">"写对了。。。"</span>)<br></code></pre></td></tr></table></figure>
<p>try:<br>    可能异常的语句<br>except 异常信息 as e:<br>    异常处理<br>finally:<br>    无论如何都会运行的语句</p>
<p><strong>文件操作中经常使用finally来关闭文件</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-string">"""</span><br><span class="hljs-string">try:</span><br><span class="hljs-string">    可能异常的语句</span><br><span class="hljs-string">except 异常信息 as e:</span><br><span class="hljs-string">    异常处理</span><br><span class="hljs-string">finally:</span><br><span class="hljs-string">    无论如何都会运行的语句</span><br><span class="hljs-string">    </span><br><span class="hljs-string">文件操作中经常使用finally来关闭文件</span><br><span class="hljs-string">"""</span><br>L = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-keyword">try</span>:<br>    print(L[<span class="hljs-number">2</span>])<br><span class="hljs-keyword">except</span> IndexError <span class="hljs-keyword">as</span> e:<br>    print(e) <span class="hljs-comment">#list index out of range</span><br><span class="hljs-keyword">finally</span>:<br>    print(<span class="hljs-string">"我一定运行"</span>)<br></code></pre></td></tr></table></figure>
<p>所有异常都继承于一个BaseException<br>如果在补货时不知道是什么错，可以<br>except BaseException:<br>一般写Exception就可以了</p>
<p><strong>注意：</strong><br>1，如果已经捕获到异常后，就不会再捕获了<br>2，可以捕获嵌套错误</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-string">"""</span><br><span class="hljs-string">所有异常都继承于一个BaseException</span><br><span class="hljs-string">如果在补货时不知道是什么错，可以</span><br><span class="hljs-string">except BaseException:</span><br><span class="hljs-string">一般写Exception就可以了</span><br><span class="hljs-string"></span><br><span class="hljs-string">注意：</span><br><span class="hljs-string">1，如果已经捕获到异常后，就不会再捕获了</span><br><span class="hljs-string">2，可以捕获嵌套错误</span><br><span class="hljs-string">如</span><br><span class="hljs-string">try:</span><br><span class="hljs-string">    main()</span><br><span class="hljs-string">except BaseException:</span><br><span class="hljs-string">    pass</span><br><span class="hljs-string">"""</span><br>L = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-keyword">try</span>:<br>    print(L[<span class="hljs-number">6</span>])<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    print(e) <span class="hljs-comment">#list index out of range</span><br><span class="hljs-keyword">finally</span>:<br>    print(<span class="hljs-string">"我一定运行"</span>)<br></code></pre></td></tr></table></figure>

<h2 id="三、装饰器"><a href="#三、装饰器" class="headerlink" title="三、装饰器"></a>三、装饰器</h2><h3 id="1、装饰器："><a href="#1、装饰器：" class="headerlink" title="1、装饰器："></a>1、装饰器：</h3><p>在不改变原函数的情况下，给这个函数增加一个新功能<br>写接口时会用到<br>实现如下<br><strong>使用装饰器后，调用func() == 调用inner()</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">outer</span><span class="hljs-params">(fn)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inner</span><span class="hljs-params">()</span>:</span><br>        start = time.time()<br>        fn()<br>        run = time.time() - start<br>        print(run)<br>    <span class="hljs-keyword">return</span> inner<br><span class="hljs-meta">@outer #装饰器 是语法糖</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span><span class="hljs-params">()</span>:</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">100000</span>):<br>       <span class="hljs-keyword">pass</span><br>    print(<span class="hljs-string">"hello"</span>)<br>func() <span class="hljs-comment">#使用装饰器后，调用func() == 调用inner()</span><br></code></pre></td></tr></table></figure>
<p>运行原理如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">foo</span><span class="hljs-params">(fn)</span>:</span><br>    start = time.time()<br>    fn()<br>    run = time.time() - start<br>    print(run)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span><span class="hljs-params">()</span>:</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">100000</span>):<br>       <span class="hljs-keyword">pass</span><br>    print(<span class="hljs-string">"hello"</span>)<br>foo(func)<br></code></pre></td></tr></table></figure>
<h3 id="2、当被装饰的函数带参数时"><a href="#2、当被装饰的函数带参数时" class="headerlink" title="2、当被装饰的函数带参数时"></a>2、当被装饰的函数带参数时</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#当被装饰的函数带参数时：</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">outer</span><span class="hljs-params">(fn)</span>:</span>  <span class="hljs-comment">#接收被装饰的函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inner</span><span class="hljs-params">(*args,**kwargs)</span>:</span> <span class="hljs-comment">#接收被装饰的函数的形参</span><br>        start = time.time()<br>        fn(*args,**kwargs)<br>        run = time.time() - start<br>        print(run)<br>    <span class="hljs-keyword">return</span> inner<br><span class="hljs-meta">@outer</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span><span class="hljs-params">(name,user,pwd)</span>:</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">100000</span>):<br>        <span class="hljs-keyword">pass</span><br>    print(user+<span class="hljs-string">"说 得了吧"</span>+name,pwd)<br>func(<span class="hljs-string">"jack"</span>,<span class="hljs-string">"rose"</span>,<span class="hljs-number">1234</span>)<br></code></pre></td></tr></table></figure>

<h3 id="3、当装饰器需要有参数时"><a href="#3、当装饰器需要有参数时" class="headerlink" title="3、当装饰器需要有参数时"></a>3、当装饰器需要有参数时</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#当装饰器需要有参数时</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">outer</span><span class="hljs-params">(num)</span>:</span> <span class="hljs-comment">#接收装饰器的参数</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">middle</span><span class="hljs-params">(fn)</span>:</span> <span class="hljs-comment">#接收被装饰的函数</span><br>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inner</span><span class="hljs-params">(*args,**kwargs)</span>:</span> <span class="hljs-comment">#接收被装饰的函数的形参</span><br>            start = time.time()<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(num):<br>                fn(*args,**kwargs)<br>            run = time.time() - start<br>            print(run)<br>        <span class="hljs-keyword">return</span> inner<br>    <span class="hljs-keyword">return</span> middle<br><span class="hljs-meta">@outer(5)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span><span class="hljs-params">(name,user,pwd)</span>:</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">100000</span>):<br>        <span class="hljs-keyword">pass</span><br>    print(user+<span class="hljs-string">"说 得了吧"</span>+name,pwd)<br>func(<span class="hljs-string">"jack"</span>,<span class="hljs-string">"rose"</span>,<span class="hljs-number">1234</span>)<br></code></pre></td></tr></table></figure>

<h2 id="四、主程序调用"><a href="#四、主程序调用" class="headerlink" title="四、主程序调用"></a>四、主程序调用</h2><p>在py中，可以通过import与from来进行调用，如果想要实现只能在本文件中能实现的功能，不让调用的文件使用的话，可以使用主程序调用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">print(<span class="hljs-string">"1111111111"</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>: <span class="hljs-comment">#加入这句话可以让这下面的语句只能在本文件中调用</span><br>    print(<span class="hljs-string">"hello"</span>)<br></code></pre></td></tr></table></figure>
<p>import与from调用的区别为：from导入要从当前打开的路径开始</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"> <span class="hljs-keyword">import</span> 主程序判断<br><span class="hljs-comment">#输出 1111111111 而没有 hello</span><br></code></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#导入还可以通过from导入，不过要从当前打开的路径开始</span><br><span class="hljs-keyword">from</span> day14.主程序判断 <span class="hljs-keyword">import</span> *<br><span class="hljs-comment"># import *比较少用，会导致明明覆盖问题</span><br></code></pre></td></tr></table></figure>
<p>可以看出，通过if语句判断后，其他文件调用时不会打印hello</p>
<h2 id="五、面试题"><a href="#五、面试题" class="headerlink" title="五、面试题"></a>五、面试题</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#面试题</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span><span class="hljs-params">(x,l=[])</span>:</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(x):<br>        l.append(i * i)<br>    print(id(l))<br>    print(l)<br>f(<span class="hljs-number">2</span>)<br>f(<span class="hljs-number">3</span>,[<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>])<br>f(<span class="hljs-number">3</span>)<br>f(<span class="hljs-number">3</span>,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>])<br><span class="hljs-string">"""</span><br><span class="hljs-string">[0, 1]</span><br><span class="hljs-string">[3, 2, 1, 0, 1, 4]</span><br><span class="hljs-string">[0, 1, 0, 1, 4]</span><br><span class="hljs-string">[1, 2, 0, 1, 4]</span><br><span class="hljs-string">"""</span><br></code></pre></td></tr></table></figure>
<p><strong>可以注意到，当默认参数为空列表的时候，python会开辟一个内存，之后每次当为空列表（即不传值时就会继续使用这个地址(id相同)。所以尽量不要定义空列表的默认参数<br>简单说就是传递一个参数和传递两个参数的内存地址不一样</strong></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>day15：面向对象</title>
    <url>/2020/04/03/day15%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h2 id="一、面向对象"><a href="#一、面向对象" class="headerlink" title="一、面向对象"></a>一、面向对象</h2><p>面向对象，更加注重过程的编程方法<br>面向对象三大特性：封装，继承，多态<br>py中所有的类都继承与一个父类</p>
<a id="more"></a>
<h3 id="1、使用class建立类"><a href="#1、使用class建立类" class="headerlink" title="1、使用class建立类"></a>1、使用class建立类</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#class 类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>:</span><br>   <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure>
<p>给类加入属性：<br>    #属性<br>    name = “js”<br>    age = 18<br>    hair = “black”<br>给类加入方法：<br>   def tell(self)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#class 类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>:</span><br>    <span class="hljs-comment">#属性</span><br>    name = <span class="hljs-string">"js"</span><br>    age = <span class="hljs-number">18</span><br>    hair = <span class="hljs-string">"black"</span><br>    <br>    <span class="hljs-comment">#方法 self：谁调用就是谁</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tell</span><span class="hljs-params">(self)</span>:</span><br>        print(<span class="hljs-string">"my name is %s,age %s,hair is %s"</span>%(self.name,self.age,self.hair))<br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure>
<h3 id="2、实例化对象"><a href="#2、实例化对象" class="headerlink" title="2、实例化对象"></a>2、实例化对象</h3><p>使用 类名() 表示实例化一个对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">p = Person()<br>print(p.name)<br>p.tell()<br></code></pre></td></tr></table></figure>
<h3 id="3、使用构造方法"><a href="#3、使用构造方法" class="headerlink" title="3、使用构造方法"></a>3、使用构造方法</h3><p>构造方法能够在实例化时就初始化实例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#class 类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>:</span><br>    <span class="hljs-comment">#属性</span><br>    name = <span class="hljs-string">"js"</span><br>    age = <span class="hljs-number">18</span><br>    hair = <span class="hljs-string">"black"</span><br>    <span class="hljs-comment">#构造方法：在实例化的时候自动调用</span><br>    <span class="hljs-comment">#如果定义了构造器则没有默认的缺省的构造器了</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,name,age)</span>:</span><br>        self.name = name<br>        self.age = age<br>    <span class="hljs-comment">#方法 self：谁调用就是谁</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tell</span><span class="hljs-params">(self)</span>:</span><br>        print(<span class="hljs-string">"my name is %s,age %s,hair is %s"</span>%(self.name,self.age,self.hair))<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-comment">#类名() 表示实例化一个对象</span><br>p = Person(<span class="hljs-string">"js"</span>,<span class="hljs-number">18</span>)<br>p.tell()<br>p1 = Person(<span class="hljs-string">"LY"</span>,<span class="hljs-number">14</span>)<br>p1.tell()<br></code></pre></td></tr></table></figure>
<h3 id="4、访问原来的属性"><a href="#4、访问原来的属性" class="headerlink" title="4、访问原来的属性"></a>4、访问原来的属性</h3><p>可以通过Person.来进行访问</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#访问原来属性：</span><br>print(Person.name)<br>print(Person.age)<br>Person.tell(p1) <span class="hljs-comment">#self可以传入实例</span><br></code></pre></td></tr></table></figure>
<p>注意：<br>可以看出，类中与实例中属性不同。<br>当调用传入参数中没有的属性时，对调用类属性</p>
<h3 id="5、析构函数"><a href="#5、析构函数" class="headerlink" title="5、析构函数"></a>5、析构函数</h3><p>当实例被回收时自动调用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,name,age)</span>:</span><br>        self.name = name<br>        self.age = age<br>    <span class="hljs-comment">#析构函数，当实例被回收时自动调用</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__del__</span><span class="hljs-params">(self)</span>:</span><br>        print(<span class="hljs-string">"析构函数调用"</span>)<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tell</span><span class="hljs-params">(self)</span>:</span><br>        print(<span class="hljs-string">"mtname is %s,age %s"</span>%(self.name,self.age))<br><br>p = Person(<span class="hljs-string">"sj"</span>,<span class="hljs-number">18</span>)<br>p.tell()<br><span class="hljs-string">"""</span><br><span class="hljs-string">当程序结束时，析构函数就会调用</span><br><span class="hljs-string">"""</span><br></code></pre></td></tr></table></figure>

<h3 id="6、使用私有属性、私有方法"><a href="#6、使用私有属性、私有方法" class="headerlink" title="6、使用私有属性、私有方法"></a>6、使用私有属性、私有方法</h3><p>通过__ 就可以设置私有属性和私有方法：例如<br>__name<br>def __setName(self,name):</p>
<p>设置了私有之后，只能通过公有来调用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,name,age)</span>:</span><br>        <span class="hljs-comment">#加两个下划线表示私有属性，不能直接被外部访问</span><br>        self.__name = name<br>        self.__age = age<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getAge</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">return</span>  self.__age<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setAge</span><span class="hljs-params">(self,age)</span>:</span><br>        self.__age = age<br>    <span class="hljs-comment">#可以设置私有方法，同理，只能通过公用方法调用</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__setName</span><span class="hljs-params">(self,name)</span>:</span><br>        self.__name = name<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setNamePass</span><span class="hljs-params">(self)</span>:</span><br>        pwd = <span class="hljs-number">123</span><br>        res = int(input(<span class="hljs-string">"请输入密码："</span>))<br>        <span class="hljs-keyword">if</span> res == pwd:<br>            self.__setName(<span class="hljs-string">"haha修改成功"</span>)<br>        <span class="hljs-keyword">else</span>:<br>            print(<span class="hljs-string">"pass word error"</span>)<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tell</span><span class="hljs-params">(self)</span>:</span><br>        print(<span class="hljs-string">"mtname is %s,age %s"</span>%(self.__name,self.__age))<br><br>p = Person(<span class="hljs-string">"sj"</span>,<span class="hljs-number">18</span>)<br>p.tell()<br>print(p.getAge())<br>p.setAge(<span class="hljs-number">10</span>)<br>p.tell() <span class="hljs-comment">#可以看出修改成功</span><br><br>p.setNamePass()<br>p.tell()<br></code></pre></td></tr></table></figure>

<h3 id="7、继承、重写、拓展"><a href="#7、继承、重写、拓展" class="headerlink" title="7、继承、重写、拓展"></a>7、继承、重写、拓展</h3><p>继承，括号内填写父类,这样就能够拥有父类的方法属性，减少重复工作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#继承，括号内填写父类,如</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MtList</span><span class="hljs-params">(list)</span>:</span><br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure>
<p>在继承中，经常引用其他文件中的类<br>通过 if <strong>name</strong> == ‘<strong>main</strong>‘ 可以只导入功能，在继承时十分常用</p>
<p>一个小练习如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> day15.面向对象 <span class="hljs-keyword">import</span> Person<br><span class="hljs-comment">#通过 if __name__ == '__main__' 可以只导入功能，</span><br>p = Person(<span class="hljs-string">"LS"</span>,<span class="hljs-number">18</span>)<br>p.tell()<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Basterd</span><span class="hljs-params">(Person)</span>:</span><br>    <span class="hljs-comment">#方法拓展，在保留父类方法时拓展</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,name,age,badhobby)</span>:</span><br>        super().__init__(name,age)<br>        self.badhobby = badhobby<br>    <span class="hljs-comment">#方法重写，完全覆盖父类方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tell</span><span class="hljs-params">(self)</span>:</span><br>        print(<span class="hljs-string">"我叫%s，age %s，我爱%s"</span>%(self.name,self.age,self.badhobby))<br><span class="hljs-string">"""</span><br><span class="hljs-string">建立一个坏弹类，</span><br><span class="hljs-string">坏蛋是一个人，</span><br><span class="hljs-string">坏蛋有他特殊的属性与发方法</span><br><span class="hljs-string">"""</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br>    p = Basterd(<span class="hljs-string">"ly"</span>,<span class="hljs-number">18</span>,<span class="hljs-string">"打架"</span>)<br>    p.tell()<br></code></pre></td></tr></table></figure>
<p>其中，<strong>init</strong>()用到了拓展，<br>tell()则是直接覆盖了</p>
<h3 id="8、小练习"><a href="#8、小练习" class="headerlink" title="8、小练习"></a>8、小练习</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Clip</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,bullet)</span>:</span><br>        self.bullet = bullet<br></code></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Gun</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,clip)</span>:</span><br>        self.clip = clip<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fier</span><span class="hljs-params">(self,n)</span>:</span><br>        <span class="hljs-keyword">if</span> self.clip.bullet &gt; n:<br>            self.clip.bullet -= n<br>            print(<span class="hljs-string">"开枪；还剩%s发子弹"</span>%(self.clip.bullet))<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n):<br>                print(<span class="hljs-string">"tu~"</span>)<br>        <span class="hljs-keyword">else</span>:<br>            print(<span class="hljs-string">"子弹不够啦，上子弹啊！"</span>)<br></code></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,gun)</span>:</span><br>        self.gun = gun<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fill</span><span class="hljs-params">(self,n)</span>:</span><br>        self.gun.clip.bullet += n<br>        print(<span class="hljs-string">"上弹成功，还有%s发"</span>%(self.gun.clip.bullet))<br></code></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> day15.clip <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> day15.gun <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> day15.Person <span class="hljs-keyword">import</span> *<br><br>c = Clip(<span class="hljs-number">10</span>)<br>g = Gun(c)<br>p = Person(g)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">4</span>):<br>    p.gun.fier(<span class="hljs-number">3</span>)<br>p.fill(<span class="hljs-number">5</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">4</span>):<br>    p.gun.fier(<span class="hljs-number">3</span>)<br><span class="hljs-string">"""</span><br><span class="hljs-string">运行效果</span><br><span class="hljs-string">开枪；还剩7发子弹</span><br><span class="hljs-string">tu~</span><br><span class="hljs-string">tu~</span><br><span class="hljs-string">tu~</span><br><span class="hljs-string">开枪；还剩4发子弹</span><br><span class="hljs-string">tu~</span><br><span class="hljs-string">tu~</span><br><span class="hljs-string">tu~</span><br><span class="hljs-string">开枪；还剩1发子弹</span><br><span class="hljs-string">"""</span><br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>day17：高阶函数：map、reduce、sorted、fliter、lambda</title>
    <url>/2020/04/03/day17%EF%BC%9A%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%EF%BC%9Amap%E3%80%81reduce%E3%80%81sorted%E3%80%81fliter%E3%80%81lambda/</url>
    <content><![CDATA[<h2 id="一、map"><a href="#一、map" class="headerlink" title="一、map"></a>一、map</h2><p>map(fn,lsd)<br>fn: 可以是自己写的，也可以是系统自带的<br>lsd:  一个序列<br>功能：把lsd中每一个元素分别作用在fn上</p>
<p>例如：字符串列表变为int列表</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-string">"""</span><br><span class="hljs-string">map(fn,lsd)</span><br><span class="hljs-string">fn: 可以是自己写的，也可以是系统自带的</span><br><span class="hljs-string">lsd:  一个序列</span><br><span class="hljs-string">功能：把lsd中每一个元素分别作用在fn上</span><br><span class="hljs-string">"""</span><br><span class="hljs-comment">#比如变为int列表</span><br>L = [<span class="hljs-string">"1"</span>,<span class="hljs-string">"2"</span>,<span class="hljs-string">"3"</span>,<span class="hljs-string">"4"</span>,<span class="hljs-string">"5"</span>]<br>L1 = []<br><span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> L:<br>    L1.append(int(var))<br>print(L1)<br><br>res = list(map(int,L)) <span class="hljs-comment">#分配进行处理，即把L都用int转换成int型</span><br>print(res)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">convert</span><span class="hljs-params">(key)</span>:</span><br>    dict1 = &#123;<span class="hljs-string">"1"</span>:<span class="hljs-number">1</span>,<span class="hljs-string">"2"</span>:<span class="hljs-number">2</span>,<span class="hljs-string">"3"</span>:<span class="hljs-number">3</span>,<span class="hljs-string">"4"</span>:<span class="hljs-number">4</span>,<span class="hljs-string">"5"</span>:<span class="hljs-number">5</span>,<span class="hljs-string">"6"</span>:<span class="hljs-number">6</span>&#125;<br>    <span class="hljs-keyword">return</span> dict1[key]<br>res = list(map(convert,L))<br>print(res)<br></code></pre></td></tr></table></figure>

<h2 id="二、reduce"><a href="#二、reduce" class="headerlink" title="二、reduce"></a>二、reduce</h2><p>reduce(fn,lsd)<br>fn:     一个函数<br>lsd:    一个序列<br>功能：把lsd中的每一个元素一次作用在fn上，fn必须有两个参数<br>执行流程：lsd的前两个元素作用在fn上，然后得到一个结果，得到的结果在和第三个数组成两个数作用在fn上，以此类推直到lsd中的<br>所有元素计算完毕</p>
<p>例如：把列表reduce成数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-string">"""</span><br><span class="hljs-string">reduce(fn,lsd)</span><br><span class="hljs-string">fn:     一个函数</span><br><span class="hljs-string">lsd:    一个序列</span><br><span class="hljs-string">功能：把lsd中的每一个元素一次作用在fn上，fn必须有两个参数</span><br><span class="hljs-string">执行流程：lsd的前两个元素作用在fn上，然后得到一个结果，得到的结果在和第三个数组成两个数作用在fn上，以此类推直到lsd中的</span><br><span class="hljs-string">所有元素计算完毕</span><br><span class="hljs-string">"""</span><br><br><span class="hljs-comment"># 例如把列表reduce成数</span><br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><br>L = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span><span class="hljs-params">(a, b)</span>:</span><br>    <span class="hljs-keyword">return</span> a * <span class="hljs-number">10</span> + b<br><br><br>res = reduce(func,L)<br>print(res,type(res))<br><br><br>L = [<span class="hljs-string">"1"</span>,<span class="hljs-string">"ad3"</span>,<span class="hljs-string">"c2"</span>,<span class="hljs-string">"h2o"</span>,[<span class="hljs-string">"co2"</span>,<span class="hljs-string">"k2mo4"</span>,<span class="hljs-string">"na2"</span>],<span class="hljs-number">34</span>]<br><span class="hljs-comment">#将数字放入L1中</span><br>L1=[]<br><span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> L:<br>    <span class="hljs-comment">#判断是否是字符串</span><br>    <span class="hljs-keyword">if</span> isinstance(var,str):<br>        <span class="hljs-keyword">for</span> val <span class="hljs-keyword">in</span> var:<br>            <span class="hljs-keyword">if</span> val.isdigit():<br>                L1.append(val)<br>    <span class="hljs-comment">#判断是否是列表</span><br>    <span class="hljs-keyword">elif</span> isinstance(var,list):<br>        <span class="hljs-comment">#遍历二级列表</span><br>        <span class="hljs-keyword">for</span> val <span class="hljs-keyword">in</span> var:<br>            <span class="hljs-keyword">if</span> isinstance(val,str):<br>                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> val:<br>                    <span class="hljs-keyword">if</span> i.isdigit():<br>                        L1.append(i)<br>    <span class="hljs-comment">#如果是数字直接添加</span><br>    <span class="hljs-keyword">else</span>:<br>        L1.append(var)<br>print(L1)<br><span class="hljs-comment">#然后将L1转换成一个整数(map和reduce一般配合使用</span><br>res = list(map(int,L1))<br>print(reduce(func,res))<br></code></pre></td></tr></table></figure>

<h2 id="三、sorted"><a href="#三、sorted" class="headerlink" title="三、sorted"></a>三、sorted</h2><p>用于排序<br>sort和sorted的区别<br>sort是无返回值的<br>sorted是有返回值的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-string">"""</span><br><span class="hljs-string">sort和sorted的区别</span><br><span class="hljs-string">sort是无返回值的</span><br><span class="hljs-string">sorted是有返回值的</span><br><span class="hljs-string"></span><br><span class="hljs-string">"""</span><br>L = [<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">-856</span>,<span class="hljs-number">7645</span>,<span class="hljs-number">-32</span>,<span class="hljs-number">1</span>]<br><span class="hljs-comment"># L.sort()</span><br><span class="hljs-comment"># print(L)</span><br><br>res = sorted(L)<br>print(res)<br><br><span class="hljs-comment">#sort和sorted都可以加key参数，采用指定的方式进行排序</span><br>res = sorted(L,key=abs)<br>print(res)<br></code></pre></td></tr></table></figure>

<h2 id="四、filter"><a href="#四、filter" class="headerlink" title="四、filter"></a>四、filter</h2><p>filter(fn,lsd)<br>功能：过滤<br>执行流程：lsd中的每一个元素一次作用在fn上，如果返回True;那就保留该数据，如果返回Flase，<br>则过滤掉这个数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-string">"""</span><br><span class="hljs-string">filter(fn,lsd)</span><br><span class="hljs-string">功能：过滤</span><br><span class="hljs-string">执行流程：lsd中的每一个元素一次作用在fn上，如果返回True;那就保留该数据，如果返回Flase，</span><br><span class="hljs-string">则过滤掉这个数据</span><br><span class="hljs-string">"""</span><br>lsd = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>]<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span><span class="hljs-params">(key)</span>:</span><br>    <span class="hljs-keyword">return</span> key%<span class="hljs-number">2</span> == <span class="hljs-number">0</span><br>res = filter(func,lsd)<br>print(res) <span class="hljs-comment">#&lt;filter object at 0x00000180BA325780&gt;</span><br>print(list(res)) <span class="hljs-comment">#序列化</span><br><br>res = list(filter(func,lsd)) <span class="hljs-comment">#直接在过滤后转换</span><br>print(res)<br></code></pre></td></tr></table></figure>

<h2 id="五、lambda"><a href="#五、lambda" class="headerlink" title="五、lambda"></a>五、lambda</h2><p>lambda 表示式是一种简洁格式的函数 这个表达式不是正常的函数结构，而是属于表达式的类型<br>lambda 参数1，参数2：函数功能代码</p>
<p>一般只会用于实现简单功能</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-string">"""</span><br><span class="hljs-string">lambda 表示式是一种简洁格式的函数 这个表达式不是正常的函数结构，而是属于表达式的类型</span><br><span class="hljs-string">lambda 参数1，参数2：函数功能代码</span><br><span class="hljs-string"></span><br><span class="hljs-string">一般只会用于实现简单功能</span><br><span class="hljs-string">"""</span><br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><br>res = <span class="hljs-keyword">lambda</span> x,y:x+y<br>print(res(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)) <span class="hljs-comment">#类似于宏定义</span><br><br>res = <span class="hljs-keyword">lambda</span> sex:<span class="hljs-string">"胡子"</span> <span class="hljs-keyword">if</span> sex == <span class="hljs-string">"man"</span> <span class="hljs-keyword">else</span> <span class="hljs-string">"mei胡子"</span><br>print(res(<span class="hljs-string">"man"</span>))<br></code></pre></td></tr></table></figure>

<h2 id="六、整合练习"><a href="#六、整合练习" class="headerlink" title="六、整合练习"></a>六、整合练习</h2><p>求lsd列表当中偶数组成的最大整数<br>以及奇数组成的最小整数</p>
<p>最后，尝试一句话实现功能</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">lsd = [<span class="hljs-string">"1"</span>,<span class="hljs-string">"2"</span>,<span class="hljs-string">"3"</span>,<span class="hljs-string">"4"</span>,<span class="hljs-string">"7"</span>,<span class="hljs-string">"8"</span>,<span class="hljs-string">"9"</span>]<br><span class="hljs-comment">#求偶数的最大整数</span><br>res = map(int,lsd) <span class="hljs-comment">#转换为int</span><br>var = filter(<span class="hljs-keyword">lambda</span> x:<span class="hljs-literal">True</span> <span class="hljs-keyword">if</span> x%<span class="hljs-number">2</span>==<span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-literal">False</span>,res)<br>val = sorted(var, reverse=<span class="hljs-literal">True</span>)<br><span class="hljs-comment">#对数据整合</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span><span class="hljs-params">(a,b)</span>:</span><br>    <span class="hljs-keyword">return</span> a*<span class="hljs-number">10</span> + b<br>res1 = reduce(func,val)<br>print(res1)<br><br><span class="hljs-comment">#求奇数的最小整数</span><br>res = map(int,lsd) <span class="hljs-comment">#转换为int</span><br>var = filter(<span class="hljs-keyword">lambda</span> x:<span class="hljs-literal">True</span> <span class="hljs-keyword">if</span> x%<span class="hljs-number">2</span>==<span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-literal">False</span>,res)<br>val = sorted(var,reverse=<span class="hljs-literal">False</span>)<br>res2 = reduce(func,val)<br>print(res2)<br><br><span class="hljs-comment">#求奇数的最小整数</span><br>print(reduce(<span class="hljs-keyword">lambda</span> x,y:x*<span class="hljs-number">10</span>+y,sorted(filter(<span class="hljs-keyword">lambda</span> x:<span class="hljs-literal">True</span> <span class="hljs-keyword">if</span> x%<span class="hljs-number">2</span>==<span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-literal">False</span>,map(int,lsd)),reverse=<span class="hljs-literal">False</span>)))<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>day16：army小练习、@property、动态添加属性和方法、限制添加属性、__repr__和__str__、类方法和静态方法</title>
    <url>/2020/04/03/day16%EF%BC%9Aarmy%E5%B0%8F%E7%BB%83%E4%B9%A0%E3%80%81-property%E3%80%81%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95%E3%80%81%E9%99%90%E5%88%B6%E6%B7%BB%E5%8A%A0%E5%B1%9E%E6%80%A7%E3%80%81-repr-%E5%92%8C-str-%E3%80%81%E7%B1%BB%E6%96%B9%E6%B3%95%E5%92%8C%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="一、army小练习"><a href="#一、army小练习" class="headerlink" title="一、army小练习"></a>一、army小练习</h2><p>使用面向对象，实现army练习<br>创建一支军队：骑兵、法师、弓箭手<br>将军可以下达命令指挥军队</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-string">"""</span><br><span class="hljs-string">创建一支军队：骑兵、法师、弓箭手</span><br><span class="hljs-string">将军可以指挥军队下达命令</span><br><span class="hljs-string">"""</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cavalry</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">attack</span><span class="hljs-params">(self)</span>:</span><br>        print(<span class="hljs-string">"My iron rides on you!"</span>)<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">defend</span><span class="hljs-params">(self)</span>:</span><br>        print(<span class="hljs-string">"cavalry defend!"</span>)<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Archer</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">attack</span><span class="hljs-params">(self)</span>:</span><br>        print(<span class="hljs-string">"My arrow is extremely accurate!"</span>)<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">defend</span><span class="hljs-params">(self)</span>:</span><br>        print(<span class="hljs-string">"archer defend!"</span>)<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Magician</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">attack</span><span class="hljs-params">(self)</span>:</span><br>        print(<span class="hljs-string">"My magic is infinite!"</span>)<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">defend</span><span class="hljs-params">(self)</span>:</span><br>        print(<span class="hljs-string">"magician defend!"</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br>    army = []<br>    c = Cavalry()<br>    m = Magician()<br>    a = Archer()<br><br>    army.append(c)<br>    army.append(a)<br>    army.append(m)<br><br>    order = input(<span class="hljs-string">"please order the army:"</span>)<br>    <span class="hljs-keyword">if</span> order == <span class="hljs-string">"attack"</span>:<br>        <span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> army:<br>            var.attack()<br>    <span class="hljs-keyword">elif</span> order == <span class="hljs-string">"defend"</span>:<br>        <span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> army:<br>            var.defend()<br>    <span class="hljs-keyword">elif</span> order == <span class="hljs-string">"flatten it"</span>:<br>        <span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> army:<br>            <span class="hljs-keyword">if</span> isinstance(var,Cavalry):<br>                var.attack()<br>            <span class="hljs-keyword">else</span>:<br>                var.defend()<br>    <span class="hljs-keyword">elif</span> order == <span class="hljs-string">"shoot it"</span>:<br>        <span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> army:<br>            <span class="hljs-keyword">if</span> isinstance(var,Archer):<br>                var.attack()<br>            <span class="hljs-keyword">else</span>:<br>                var.defend()<br>    <span class="hljs-keyword">elif</span> order == <span class="hljs-string">"magic it"</span>:<br>        <span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> army:<br>            <span class="hljs-keyword">if</span> isinstance(var,Magician):<br>                var.attack()<br>            <span class="hljs-keyword">else</span>:<br>                var.defend()<br>    <span class="hljs-keyword">else</span>:<br>        print(<span class="hljs-string">"The wind is too hard to hear the order!"</span>)<br></code></pre></td></tr></table></figure>
<p><strong>运行效果</strong><br>please order the army:magic it<br>cavalry defend!<br>archer defend!<br>My magic is infinite!</p>
<h2 id="二、-property"><a href="#二、-property" class="headerlink" title="二、@property"></a>二、@property</h2><p>把一个方法当做属性来用<br>例如在方法前加上@property<br>会导致私有属性去私有化</p>
<p>使用@age.setter注意，三个age，必须是相同的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#把一个方法当做属性来用</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,n,age)</span>:</span><br>        self.name = n<br>        self.__age = age<br><span class="hljs-meta">    @property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">age</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">return</span> self.__age<br><span class="hljs-meta">    @age.setter #注意，三个age，必须是相同的</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">age</span><span class="hljs-params">(self,n)</span>:</span><br>        self.__age = n<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br>    p = Person(<span class="hljs-string">"小红"</span>,<span class="hljs-number">18</span>)<br>    print(p.name)<br>    <span class="hljs-comment">#通过property可以像属性一样使用</span><br>    p.age = <span class="hljs-number">21</span><br>    print(p.age) <span class="hljs-comment">#导致私有属性去私有化</span><br></code></pre></td></tr></table></figure>

<h2 id="三、动态添加属性和方法"><a href="#三、动态添加属性和方法" class="headerlink" title="三、动态添加属性和方法"></a>三、动态添加属性和方法</h2><p><strong>动态添加属性</strong>：类内没有的属性，可以直接添加</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#动态添加属性</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>:</span><br>    <span class="hljs-keyword">pass</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tell</span><span class="hljs-params">(self)</span>:</span><br>    print(<span class="hljs-string">"my name is %s"</span>%self.name)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br>    p = Person()<br>    <span class="hljs-comment">#动态添加一个属性给当前实例,仅限于当前实例访问，其他实例不可以访问</span><br>    p.name = <span class="hljs-string">"js"</span><br>    print(p.name)<br></code></pre></td></tr></table></figure>
<p><strong>动态添加方法</strong>：<br>需要引用from types import MethodType<br>可以将一个类外的函数绑定给对象<br>tell是要绑定的函数，p是函数绑定到被指定的实例<br>    p.speak = MethodType(tell,p)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#可以把一个方法动态的添加</span><br><span class="hljs-keyword">from</span> types <span class="hljs-keyword">import</span> MethodType<br><br><span class="hljs-comment">#动态添加属性</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>:</span><br>    <span class="hljs-keyword">pass</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tell</span><span class="hljs-params">(self)</span>:</span><br>    print(<span class="hljs-string">"my name is %s"</span>%self.name)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br>    p = Person()<br>    <span class="hljs-comment">#动态添加一个属性给当前实例,仅限于当前实例访问，其他实例不可以访问</span><br>    p.name = <span class="hljs-string">"js"</span><br>    print(p.name)<br><br>    <span class="hljs-comment">#动态添加方法</span><br>    <span class="hljs-comment">#tell是要绑定的函数，p是函数绑定到被指定的实例</span><br>    p.speak = MethodType(tell,p)<br>    p.speak()<br></code></pre></td></tr></table></figure>

<h2 id="四、限制添加属性"><a href="#四、限制添加属性" class="headerlink" title="四、限制添加属性"></a>四、限制添加属性</h2><p>在类内添加<strong>slots</strong> = (“name”,)<br>可以现在添加属性，注意这里是元祖。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>:</span><br>    <span class="hljs-comment">#限制添加属性</span><br>    __slots__ = (<span class="hljs-string">"name"</span>,) <span class="hljs-comment">#注意这里是元祖，就算只有一个元素也必须要添加逗号</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,name,age)</span>:</span><br>        self.name = name<br>        self.age = age<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br>    p = Person(<span class="hljs-string">"js"</span>,<span class="hljs-number">11</span>) <span class="hljs-comment">#AttributeError: 'Person' object has no attribute 'age'</span><br></code></pre></td></tr></table></figure>

<h2 id="五、repr和str"><a href="#五、repr和str" class="headerlink" title="五、repr和str"></a>五、<strong>repr</strong>和<strong>str</strong></h2><p>当调用print打印实例的时候，才会调用str<br>而repr在文件交互模式下输入实例，按下回车的时候会自动调用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,name = <span class="hljs-string">"jack"</span>,age = <span class="hljs-number">19</span>)</span>:</span><br>        self.name = name<br>        self.age = age<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestStr</span><span class="hljs-params">(Test)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__repr__</span><span class="hljs-params">(self)</span>:</span><span class="hljs-comment">#当str不存在的时候，repr=str</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"__repr__: %s,%s"</span>%(self.name,self.age)<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"__str__: %s,%s"</span>%(self.name,self.age)<br><br>t = TestStr()<br>print(t.name)<br>print(t) <span class="hljs-comment">#当调用print打印实例的时候，才会调用str</span><br><br><span class="hljs-comment">#而repr在文件交互模式下输入实例，按下回车的时候会自动调用</span><br></code></pre></td></tr></table></figure>

<h2 id="六、类方法和静态方法"><a href="#六、类方法和静态方法" class="headerlink" title="六、类方法和静态方法"></a>六、类方法和静态方法</h2><p>它们都可以直接通过类名来调用<br><strong>在写接口的时候，会使用这样的方法，这样就不用一直创建实例来调用le</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>:</span><br>    <span class="hljs-comment">#类属性</span><br>    name = <span class="hljs-string">"jeck"</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,name)</span>:</span><br>        self.name = name<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">tell</span><span class="hljs-params">(self)</span>:</span> <span class="hljs-comment">#self 接收的是rose</span><br>        print(self.name)<br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">say</span><span class="hljs-params">(cls)</span>:</span>   <span class="hljs-comment">#cls接收类，打印类属性</span><br>        print(cls.name)<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">talk</span><span class="hljs-params">()</span>:</span>     <span class="hljs-comment">#</span><br>        print(Person.name)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br>    p = Person(<span class="hljs-string">"rose"</span>)<br>    p.tell()    <span class="hljs-comment">#rose</span><br>    p.say()     <span class="hljs-comment">#jeck</span><br>    p.talk()    <span class="hljs-comment">#jeck</span><br><br>    Person.tell(p)  <span class="hljs-comment">#rose 这种写法不实用</span><br>    Person.say()    <span class="hljs-comment">#jeck</span><br>    Person.talk()   <span class="hljs-comment">#jeck</span><br></code></pre></td></tr></table></figure>
<p><strong>练习</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Date</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,year = <span class="hljs-number">0</span>,month = <span class="hljs-number">0</span>,day = <span class="hljs-number">0</span>)</span>:</span><br>        self.year = year<br>        self.month = month<br>        self.day = day<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(self)</span>:</span><br>        print(self.year,self.month,self.day)<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_date</span><span class="hljs-params">(string_date)</span>:</span><br>        year, month, day = string_date.split(<span class="hljs-string">"-"</span>)<br>        date1 = Date(year,month,day) <span class="hljs-comment">#这里必须为类名，如果类名变化，也需要变化</span><br>        <span class="hljs-keyword">return</span> date1<br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_dateL</span><span class="hljs-params">(cls,string_date)</span>:</span><br>        year, month, day = string_date.split(<span class="hljs-string">"-"</span>)<br>        date1 = cls(year, month, day) <span class="hljs-comment">#这里为cls而不是类名，可以随意修改类名</span><br>        <span class="hljs-keyword">return</span> date1<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br><br>    <span class="hljs-string">"""</span><br><span class="hljs-string">    假设用户输入2020-3-13</span><br><span class="hljs-string">    """</span><br>    t = Date.get_date(<span class="hljs-string">"2020-3-13"</span>)<br>    t.show()<br>    t = Date.get_dateL(<span class="hljs-string">"2020-3-13"</span>)<br>    t.show()<br></code></pre></td></tr></table></figure>
<p>注意：当需要对输入进行分割用split</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>day2：基本数据类型列表、集合、元组、字典</title>
    <url>/2020/04/03/day2%EF%BC%9A%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%88%97%E8%A1%A8%E3%80%81%E9%9B%86%E5%90%88%E3%80%81%E5%85%83%E7%BB%84%E3%80%81%E5%AD%97%E5%85%B8/</url>
    <content><![CDATA[<h2 id="一、列表"><a href="#一、列表" class="headerlink" title="一、列表"></a>一、列表</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#列表， 使用标识符[]，每一个元素使用逗号区分，可以随时修改</span><br><span class="hljs-comment">#列表可以嵌套列表</span><br><span class="hljs-comment">#对应于数组使用，功能比数组强大</span><br>list1 = <span class="hljs-string">'[1,2,3,"a","b",(1,2),[1,2,3]]'</span><br>print(list1,type(list1))<br><br><span class="hljs-comment">#索引 0 1 2 3 4 5  （正向）index</span><br><span class="hljs-comment">#    -5 -4 -3 -2 -1（反向）</span><br><br>list2 = [<span class="hljs-string">"a"</span>,<span class="hljs-string">"b"</span>,<span class="hljs-string">"c"</span>,<span class="hljs-string">"d"</span>]<br>ver = list2[<span class="hljs-number">1</span>]<br>print(ver,type(ver))<br><br>list3 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,[<span class="hljs-string">"a"</span>,<span class="hljs-string">"b"</span>,<span class="hljs-string">"c"</span>,<span class="hljs-string">"d"</span>]]<br>ver = list3[<span class="hljs-number">3</span>][<span class="hljs-number">1</span>]<br>print(ver,type(ver))<br><br><br>list4 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,[<span class="hljs-string">"a"</span>,<span class="hljs-string">"b"</span>,<span class="hljs-string">"c"</span>,<span class="hljs-string">"d"</span>],<span class="hljs-literal">True</span>]<br>ver = list4[<span class="hljs-number">4</span>] = <span class="hljs-literal">False</span><br>print(ver)<br>print(list4)<br></code></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="二、元组"><a href="#二、元组" class="headerlink" title="二、元组"></a>二、元组</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#元组：是一些列元素的组合，用逗号分割，标识符是，逗号，并且定义之后元素不能再进行修改</span><br><span class="hljs-comment">#其他用法与列表类似</span><br>tuple1 = (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,[<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>])<br>print(tuple1)<br>print(tuple1[<span class="hljs-number">1</span>])<br>tuple1[<span class="hljs-number">5</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">10</span>     <span class="hljs-comment">#元组不能修改，但是元组内的列表可以修改</span><br>print(tuple1)<br><span class="hljs-comment">#注意：</span><br>b=(<span class="hljs-number">1</span>)<br>print(type(b))  <span class="hljs-comment">#int型，没有标识符时就不是元组</span><br><br>c=(<span class="hljs-number">1</span>,)<br>print(type(c))<br></code></pre></td></tr></table></figure>
<h2 id="三、集合"><a href="#三、集合" class="headerlink" title="三、集合"></a>三、集合</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#一种特定数据的组合，所有元素不能重复，不能修改</span><br><br>set1=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>&#125;<br>print(set1)     <span class="hljs-comment">#&#123;1, 2, 3, 4&#125;   集合会自动去重复</span><br><br><span class="hljs-comment">#多用于计算补集    交集  并集  子集  超集。。。</span><br>四、字典<br><br><span class="hljs-comment">#有映射关系的无序的组合，可以修改</span><br>dict1 = &#123;<span class="hljs-string">"啊"</span>:<span class="hljs-string">"one"</span> , <span class="hljs-string">"我开炮"</span>:<span class="hljs-string">"连长"</span> , <span class="hljs-string">"花和尚"</span>:<span class="hljs-string">"鲁智深"</span>&#125;<br>print(dict1)<br>ver=dict1[<span class="hljs-string">"啊"</span>]<br>print(ver,type(ver))<br><br><span class="hljs-comment">#冒号前面的是键值，键值是唯一的，并且不可以修改，</span><br><span class="hljs-comment">#冒号后面的才是可以修改的</span><br>dict1[<span class="hljs-string">"啊"</span>]=<span class="hljs-string">"gggg"</span><br>print(dict1)<br><br><span class="hljs-comment">#字典嵌套只能使用在，冒号后面上，键值必须唯一</span><br>dict2 = &#123;<span class="hljs-string">"四大名著"</span>:&#123;<span class="hljs-string">"西游记"</span>:<span class="hljs-string">"吴承恩"</span>,<span class="hljs-string">"水浒传"</span>:<span class="hljs-string">"罗贯中"</span>,<span class="hljs-string">"红楼梦"</span>:<span class="hljs-string">"曹雪芹"</span>&#125;&#125;<br>print(dict2[<span class="hljs-string">"四大名著"</span>])<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>day1：python的常用命名方式、语句分类、变量使用</title>
    <url>/2020/04/03/day1%EF%BC%9Apython%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E5%90%8D%E6%96%B9%E5%BC%8F%E3%80%81%E8%AF%AD%E5%8F%A5%E5%88%86%E7%B1%BB%E3%80%81%E5%8F%98%E9%87%8F%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="一、python文件命名方式"><a href="#一、python文件命名方式" class="headerlink" title="一、python文件命名方式"></a>一、python文件命名方式</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#常常使用驼峰命名法或者是下划线分割法</span><br><span class="hljs-comment">#并且不能使用关键字</span><br><br><span class="hljs-comment">#文件名：使用中文不会报错，除了第一天的代码，第二天开始都不要使用中文</span><br>    <span class="hljs-comment">#1.可以使用中文</span><br>    <span class="hljs-comment">#2.可以使用数字但是不要全部是数字</span><br>    <span class="hljs-comment">#3.可以使用_或者-等分割字符分割</span><br>    <span class="hljs-comment">#4,文件名要有描述性</span><br>    <span class="hljs-comment">#5.不要和系统关键字冲突</span><br><br><span class="hljs-comment"># python后缀文件</span><br><span class="hljs-comment">#.py    经常使用的脚本文件</span><br><span class="hljs-comment">#.pyc   临时文件</span><br><span class="hljs-comment">#.pyw   开发纯图形化界面程序的文件</span><br></code></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="二、python语句分分类、注释的使用"><a href="#二、python语句分分类、注释的使用" class="headerlink" title="二、python语句分分类、注释的使用"></a>二、python语句分分类、注释的使用</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#注释：</span><br><span class="hljs-comment">#单行注释使用#</span><br><span class="hljs-comment">#多行注释使用</span><br><span class="hljs-string">"""</span><br><span class="hljs-string">这样里边的内容都是注释</span><br><span class="hljs-string">我是多行注释，在run的时候不会执行里边的内容</span><br><span class="hljs-string">"""</span><br><br><span class="hljs-comment">#语句分类：</span><br><span class="hljs-comment">#单行语句、代码块</span><br><br>print(<span class="hljs-string">"oaoaoaoaoaoaoaoao sdadfasfsa"</span>)<br><br><span class="hljs-comment">#代码组</span><br><span class="hljs-keyword">if</span> <span class="hljs-number">1</span>:<br>    print(<span class="hljs-string">"true"</span>)<br>    print(<span class="hljs-string">"我是真"</span>)<br><br><span class="hljs-comment"># 变量看做是一个容器</span><br><span class="hljs-comment"># a = "hello word"</span><br><span class="hljs-comment"># print(a)</span><br><span class="hljs-comment"># print("a")#print会自己换行</span><br><br><span class="hljs-comment">#使用ctrl+？可以实现多行注释，</span><br></code></pre></td></tr></table></figure>
<h2 id="三、变量的命名方式"><a href="#三、变量的命名方式" class="headerlink" title="三、变量的命名方式"></a>三、变量的命名方式</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">    <span class="hljs-comment">#1、python3版本支持中文命名，一般不用</span><br>    <span class="hljs-comment">#2、只能以数字，字母下划线组成，</span><br>    <span class="hljs-comment">#3、数字不能作为开头</span><br>    <span class="hljs-comment">#4、下划线作为开头是由特殊意义的，__私有，代表了集成式的继承特性</span><br>    <span class="hljs-comment">#5、python严格区分大小写</span><br>    <span class="hljs-comment">#6、变量命名需要有描述性</span><br>    <span class="hljs-comment">#7、不能与关键字冲突</span><br><br>age1=<span class="hljs-number">18</span><br>age2=<span class="hljs-number">18</span><br>age3=<span class="hljs-number">18</span><br>print(age1,id(age1))<br>print(age2,id(age2))<br>print(age3,id(age3))<br>age1=age2=age3=<span class="hljs-number">18</span><br>print(age1,id(age1))<br>print(age2,id(age2))<br>print(age3,id(age3))<br><span class="hljs-comment">#-5，会优先去看内存中是否有，如果有，那么地址就是一样的</span><br><br>name,age,sex=<span class="hljs-string">"name"</span>,<span class="hljs-number">18</span>,<span class="hljs-string">"women"</span>  <span class="hljs-comment">#变量可以对应接收</span><br>print(name)<br>print(age)<br>print(sex)<br><br>a,*b,c=<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>  <span class="hljs-comment">#b,看做一个垃圾站，接收所有没人要的值，取成首地址，看成数组</span><br>print(a)<br>print(b)<br>print(c)<br></code></pre></td></tr></table></figure>
<h2 id="四、系统默认有6个基本类型"><a href="#四、系统默认有6个基本类型" class="headerlink" title="四、系统默认有6个基本类型"></a>四、系统默认有6个基本类型</h2><pre><code>1、Number    类型
    int
    float
        3.141526535
    bool
        True
        False
    complex 复数（由实部+虚部组成）
        a=实数+虚数（j）  1+1i
2、string    字符型
    单引号定义   &apos;&apos;
    双引号定义   &quot;&quot;
    三引号         
    #转义字符
3、list      列表型
    a = [1,2,3]
4、tuple     元组型
    a = (1,2,3)
    a = ()#空元组
5、dict      字典型
    有映射关系的无序的数据组合
    有空字典
    a = {&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3}
6、set       集合型
    一组特定数据的无序集合，所有数据不会重复
    a = {1,2,3,4,5}</code></pre>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>day3：数据类型转换</title>
    <url>/2020/04/03/day3%EF%BC%9A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<h2 id="一、向int转换"><a href="#一、向int转换" class="headerlink" title="一、向int转换"></a>一、向int转换</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#数据类型转换：强制类型转换，自动类型转换。</span><br><span class="hljs-comment">#自动类型转换：</span><br>    <span class="hljs-comment">#朝着让精度更加大的方向进行转换</span><br>    <span class="hljs-comment">#自动转换不需要人工干预</span><br>    <span class="hljs-comment">#都发生在运算以及判断中</span><br><span class="hljs-comment">#强制类型转换：（手动类型转换）</span><br>    <span class="hljs-comment">#随着程序员的意图进行转换</span><br><br><br><span class="hljs-string">"""</span><br><span class="hljs-string">可以转换：</span><br><span class="hljs-string">    float</span><br><span class="hljs-string">    bool</span><br><span class="hljs-string">    str 纯数字字符串</span><br><span class="hljs-string">    </span><br><span class="hljs-string">不可转换：</span><br><span class="hljs-string">    complex</span><br><span class="hljs-string">    str 非纯数字</span><br><span class="hljs-string">    list</span><br><span class="hljs-string">    tuple</span><br><span class="hljs-string">    set</span><br><span class="hljs-string">    dict</span><br><span class="hljs-string"></span><br><span class="hljs-string">容器类型</span><br><span class="hljs-string">    str     有序可变</span><br><span class="hljs-string">    list    有序可变</span><br><span class="hljs-string">    tuple   有序不可变</span><br><span class="hljs-string">    set     无序不可变</span><br><span class="hljs-string">    dict    无序可变</span><br><span class="hljs-string">"""</span><br></code></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="二、向float转换"><a href="#二、向float转换" class="headerlink" title="二、向float转换"></a>二、向float转换</h2><p>与int转换相同</p>
<h2 id="三、向complex转换"><a href="#三、向complex转换" class="headerlink" title="三、向complex转换"></a>三、向complex转换</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-string">"""</span><br><span class="hljs-string">向复数类型转化</span><br><span class="hljs-string">    int     可以</span><br><span class="hljs-string">    float    可以</span><br><span class="hljs-string">    bool    可以</span><br><span class="hljs-string">    str     纯数字可以</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    list    不行</span><br><span class="hljs-string">    tuple   不行</span><br><span class="hljs-string">    set     不行</span><br><span class="hljs-string">    dict    不行</span><br><span class="hljs-string">"""</span><br></code></pre></td></tr></table></figure>
<h2 id="四、向bool类型转换"><a href="#四、向bool类型转换" class="headerlink" title="四、向bool类型转换"></a>四、向bool类型转换</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-string">"""</span><br><span class="hljs-string">向bool类型转换（所有的类型都可以转换为bool）</span><br><span class="hljs-string">    0 --- False</span><br><span class="hljs-string">    1 --- True</span><br><span class="hljs-string">    </span><br><span class="hljs-string">字符串只有""空字符串才能转换为False</span><br><span class="hljs-string"></span><br><span class="hljs-string">list也是只有空列表才转换为False</span><br><span class="hljs-string">tuple</span><br><span class="hljs-string">set</span><br><span class="hljs-string">dict</span><br><span class="hljs-string"></span><br><span class="hljs-string">一般用于判断用，判断是否为空</span><br><span class="hljs-string">"""</span><br></code></pre></td></tr></table></figure>
<h2 id="五、向list进行转换"><a href="#五、向list进行转换" class="headerlink" title="五、向list进行转换"></a>五、向list进行转换</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-string">"""</span><br><span class="hljs-string">int </span><br><span class="hljs-string">float</span><br><span class="hljs-string">complex 不可以转换</span><br><span class="hljs-string"></span><br><span class="hljs-string">str     可以</span><br><span class="hljs-string">tuple</span><br><span class="hljs-string">dict</span><br><span class="hljs-string">set</span><br><span class="hljs-string"></span><br><span class="hljs-string">['c', 'a', 'b'] &lt;class 'list'&gt; 只转换字典的键不转换值</span><br><span class="hljs-string">"""</span><br></code></pre></td></tr></table></figure>
<h2 id="六、向str转换"><a href="#六、向str转换" class="headerlink" title="六、向str转换"></a>六、向str转换</h2><p>所有都可以转换，在最外边加上双引号<br> 字典在转换时： #{‘a’: 1, ‘b’: 2, ‘c’: 3} &lt;class ‘str’&gt;</p>
<h2 id="七、向tuple转换"><a href="#七、向tuple转换" class="headerlink" title="七、向tuple转换"></a>七、向tuple转换</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><br><span class="hljs-string">"""</span><br><span class="hljs-string">向tuple进行转换，</span><br><span class="hljs-string">如，int float bool 不能转换，不能迭代（因为不是容器）</span><br><span class="hljs-string"></span><br><span class="hljs-string">其他容器类型都可以转换</span><br><span class="hljs-string">(str是一个特殊的容器)</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">str：  #('1', ',', '2', ',', '3') &lt;class 'tuple'&gt;</span><br><span class="hljs-string">dict： #('c', 'a', 'b') &lt;class 'tuple'&gt;只有键值</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">"""</span><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/04/02/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start">Quick Start<a class="post-anchor" href="#Quick-Start"></a></h2><h3 id="Create-a-new-post">Create a new post<a class="post-anchor" href="#Create-a-new-post"></a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span><br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server">Run server<a class="post-anchor" href="#Run-server"></a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files">Generate static files<a class="post-anchor" href="#Generate-static-files"></a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites">Deploy to remote sites<a class="post-anchor" href="#Deploy-to-remote-sites"></a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>从高考到程序员</title>
    <url>/2020/04/03/%E4%BB%8E%E9%AB%98%E8%80%83%E5%88%B0%E7%A8%8B%E5%BA%8F%E5%91%98/</url>
    <content><![CDATA[<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p>首先，本人是一名物联网工程专业大一的学生。可以说我是去年刚刚才走出高中、迈进大学的校门的，我知道我还不能算是一名程序员！我知道我还不能算是一名程序员！我知道我还不能算是一名程序员！但我有着一颗成为程序员的心，我相信，有一天我可以做到。</p>
<p>主要想写给自己，记录自己这一小段路的足迹。同时，也为一些将要进入大学的、志同道合的同学献上我的经验。</p>
<p>本人经历的虽然不多，但是在这有限的时间里，感触还是挺多的。</p>
<a id="more"></a>
<h2 id="2、我的高中"><a href="#2、我的高中" class="headerlink" title="2、我的高中"></a>2、我的高中</h2><p>初中那一会，完全不把学习放在心上，每天只知道玩手机，看小说，打游戏。最后也不知道怎么就稀里糊涂的过去了，上了我们那排名最末尾的一所重点高中。到了高中，高一的时候还是没能静下心来学习，到了高二分重点班也没有机会能进，可以说是白白失去了很多机会。我想说：关键的时候一定要咬牙！真的，长点志气，别整天嬉皮笑脸的，如果自己都不想让自己变的更好的话，那谁也帮不了你，机会要自己去把握。</p>
<p>到了高二，我还在普通班里，要说不学习到不至于，只是没有去拼。等到我终于意识到学习是一件需要我使出浑身解数的时候，我在不知不觉中已经落后了别人太多了。在高二下到高考结束，我付出了不知多少的辛苦，我知道，比我努力的大有人在，我只求做到问心无愧。在我疯狂的学习之下，我终于赶上了班里的大部分人，最后最令我妈妈惊喜的是我也能考上一本。</p>
<p>现在回首我的高中，仿佛就是刚刚才过去，但也让人怀念。虽然高中浪费了很多的时间，但高中也留给了我无比珍贵的东西——敢于奋斗，敢于付出，敢于牺牲的精神。每个人都不是生来的天才，只有足够的努力才能让自己成为强者。千万别现在还年轻，此时不搏何时搏。卯足了劲，打他一个！</p>
<p>建议：</p>
<p>在大学之前培养自己的兴趣爱好。–高一高二不忙，就多看看书，想办法开拓自己的视野，给自己找好目标，定好位就赢在了起跑线上了，聪明的人早早就规划好了自己。<br>敢于尝试，敢于付出自己的时间。–哪怕是走错了路，选错了目标，花掉的时间也绝不是浪费。<br>不要拘泥于自己的小世界。———用好网络，书籍等自己身边一切资源，你会发现世界远比你想象的丰富。<br>高三要沉住气，做得住。<br>一定要好好学英语!一定要好好学英语！一定要好好学英语！多看书！多看书！多看书！</p>
<h2 id="3、开始的迷茫"><a href="#3、开始的迷茫" class="headerlink" title="3、开始的迷茫"></a>3、开始的迷茫</h2><p>刚开始进入大学，什么东西都是焕然一新的，（到了大学机会更要自己去把握。）无论如何，只要自己想，就去做,不要过多的在意他人的看法，大学里靠自己拼搏。</p>
<p>多多自学，用好互联网，靠自学！</p>
<p>暂时，想说的就这么多，希望可以对他人有所帮助！</p>
]]></content>
      <categories>
        <category>编码之外</category>
      </categories>
      <tags>
        <tag>编码之外</tag>
      </tags>
  </entry>
  <entry>
    <title>使用花生壳+树莓派实现内网穿透</title>
    <url>/2020/04/03/%E4%BD%BF%E7%94%A8%E8%8A%B1%E7%94%9F%E5%A3%B3-%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
    <content><![CDATA[<p>最近在做毕设的过程中，在内网使用树莓派以及esp8266搭建了内网的智能家居系统，想要实现本人不在家中，也能通过外网对家里的智能家居系统进行访问。最后本人选择的方案是使用花生壳进行内网穿透。<br>选择原因：花生壳赠送一个域名，能够免费进行远程桌面，远程连接树莓派的内网穿透，如果想要穿透web的http协议也仅需6元即可永久开通<br>开始之前给出<a href="http://service.oray.com/category/peanut.html" target="_blank" rel="noopener">花生壳官方参考资料</a>地址，里面的教程更加详细。</p>
<a id="more"></a>
<h2 id="一、树莓派下载花生壳客户端："><a href="#一、树莓派下载花生壳客户端：" class="headerlink" title="一、树莓派下载花生壳客户端："></a>一、树莓派下载花生壳客户端：</h2><p>在树莓派上下载花生壳可以参照这一步骤：<a href="http://service.oray.com/question/1696.html" target="_blank" rel="noopener">安装花生壳</a><br><strong>注意</strong>：在树莓派上，一定要先将安装完成时的sn码和初始密码用来登录（类似一个绑定的操作，否则可能出现一直提示请检查服务器是否运行）如果是已有账号的小伙伴也需要这一步，放心之后可以将账号再绑定上去。</p>
<h2 id="二、启动花生壳服务，注册账号"><a href="#二、启动花生壳服务，注册账号" class="headerlink" title="二、启动花生壳服务，注册账号"></a>二、启动花生壳服务，注册账号</h2><p>输入phddns start 命令启用花生壳<br>默认内置帐号只有公网版服务，如需使用内网穿透功能，要自行开通</p>
<h2 id="三、进入控制台，设置要穿透的内网"><a href="#三、进入控制台，设置要穿透的内网" class="headerlink" title="三、进入控制台，设置要穿透的内网"></a>三、进入控制台，设置要穿透的内网</h2><p>如果选择http需要6元<br><img src="/2020/04/03/%E4%BD%BF%E7%94%A8%E8%8A%B1%E7%94%9F%E5%A3%B3-%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/1.png" alt="设置页面"></p>
<h2 id="四、诊断看看是否运行成功"><a href="#四、诊断看看是否运行成功" class="headerlink" title="四、诊断看看是否运行成功"></a>四、诊断看看是否运行成功</h2><p>恭喜啦，到这一步没什么问题的话就成功啦！</p>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>内网穿透</tag>
        <tag>毕设</tag>
      </tags>
  </entry>
  <entry>
    <title>策爷拿到日本offer</title>
    <url>/2020/04/03/%E7%AD%96%E7%88%B7%E6%8B%BF%E5%88%B0%E6%97%A5%E6%9C%ACoffer/</url>
    <content><![CDATA[<h2 id="恭喜恭喜策爷"><a href="#恭喜恭喜策爷" class="headerlink" title="恭喜恭喜策爷"></a>恭喜恭喜策爷</h2><p>我和我的好朋友沈策，今天去海边玩耍，得知一个好消息，策爷拿到了去日本留学的offfer，是早稻田大学。<br>恭喜恭喜啊，努力就会有回报这句话果然没有错！还有就是苟富贵勿相忘啦哈哈哈</p>
<a id="more"></a>
<h2 id="自己也要继续努力"><a href="#自己也要继续努力" class="headerlink" title="自己也要继续努力"></a>自己也要继续努力</h2><p>确实看到身边的人，有的拿了offer，有的保研了，有些人做得毕业设计使用的东西自己都看不懂了，还是只会在家玩游戏，确实不应该。既然自己能够知道自己的不足，那赶紧努力追赶上吧！<br><img src="/2020/04/03/%E7%AD%96%E7%88%B7%E6%8B%BF%E5%88%B0%E6%97%A5%E6%9C%ACoffer/IMG_3138.JPG" alt="纪念"></p>
]]></content>
      <categories>
        <category>编码之外</category>
      </categories>
      <tags>
        <tag>编码之外</tag>
      </tags>
  </entry>
</search>
