<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>day 10:列表的相关操作</title>
    <url>/2020/04/03/day-10-%E5%88%97%E8%A1%A8%E7%9A%84%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>列表的相关操作</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">列表的操作</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment">#重复输出</span></span><br><span class="line"><span class="comment">#print(L1*3)</span></span><br><span class="line">L1 = [<span class="string">"Python"</span>,<span class="string">"PHPPHP"</span>,<span class="string">"H5EE"</span>,<span class="string">"Js"</span>,<span class="string">"Java"</span>]</span><br><span class="line">print(L1[<span class="number">0</span>][<span class="number">1</span>:<span class="number">5</span>]) <span class="comment">#[1:5]不会取到5</span></span><br><span class="line">print(L1[<span class="number">1</span>][<span class="number">0</span>:<span class="number">3</span>])</span><br><span class="line">print(L1[<span class="number">2</span>][<span class="number">-2</span>:])</span><br><span class="line"></span><br><span class="line"><span class="comment">#in not in成员判断</span></span><br><span class="line">L2 = <span class="string">"Python"</span></span><br><span class="line">print(L2 <span class="keyword">in</span> L1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#遍历</span></span><br><span class="line"><span class="keyword">for</span> val <span class="keyword">in</span> L1:</span><br><span class="line">    print(val)</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt;len(L1):</span><br><span class="line">    print(L1[i])</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#append 追加，末尾</span></span><br><span class="line">L1.append(<span class="string">"C++"</span>)</span><br><span class="line"><span class="keyword">for</span> val <span class="keyword">in</span> L1:</span><br><span class="line">    print(val)</span><br><span class="line"><span class="comment">#insert 插入，在指定位置</span></span><br><span class="line">L1.insert(<span class="number">1</span>,<span class="string">"haha"</span>)</span><br><span class="line"><span class="keyword">for</span> val <span class="keyword">in</span> L1:</span><br><span class="line">    print(val)</span><br><span class="line"><span class="comment">#extend 扩展，将</span></span><br><span class="line">L2 = [<span class="string">"123"</span>,<span class="string">"456"</span>]</span><br><span class="line">L1.append(L2)</span><br><span class="line">print(L1)</span><br><span class="line">L1.extend(L2)</span><br><span class="line">print(L1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pop 传递待删除的元素的索引值，并且发返回被删除的元素</span></span><br><span class="line"><span class="comment">#不传参数就会删除最后一个值，</span></span><br><span class="line">res = L1.pop(<span class="number">1</span>)</span><br><span class="line">print(L1,res)</span><br><span class="line"><span class="comment">#remove 删除指定的元素，如果有重复， 默认删除第一个</span></span><br><span class="line">L1.remove(<span class="string">"Python"</span>)</span><br><span class="line">print(L1)</span><br><span class="line"><span class="comment">#count 查询某元素的出现次数</span></span><br><span class="line">res = L1.count(<span class="string">"123"</span>)</span><br><span class="line">print(res)</span><br><span class="line"><span class="comment">#index 查询元素的索引 ("",5) 5值起始位置</span></span><br><span class="line">res = L1.index([<span class="string">"123"</span>,<span class="string">"456"</span>])</span><br><span class="line">print(res)</span><br><span class="line">print(L1.pop(res),L1)</span><br><span class="line"><span class="comment">#reverse 列表中的元素从右到左重新存放一遍</span></span><br><span class="line">L1.reverse()</span><br><span class="line">print(L1)</span><br><span class="line"><span class="comment">#sort 对列表中的数据排序整理</span></span><br><span class="line">L1.sort()</span><br><span class="line">print(L1)</span><br><span class="line">L1.sort(reverse = <span class="literal">True</span>)<span class="comment">#倒序排</span></span><br><span class="line">print(L1)</span><br><span class="line">L1.sort(key=len)    <span class="comment">#按长度</span></span><br><span class="line">print(L1)</span><br><span class="line">L = [<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">-3</span>,<span class="number">-1</span>]</span><br><span class="line">L.sort(key=abs) <span class="comment">#按绝对值</span></span><br><span class="line">print(L)</span><br><span class="line"><span class="comment">#如果在sort想保留原数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#clear 清空列表</span></span><br><span class="line">L.clear()</span><br><span class="line">print(L) <span class="comment">#空列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#copy 复制</span></span><br><span class="line">res = L1.copy()</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">L = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,[<span class="number">5</span>,<span class="number">6</span>]]<span class="comment">#浅拷贝，只拷贝了最外层，内层改变是会一起改变的</span></span><br><span class="line">res = L.copy()</span><br><span class="line">print(res)</span><br><span class="line">L[<span class="number">4</span>].append(<span class="number">7</span>)</span><br><span class="line">print(res)  <span class="comment">#会随着改变，内层拷贝不过来，会指向原列表的二级列表（地址）</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>day 11：列表推导式与深浅拷贝</title>
    <url>/2020/04/03/day-11%EF%BC%9A%E5%88%97%E8%A1%A8%E6%8E%A8%E5%AF%BC%E5%BC%8F%E4%B8%8E%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
    <content><![CDATA[<h1 id="1、列表推导式"><a href="#1、列表推导式" class="headerlink" title="1、列表推导式"></a>1、列表推导式</h1><p>通过使用列表推导式，用简洁的代码实现复杂功能<br>例如：<br>打印10与10各个数字的组合</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = [(x,y) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>) <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
<p>打印偶数奇数的组合</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = [(x,y) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>) <span class="keyword">if</span> x%<span class="number">2</span>==<span class="number">0</span> <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">10</span>)</span><br><span class="line">       <span class="keyword">if</span> y%<span class="number">2</span>==<span class="number">1</span>]</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
<p>打印ABC与123的组合</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = [x+y <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">"ABC"</span> <span class="keyword">for</span> y <span class="keyword">in</span> <span class="string">"123"</span>]</span><br><span class="line">print(res)<span class="comment">#会先循环先写的</span></span><br></pre></td></tr></table></figure>
<p>练习：<br>给一列表M打印要求数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#给一列表M打印要求数据</span></span><br><span class="line">M = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]</span><br><span class="line"><span class="comment">#求 1 4 7</span></span><br><span class="line">res = [var[<span class="number">0</span>] <span class="keyword">for</span> var <span class="keyword">in</span> M]</span><br><span class="line">print(res)</span><br><span class="line"><span class="comment">#求1 5 9</span></span><br><span class="line">res = [M[i][i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(M))]</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
<p>给一列表，求每一元素的长度的列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#涉及到每一个元素就使用for var in L</span></span><br><span class="line">L = [<span class="string">"continue"</span>,<span class="string">"else"</span>,<span class="string">"if"</span>,<span class="string">"break"</span>,<span class="string">"pass"</span>,<span class="string">"def"</span>]</span><br><span class="line"><span class="comment">#res = [len(L[i]) for i in range(len(L))]</span></span><br><span class="line">res = [len(var) <span class="keyword">for</span> var <span class="keyword">in</span> L]</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

<h1 id="2、深浅拷贝"><a href="#2、深浅拷贝" class="headerlink" title="2、深浅拷贝"></a>2、深浅拷贝</h1><p>1、赋值是同一内存地址，b指向a的内存地址，当a的值发生改变的时候，b也会变</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,[<span class="number">5</span>,<span class="number">6</span>]]</span><br><span class="line">b = a</span><br><span class="line">a.append(<span class="number">7</span>)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>
<p>2、浅拷贝，拷贝第一层，第二层还是拷贝地址</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,[<span class="number">5</span>,<span class="number">6</span>]]</span><br><span class="line">c = copy.copy(a)</span><br><span class="line">a[<span class="number">4</span>].append(<span class="number">7</span>)</span><br><span class="line">a.append(<span class="number">8</span>)</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure>
<p>3、深拷贝，拷贝所有数据，全部新开辟一块内存，a变，d不会有变化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,[<span class="number">5</span>,<span class="number">6</span>]]</span><br><span class="line">d = copy.deepcopy(a)</span><br><span class="line">a[<span class="number">4</span>].append(<span class="number">7</span>)</span><br><span class="line">a.append(<span class="number">8</span>)</span><br><span class="line">print(d)</span><br></pre></td></tr></table></figure>

<p>以上三条输出分别为：<br>[1, 2, 3, 4, [5, 6], 7]<br>[1, 2, 3, 4, [5, 6, 7]]<br>[1, 2, 3, 4, [5, 6]]</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>day 5：小练习与分支结构</title>
    <url>/2020/04/03/day-5%EF%BC%9A%E5%B0%8F%E7%BB%83%E4%B9%A0%E4%B8%8E%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p>##一、身份检测</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">is</span> 是</span><br><span class="line"><span class="keyword">is</span> <span class="keyword">not</span> 不是</span><br><span class="line"></span><br><span class="line"><span class="comment"># var = "man"</span></span><br><span class="line"><span class="comment"># val = "man"</span></span><br><span class="line"><span class="comment"># res = var is not val</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br></pre></td></tr></table></figure>
<p>##二、位运算</p>
<a id="more"></a>

<p>&amp; 按位于<br>| 按位或<br>^ 按位或<br>~ 按位取反<br>&lt;&lt; 左移</p>
<blockquote>
<blockquote>
<p>右移</p>
</blockquote>
</blockquote>
<p>##三、分支结构</p>
<p>流程控制<br>流程：执行代码的顺序<br>顺序结构，分支结构，循环结构</p>
<p>单向分支 :<br>if 条件语句：<br>    功能<br>    …</p>
<p>双向分支：<br>if 条件1：<br>    功能1<br>else：<br>    功能2</p>
<p>多向分支：<br>if 条件1：<br>    功能1<br>elif 条件2：<br>    功能2<br>elif 条件3：<br>    功能3<br>…</p>
<p>巢状分支:（嵌套）<br>if 条件1：<br>    if 条件2：<br>        功能2<br>    else:<br>        功能3<br>else<br>    功能4</p>
<p>##四、内容输入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = input()</span><br><span class="line">name = input(<span class="string">"请输入你的用户名："</span>)</span><br><span class="line">num = int(input(<span class="string">"请输入你的年龄："</span>)) </span><br><span class="line">得到int型的输入</span><br><span class="line"></span><br><span class="line">name = input(<span class="string">"请输入你的用户名："</span>)</span><br><span class="line"><span class="keyword">if</span> name == <span class="string">"admin"</span>:</span><br><span class="line">    print(<span class="string">"管理员登录！"</span>)</span><br><span class="line">num = int(input(<span class="string">"请输入你的年龄："</span>))</span><br><span class="line">print(num,type(num))</span><br></pre></td></tr></table></figure>
<p>##五、输入年份判断生肖</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">year = int(input(<span class="string">"请输入一个要查询的年份："</span>))</span><br><span class="line"><span class="keyword">if</span> year % <span class="number">12</span> == <span class="number">2</span>:</span><br><span class="line">    print(<span class="string">"今年是狗年"</span>)</span><br><span class="line"><span class="keyword">elif</span> year % <span class="number">12</span> == <span class="number">3</span>:</span><br><span class="line">    print(<span class="string">"今年是猪年"</span>)</span><br><span class="line"><span class="keyword">elif</span> year % <span class="number">12</span> == <span class="number">4</span>:</span><br><span class="line">    print(<span class="string">"鼠年"</span>)</span><br><span class="line"><span class="keyword">elif</span> year % <span class="number">12</span> == <span class="number">5</span>:</span><br><span class="line">    print(<span class="string">"牛年"</span>)</span><br><span class="line"><span class="keyword">elif</span> year % <span class="number">12</span> == <span class="number">6</span>:</span><br><span class="line">    print(<span class="string">"虎年"</span>)</span><br><span class="line"><span class="keyword">elif</span> year % <span class="number">12</span> == <span class="number">7</span>:</span><br><span class="line">    print(<span class="string">"兔年"</span>)</span><br><span class="line"><span class="keyword">elif</span> year % <span class="number">12</span> == <span class="number">8</span>:</span><br><span class="line">    print(<span class="string">"龙年"</span>)</span><br><span class="line"><span class="keyword">elif</span> year % <span class="number">12</span> == <span class="number">9</span>:</span><br><span class="line">    print(<span class="string">"蛇年"</span>)</span><br><span class="line"><span class="keyword">elif</span> year % <span class="number">12</span> == <span class="number">10</span>:</span><br><span class="line">    print(<span class="string">"马年"</span>)</span><br><span class="line"><span class="keyword">elif</span> year % <span class="number">12</span> == <span class="number">11</span>:</span><br><span class="line">    print(<span class="string">"羊年"</span>)</span><br><span class="line"><span class="keyword">elif</span> year % <span class="number">12</span> == <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">"猴年"</span>)</span><br><span class="line"><span class="keyword">elif</span> year % <span class="number">12</span> == <span class="number">1</span>:</span><br><span class="line">    print(<span class="string">"鸡年"</span>)</span><br></pre></td></tr></table></figure>
<p>##六、彩票抽奖</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">用户输入一个两位数，</span><br><span class="line">输入的数值与指定的号码对比，</span><br><span class="line">如果两个数值一样，就是一等奖</span><br><span class="line">如果两个数一样，郸顺序不一样，是二等奖</span><br><span class="line">如果只有一个数值一样，不得奖</span><br><span class="line"><span class="keyword">import</span> random <span class="comment">#引入随机数</span></span><br><span class="line"></span><br><span class="line">luck_num = random.randint(<span class="number">10</span>,<span class="number">99</span>)</span><br><span class="line">luck_num_g = luck_num % <span class="number">10</span></span><br><span class="line">luck_num_s = luck_num //<span class="number">10</span></span><br><span class="line">buy_num = int(input(<span class="string">"请输入一个两位数："</span>))</span><br><span class="line"><span class="keyword">if</span> buy_num == luck_num:</span><br><span class="line">    print(<span class="string">"一等奖"</span>)</span><br><span class="line"><span class="keyword">elif</span> buy_num % <span class="number">10</span> == luck_num_s <span class="keyword">and</span> buy_num //<span class="number">10</span> == luck_num_g:</span><br><span class="line">    print(<span class="string">"二等奖"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"遗憾,没中奖"</span>)</span><br></pre></td></tr></table></figure>
<p>​</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>day 4：数据类型转换与运算</title>
    <url>/2020/04/03/day-4%EF%BC%9A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E4%B8%8E%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<p>##一、向集合转换</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">var=<span class="number">1</span>               <span class="comment">#整型，浮点型，复数，bool</span></span><br><span class="line">val = set(var)</span><br><span class="line">print(val,type(val)) <span class="comment">#报错！所有数值类型不能转化成集合</span></span><br><span class="line"></span><br><span class="line">var = <span class="string">"hello"</span>     </span><br><span class="line">val = set(var)</span><br><span class="line">print(val,type(val))</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>总结：<br>所有数值类型不能转化成集合<br>所有容器类型都可以<br>字典只能转化键<br>##二、向字典转换</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">var = <span class="string">""</span></span><br><span class="line">val = dict(var)</span><br><span class="line">print(val, type(val))</span><br><span class="line"></span><br><span class="line">var = [[<span class="number">1</span>,<span class="string">"hello"</span>],[<span class="number">2</span>,<span class="string">"word"</span>]]</span><br><span class="line">val = dict(var)</span><br><span class="line">print(val, type(val))</span><br></pre></td></tr></table></figure>
<p>总结：<br>所有字符类型不能转换<br>容器类型只要是空都可以<br>列表中[[1,”hello”],[2,”word”]]，嵌套二级列表，有且只有两个元素才可以</p>
<p>##三、数值运算</p>
<p>//  取整（取结果，去掉余数的意思）<br>**  幂运算</p>
<p>7/5  版本2中是1，版本3中是1.4</p>
<p>（其余运算类似c）</p>
<p>##四、逻辑运算</p>
<p>两个相等是全等于，必须数值相同 为True</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="number">1.0</span></span><br><span class="line">b=<span class="number">1</span></span><br><span class="line">print(a==b) <span class="comment">#结果为True</span></span><br></pre></td></tr></table></figure>

<p>（其余运算类似c）<br>##五、赋值运算</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a**=<span class="number">3</span>  等于 a=a**<span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>##六、逻辑运算</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">and</span>、<span class="keyword">or</span>、<span class="keyword">not</span>、xor（^）</span><br></pre></td></tr></table></figure>
<p>##七、成员运算</p>
<p>在容器中in、不在容器中not in</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">var = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">print(<span class="number">6</span> <span class="keyword">in</span> var)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>day 6：循环</title>
    <url>/2020/04/03/day-6%EF%BC%9A%E5%BE%AA%E7%8E%AF/</url>
    <content><![CDATA[<p>##一、while循环</p>
<p>while True：死循环，只能使用break</p>
<p>break：  退出当前循环</p>
<p>continue：继续下一轮循环</p>
<p>pass  在循环体或者函数体空时防止报错</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random <span class="comment">#引入随机数</span></span><br><span class="line"></span><br><span class="line">luck_num = random.randint(<span class="number">10</span>,<span class="number">99</span>)</span><br><span class="line">luck_num_g = luck_num % <span class="number">10</span></span><br><span class="line">luck_num_s = luck_num //<span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    buy_num = int(input(<span class="string">"请输入一个两位数："</span>))</span><br><span class="line">    <span class="keyword">if</span> buy_num == luck_num:</span><br><span class="line">        print(<span class="string">"一等奖"</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">elif</span> buy_num % <span class="number">10</span> == luck_num_s <span class="keyword">and</span> buy_num //<span class="number">10</span> == luck_num_g:</span><br><span class="line">        print(<span class="string">"二等奖"</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"遗憾,没中奖"</span>)</span><br></pre></td></tr></table></figure>
<p>##二、使用while打印乘法表</p>
<p> 正三角</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line">    j = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= i:</span><br><span class="line">        print(j,<span class="string">"x"</span>,i,<span class="string">"="</span>,i*j,end=<span class="string">" "</span>)</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">    print()</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>倒三角</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">9</span></span><br><span class="line"><span class="keyword">while</span> i &gt; <span class="number">0</span>:</span><br><span class="line">    j = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= i:</span><br><span class="line">        print(j,<span class="string">"*"</span>,i,<span class="string">"="</span>,i*j,end=<span class="string">" "</span>)</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">    print()</span><br><span class="line">    i -= <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>向左三角</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>:</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> count&lt;k:</span><br><span class="line">        print(end=<span class="string">"        "</span>)</span><br><span class="line">        count+=<span class="number">1</span></span><br><span class="line">    k-=<span class="number">1</span></span><br><span class="line">    j = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= i:</span><br><span class="line">        print(<span class="string">"%s*%s=%s"</span>%(j,i,i*j),end=<span class="string">"\t"</span>)</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">    print()</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>向左倒三角</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">9</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i &gt;<span class="number">0</span>:</span><br><span class="line">    k = <span class="number">9</span></span><br><span class="line">    <span class="keyword">while</span> k &gt; i:</span><br><span class="line">        print(end=<span class="string">"        "</span>)</span><br><span class="line">        k -= <span class="number">1</span></span><br><span class="line">    j = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= i:</span><br><span class="line">        print(<span class="string">"%s*%s=%s"</span>%(j,i,i*j),end=<span class="string">"\t"</span>)</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">    print()</span><br><span class="line">    i -= <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>##三、使用for循环</p>
<p>常在遍历时候使用，</p>
<p>在字典中取出键值，但可以用var.values()获得键值,用var.items()得到它本身</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">var = <span class="string">"今年过年不收礼啊，"</span></span><br><span class="line"><span class="keyword">for</span> val <span class="keyword">in</span> var:</span><br><span class="line">    print(val)</span><br><span class="line"><span class="comment">#for循环嵌套</span></span><br><span class="line"></span><br><span class="line">var = [<span class="string">"python"</span>,<span class="string">"hello"</span>,<span class="string">"java"</span>,<span class="string">"c"</span>]</span><br><span class="line"><span class="keyword">for</span> val <span class="keyword">in</span> var:</span><br><span class="line">    print(val)</span><br><span class="line">    <span class="keyword">for</span> res <span class="keyword">in</span> val:</span><br><span class="line">        print(res)</span><br><span class="line"></span><br><span class="line">var = &#123;<span class="string">"a"</span>:<span class="number">1</span>,<span class="string">"b"</span>:<span class="number">2</span>,<span class="string">"c"</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> val <span class="keyword">in</span> var.items():</span><br><span class="line">    print(val)</span><br></pre></td></tr></table></figure>
<p>#在二级列表的使用中，可以使用abc这样的获得相应值，要求长度相同</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">var = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]</span><br><span class="line"><span class="keyword">for</span> a,b,c <span class="keyword">in</span> var:</span><br><span class="line">    print(a,b,c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">range(a,b) a为起始，b为最大值<span class="number">-1</span>，(如果没有a那么就是从<span class="number">0</span>开始 通过<span class="keyword">for</span>循环打印乘法表</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,i+<span class="number">1</span>):</span><br><span class="line">        print(<span class="string">"%sx%s=%s"</span>%(j,i,i*j),end=<span class="string">"\t"</span>)</span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(i, <span class="number">10</span>):</span><br><span class="line">        print(<span class="string">"%sx%s=%s"</span> % (i, j, i * j), end=<span class="string">"\t"</span>)</span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span> - i):</span><br><span class="line">        print(end=<span class="string">"        "</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, i + <span class="number">1</span>):</span><br><span class="line">        print(<span class="string">"%sx%s=%s"</span> % (j, i, i * j), end=<span class="string">"\t"</span>)</span><br><span class="line">    print()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>day 8:字符串相关方法</title>
    <url>/2020/04/03/day-8-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E5%85%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="字符串内置方法："><a href="#字符串内置方法：" class="headerlink" title="字符串内置方法："></a>字符串内置方法：</h2><p>dir（） 查询这个类型的数据有什么操作方法</p>
<p>通过ctrl+鼠标键可以查看使用方法</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str1 = <span class="string">"hello world"</span></span><br><span class="line">print(dir(str1))</span><br><span class="line"></span><br><span class="line"><span class="comment">#capitalize 整个字符串的首字母大写</span></span><br><span class="line">str2 = str1.capitalize()</span><br><span class="line">print(str2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#title 每个单词的首字母大写</span></span><br><span class="line">str3 = str1.title()</span><br><span class="line">print(str3)</span><br><span class="line"></span><br><span class="line"><span class="comment">#upper 所有字母大写</span></span><br><span class="line">str4 = str1.upper()</span><br><span class="line">print(str4)</span><br><span class="line"></span><br><span class="line"><span class="comment">#lower 所有字母小写</span></span><br><span class="line">str5 = str4.lower()</span><br><span class="line">print(str5)</span><br><span class="line"></span><br><span class="line"><span class="comment">#swapcase 大小写互换</span></span><br><span class="line">str6 = str5.swapcase()</span><br><span class="line">print(str6)</span><br><span class="line"></span><br><span class="line"><span class="comment">#count 查询字符在字符串出现的次数,可以自定义查找位置</span></span><br><span class="line">res = str1.count(<span class="string">"o"</span>,<span class="number">0</span>,<span class="number">5</span>)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment">#find 查找某字符出现的位置,默认只查询一个</span></span><br><span class="line">res = str1.find(<span class="string">"o"</span>)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment">#startswith 判断是否以某个字符串开头，可以加区间</span></span><br><span class="line">res = str1.startswith(<span class="string">"o"</span>,<span class="number">4</span>)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment">#endswith 判断是否以某一个字符串借位</span></span><br><span class="line">res = str1.endswith(<span class="string">"d"</span>,<span class="number">4</span>)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment">#isupper 判断是否都是大写字母</span></span><br><span class="line"><span class="comment">#islower</span></span><br><span class="line">res = str1.isupper()</span><br><span class="line">print(res)</span><br><span class="line">res = str1.islower()</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment">#isalnum 判断字符串是否都是由数值，字母，汉字组成</span></span><br><span class="line">str1 = <span class="string">"this中123"</span></span><br><span class="line">res = str1.isalnum()</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment">#isdigit 判断字符串是否由十进制数值组成(这个比较常用)</span></span><br><span class="line"><span class="comment">#isdecimal 判断是否由数值组成de1字符串</span></span><br><span class="line"><span class="comment">#isnumeric 判断是否由数字组成的字符串</span></span><br><span class="line">str1 = <span class="string">"123"</span></span><br><span class="line">res = str1.isdigit()</span><br><span class="line">print(res)</span><br><span class="line">res = str1.isdecimal()</span><br><span class="line">print(res)</span><br><span class="line">res = str1.isnumeric()</span><br><span class="line">print(res)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">isdigit()</span></span><br><span class="line"><span class="string">True: Unicode数字，byte数字（单字节），全角数字（双字节），罗马数字</span></span><br><span class="line"><span class="string">False: 汉字数字</span></span><br><span class="line"><span class="string">Error: 无</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">isdecimal()</span></span><br><span class="line"><span class="string">True: Unicode数字，，全角数字（双字节）</span></span><br><span class="line"><span class="string">False: 罗马数字，汉字数字</span></span><br><span class="line"><span class="string">Error: byte数字（单字节）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">isnumeric()</span></span><br><span class="line"><span class="string">True: Unicode数字，全角数字（双字节），罗马数字，汉字数字</span></span><br><span class="line"><span class="string">False: 无</span></span><br><span class="line"><span class="string">Error: byte数字（单字节）</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment">#isspace 判断字符串是否是由空白符组成</span></span><br><span class="line">str1 = <span class="string">"\n"</span></span><br><span class="line">res = str1.isspace()</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment">#istitle 判断是否每一个字母首字母都大写</span></span><br><span class="line">str1 = <span class="string">"Hello World"</span></span><br><span class="line">res = str1.istitle()</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment">#len 计算字符串的长度</span></span><br><span class="line">res = len(str1)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment">#split 按照指定的字符进行切分，默认按照空格</span></span><br><span class="line">str2 = str1.split(<span class="string">" "</span>)</span><br><span class="line">print(str2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#splitlines 按照换行进行泄愤</span></span><br><span class="line">str1 = <span class="string">"this is \n a \n test"</span></span><br><span class="line">str2 = str1.splitlines()</span><br><span class="line">print(str2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#join 字符串拼接</span></span><br><span class="line">str1 = <span class="string">"@"</span></span><br><span class="line">str2 = <span class="string">"this"</span></span><br><span class="line">str3 = str1.join(str2) <span class="comment">#t@h@i@s</span></span><br><span class="line">print(str3)</span><br><span class="line">str1 = <span class="string">"@"</span></span><br><span class="line">str2 = [<span class="string">"this"</span>,<span class="string">"is"</span>,<span class="string">"a"</span>,<span class="string">"test"</span>]</span><br><span class="line">str3 = str1.join(str2) <span class="comment">#this@is@a@test</span></span><br><span class="line">print(str3)</span><br><span class="line"></span><br><span class="line"><span class="comment">#zfill 填充字符串</span></span><br><span class="line">str1 = <span class="string">"this"</span></span><br><span class="line">str2 = str1.zfill(<span class="number">20</span>)<span class="comment">#0000000000000000this</span></span><br><span class="line">print(str2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#center 用指定字符填充，然后字符串居中</span></span><br><span class="line">str1 = <span class="string">"this"</span></span><br><span class="line">str2 = str1.center(<span class="number">10</span>,<span class="string">"A"</span>) <span class="comment">#AAAthisAAA</span></span><br><span class="line">print(str2)</span><br><span class="line"><span class="comment">#rjust</span></span><br><span class="line">str1 = <span class="string">"this"</span></span><br><span class="line">str2 = str1.rjust(<span class="number">10</span>,<span class="string">"@"</span>) <span class="comment">#@@@@@@this</span></span><br><span class="line">print(str2)</span><br><span class="line"><span class="comment">#ljust</span></span><br><span class="line">str1 = <span class="string">"this"</span></span><br><span class="line">str2 = str1.ljust(<span class="number">10</span>,<span class="string">"@"</span>) <span class="comment">#this@@@@@@</span></span><br><span class="line">print(str2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#strip 取出两头某之丰富</span></span><br><span class="line">str1 = <span class="string">"\nthis\n"</span></span><br><span class="line">str2 = str1.strip()</span><br><span class="line">print(str2)</span><br><span class="line"><span class="comment">#rstrip 从右边去掉某个字符</span></span><br><span class="line">str1 = <span class="string">"\nthis\n"</span></span><br><span class="line">str2 = str1.rstrip()</span><br><span class="line">print(str2)</span><br><span class="line"><span class="comment">#lstrip 从右边去掉某个字符</span></span><br><span class="line">str1 = <span class="string">"\nthis\n"</span></span><br><span class="line">str2 = str1.lstrip()</span><br><span class="line">print(str2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#maketrans 和 translate</span></span><br><span class="line">str1 = <span class="string">"this is test"</span></span><br><span class="line">str2 = str1.maketrans(<span class="string">"t"</span>,<span class="string">"T"</span>) <span class="comment">#制作映射表</span></span><br><span class="line">print(str2)</span><br><span class="line">str3 = str1.translate(str2) <span class="comment">#传入映射表</span></span><br><span class="line">print(str3)</span><br><span class="line"></span><br><span class="line"><span class="comment">#replace 替换 (更加好用)</span></span><br><span class="line">str2 = str1.replace(<span class="string">"t"</span>,<span class="string">"T"</span>,<span class="number">2</span>)</span><br><span class="line">print(str2)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>day 7：函数，字符串切片</title>
    <url>/2020/04/03/day-7%EF%BC%9A%E5%87%BD%E6%95%B0%EF%BC%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%87%E7%89%87/</url>
    <content><![CDATA[<p>##一、不定长参数</p>
<p>全局变量：顶格写的变量，在任何地方都可以使用 局部变量：</p>
<p>在代码组中定义，只能在代码组中使用</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">opration</span><span class="params">(a,b,c,d)</span>:</span></span><br><span class="line">    sum1 = a + b + c + d</span><br><span class="line">    print(sum1)</span><br><span class="line">opration(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用容器作为参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">opration</span><span class="params">(*args)</span>:</span></span><br><span class="line">    sum1 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> var <span class="keyword">in</span> args:</span><br><span class="line">        sum1+=var</span><br><span class="line">    <span class="keyword">return</span> sum1</span><br><span class="line">res = opration(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># * 垃圾回收站，他不能接收关键字参数,不能接收关键字参数</span></span><br><span class="line"><span class="comment">#带* 的参数要放在形参的最后面</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">opration</span><span class="params">(a,b,c,*d)</span>:</span></span><br><span class="line">    print(a)</span><br><span class="line">    print(b)</span><br><span class="line">    print(c)</span><br><span class="line">    print(d)</span><br><span class="line">opration(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># **接收不定长关键字参数,只能放在最后</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">opration</span><span class="params">(a,b,c,d,*args,**kwargs)</span>:</span></span><br><span class="line">    print(a,b,c,d)</span><br><span class="line">    print(args)</span><br><span class="line">    print(kwargs)</span><br><span class="line">opration(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,A = <span class="number">9</span>,B = <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>##二、函数闭包</p>
<p>函数闭包：内部函数调用外部函数的变量（非全局变量， 则称内部函数为闭包 即调用一个函数，返回一个新的函数来，称为闭包</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    num = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span>:</span></span><br><span class="line">        num=<span class="number">2</span></span><br><span class="line">        print(num)</span><br><span class="line">    print(num)</span><br><span class="line">    func1()</span><br><span class="line">    print(num)</span><br><span class="line">func() <span class="comment">#1,2,1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#先return inner这个函数，之后res代表inner，而num1传入了20</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">(num1)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(num2)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> num1 + num2</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line">res = outer(<span class="number">20</span>)</span><br><span class="line">result = res(<span class="number">10</span>)</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line"><span class="comment">#在使用闭包的时候，在内部没有引用的外部变量才可以</span></span><br><span class="line"><span class="comment">#而内部有使用时，代码会运行内部的变量，而导致没定义的报错</span></span><br><span class="line"><span class="comment"># def outer(a):</span></span><br><span class="line"><span class="comment">#     def inner():</span></span><br><span class="line"><span class="comment">#         a = a+1</span></span><br><span class="line"><span class="comment">#         return a</span></span><br><span class="line"><span class="comment">#     return inner</span></span><br><span class="line"><span class="comment"># res = outer(1)</span></span><br><span class="line"><span class="comment"># result = res()</span></span><br><span class="line"><span class="comment"># print(result)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">(a)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        a[<span class="number">0</span>] = a[<span class="number">0</span>]+<span class="number">1</span>   <span class="comment">#使用容器后，并没有定义a，而是对a的一个取值</span></span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line">res = outer([<span class="number">1</span>])</span><br><span class="line">result = res()</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>
<p>##三、字符串和列表的切片</p>
<p>[开始索引:结束索引:间隔] 切片操作(结束索引取不到)</p>
<p>不加结束索引代表从开始索引取到最后</p>
<p>间隔缺省则是1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str1 = <span class="string">"停车坐爱枫林晚，霜叶红于二月花"</span></span><br><span class="line">print(str1[<span class="number">-3</span>],str1[<span class="number">-2</span>],str1[<span class="number">-1</span>])</span><br><span class="line">print(str1[<span class="number">-3</span>:])</span><br><span class="line">print(str1[::<span class="number">2</span>])</span><br><span class="line">print(str1[<span class="number">4</span>:<span class="number">0</span>:<span class="number">-1</span>])</span><br><span class="line">print(str1[::<span class="number">-1</span> ])</span><br><span class="line"></span><br><span class="line">var = range(<span class="number">100</span>)</span><br><span class="line">print(var[<span class="number">25</span>:<span class="number">31</span>])</span><br><span class="line">print(var[<span class="number">70</span>:<span class="number">83</span>:<span class="number">3</span>])</span><br><span class="line">print(var[<span class="number">90</span>:<span class="number">84</span>:<span class="number">-1</span>])</span><br><span class="line">print(var[<span class="number">99</span>:<span class="number">69</span>:<span class="number">-5</span>])</span><br><span class="line">print(var[<span class="number">-10</span>:<span class="number">-30</span>:<span class="number">-2</span>])</span><br><span class="line"></span><br><span class="line">print(var[<span class="number">90</span>:<span class="number">200</span>]) <span class="comment">#a取到90到99</span></span><br><span class="line">print(var[<span class="number">150</span>:<span class="number">200</span>])<span class="comment">#取出来为空。</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>day 9：format操作与数字相关方法</title>
    <url>/2020/04/03/day-9%EF%BC%9Aformat%E6%93%8D%E4%BD%9C%E4%B8%8E%E6%95%B0%E5%AD%97%E7%9B%B8%E5%85%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>##一、format 格式化字符</p>
<p>format 格式化字符 语法：通过{}和：来代替%<br>注意：format可以接受无限个参数，位置也可以不按顺序 参数也可以不使用也可以使用多次，2.6前不能为{}，2.7后可以为空</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str1 = <span class="string">"&#123;&#125; say hello to &#123;&#125;"</span></span><br><span class="line">str2 = str1.format(<span class="string">"jack"</span>,<span class="string">"rose"</span>)</span><br><span class="line">print(str2)</span><br><span class="line"></span><br><span class="line">str1 = <span class="string">"&#123;1&#125; say hello to &#123;0&#125;"</span>   <span class="comment">#可以通过索引改变顺序</span></span><br><span class="line">str2 = str1.format(<span class="string">"jack"</span>,<span class="string">"rose"</span>)</span><br><span class="line">print(str2)</span><br><span class="line"></span><br><span class="line">str1 = <span class="string">"&#123;0[1]&#125; say hello to &#123;0[1]&#125;"</span>   <span class="comment">#可以通过索引改变顺序</span></span><br><span class="line">str2 = str1.format([<span class="string">"jack"</span>,<span class="string">"rose"</span>])</span><br><span class="line">print(str2)</span><br><span class="line"></span><br><span class="line">str1 = <span class="string">"&#123;name&#125; is &#123;age&#125; years old"</span></span><br><span class="line">str2 = str1.format(name = <span class="string">"jack"</span>, age = <span class="string">"19"</span>)</span><br><span class="line">print(str2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#format在网页爬虫中的应用</span></span><br><span class="line">ur1 = <span class="string">"https://study.163.com/category/480000003121024#/?p=&#123;page&#125;"</span></span><br><span class="line">start_page = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> start_page&lt;<span class="number">10</span>:</span><br><span class="line">    ur1.format(page=start_page)</span><br><span class="line">    start_page += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">^ 居中</span></span><br><span class="line"><span class="string">&lt; 左对齐</span></span><br><span class="line"><span class="string">&gt; 右对齐(都比较少用)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">str1 = <span class="string">"this"</span></span><br><span class="line">str2 = <span class="string">"&#123;:@^10&#125;"</span>.format(str1)</span><br><span class="line">print(str2)</span><br><span class="line">str2 = <span class="string">"&#123;:@&lt;20&#125;"</span>.format(str1)</span><br><span class="line">print(str2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#调整精度</span></span><br><span class="line">str1 = <span class="string">"&#123;:.3f&#125;"</span>.format(<span class="number">3.141592</span>)</span><br><span class="line">print(str1)</span><br><span class="line">str1 = <span class="string">"%.2f"</span>%(<span class="number">1.2345</span>)</span><br><span class="line">print(str1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#进制转换</span></span><br><span class="line">str1 = <span class="string">"&#123;:b&#125;"</span>.format(<span class="number">16</span>)</span><br><span class="line">print(str1)</span><br><span class="line">str1 = <span class="string">"&#123;:d&#125;"</span>.format(<span class="number">16</span>)</span><br><span class="line">print(str1)</span><br><span class="line">str1 = <span class="string">"&#123;:o&#125;"</span>.format(<span class="number">16</span>)</span><br><span class="line">print(str1)</span><br><span class="line">str1 = <span class="string">"&#123;:x&#125;"</span>.format(<span class="number">16</span>)</span><br><span class="line">print(str1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#预留符</span></span><br><span class="line">str1 = <span class="string">"&#123;:,&#125;"</span>.format(<span class="number">123415153452</span>)<span class="comment">#123,415,153,452</span></span><br><span class="line">print(str1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#locals 打印所有元素</span></span><br><span class="line">name = <span class="string">"xiaoming"</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    name = <span class="string">"xiaoming"</span></span><br><span class="line">    age = <span class="string">"18"</span></span><br><span class="line">print(locals())</span><br></pre></td></tr></table></figure>
<p>##二、数学相关方法</p>
<p>abs() 绝对值<br>sum() 求和<br>max() 求最大值<br>min() 求最小值<br>pow(2,3,5) 幂运算 第三个参数是幂运算的结果对它取余<br>round() 对一个数值进行四舍五入<br>range(1,10,2) 1到10，间隔2（负号指反过来） </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">5</span>]</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; len(num):</span><br><span class="line">    <span class="keyword">if</span> res &lt; num[i]:</span><br><span class="line">        res = num[i]</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line">print(res)</span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> val <span class="keyword">in</span> num: <span class="comment">#通过for循环进行遍历更加方便</span></span><br><span class="line">    <span class="keyword">if</span> val&gt;res:</span><br><span class="line">        res = val</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

<p>##三、字符相关</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">chr(32) 把ASCII码换成字符</span></span><br><span class="line"><span class="string">ord("A") 把字符转换成ASCII码</span></span><br><span class="line"><span class="string">eval()  把字符串去掉，换成数</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">num = <span class="number">1</span></span><br><span class="line">str1 = <span class="string">"num+1"</span></span><br><span class="line">print(eval(str1)) <span class="comment">#2</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>day12：元祖的操作、字典的操作、文件操作、pickle模块</title>
    <url>/2020/04/03/day12%EF%BC%9A%E5%85%83%E7%A5%96%E7%9A%84%E6%93%8D%E4%BD%9C%E3%80%81%E5%AD%97%E5%85%B8%E7%9A%84%E6%93%8D%E4%BD%9C%E3%80%81%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E3%80%81pickle%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<h2 id="一、元祖遍历"><a href="#一、元祖遍历" class="headerlink" title="一、元祖遍历"></a>一、元祖遍历</h2><h3 id="使用for循环遍历"><a href="#使用for循环遍历" class="headerlink" title="使用for循环遍历"></a>使用for循环遍历</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> t:</span><br><span class="line">    print(var)</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">t = ((<span class="number">1</span>,<span class="number">2</span>),(<span class="number">3</span>,<span class="number">4</span>),(<span class="number">5</span>,<span class="number">6</span>))</span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> t:</span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> var:</span><br><span class="line">        print(val)</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="使用while循环遍历"><a href="#使用while循环遍历" class="headerlink" title="使用while循环遍历"></a>使用while循环遍历</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> i &lt; len(t):</span><br><span class="line">     print(t[i])</span><br><span class="line">     i = i+<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h3 id="元祖的-、"><a href="#元祖的-、" class="headerlink" title="元祖的+、*"></a>元祖的+、*</h3><p>+两个元祖合并，生成新元祖<br>*一个元祖重复输出，生成新元祖</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">t1 = (<span class="number">6</span>,<span class="number">7</span>)</span><br><span class="line">t2 = t + t1</span><br><span class="line">print(t2) <span class="comment">#元祖不能改变</span></span><br><span class="line">t2 = t * <span class="number">3</span></span><br><span class="line">print(t2)</span><br></pre></td></tr></table></figure>

<h2 id="二、元祖常用方法"><a href="#二、元祖常用方法" class="headerlink" title="二、元祖常用方法"></a>二、元祖常用方法</h2><p>由于元祖不能改变，所以其方法也少</p>
<h3 id="1、查询结果-index"><a href="#1、查询结果-index" class="headerlink" title="1、查询结果 index"></a><strong>1、查询结果 index</strong></h3><p>输入下标，返回元素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询结果</span></span><br><span class="line">res = t.index(<span class="number">2</span>)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
<h3 id="2、查询数量-count"><a href="#2、查询数量-count" class="headerlink" title="2、查询数量 count"></a><strong>2、查询数量 count</strong></h3><p>查询输入元素的出现次数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询数量</span></span><br><span class="line">res = t.count(<span class="number">4</span>)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
<h3 id="3、元祖推导式"><a href="#3、元祖推导式" class="headerlink" title="3、元祖推导式"></a><strong>3、元祖推导式</strong></h3><p>产生生成器，可以使用for循环遍历</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">res = (var**<span class="number">2</span> <span class="keyword">for</span> var <span class="keyword">in</span> t)</span><br><span class="line">print(res)      <span class="comment">#generator产生生成器</span></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> res: <span class="comment">#可以通过for、next遍历</span></span><br><span class="line">    print(var)</span><br></pre></td></tr></table></figure>

<h2 id="三、字典的操作"><a href="#三、字典的操作" class="headerlink" title="三、字典的操作"></a>三、字典的操作</h2><h3 id="字典的创建"><a href="#字典的创建" class="headerlink" title="字典的创建"></a><strong>字典的创建</strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">"a"</span>:<span class="number">1</span>,<span class="string">"b"</span>:<span class="number">2</span>,<span class="string">"c"</span>:<span class="number">3</span>&#125;</span><br><span class="line">print(dict1,type(dict1))</span><br><span class="line"></span><br><span class="line">dict2 = dict([[<span class="string">"a"</span>,<span class="number">1</span>],[<span class="string">"b"</span>,<span class="number">2</span>]])<span class="comment">#通过转换实现，少用</span></span><br><span class="line">print(dict2,type(dict2))</span><br><span class="line"></span><br><span class="line">dict3 = dict(&#123;<span class="string">"a"</span>:<span class="number">1</span>,<span class="string">"b"</span>:<span class="number">2</span>,<span class="string">"c"</span>:<span class="number">3</span>&#125;)<span class="comment">#转换，把字典转换成字典</span></span><br><span class="line">print(dict3,type(dict3))</span><br><span class="line"></span><br><span class="line">dict4 = dict(a=<span class="number">1</span>, b=<span class="number">2</span>, c=<span class="number">3</span>)</span><br><span class="line">print(dict4,type(dict4))</span><br><span class="line"></span><br><span class="line">dict5 = dict(zip((<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"e"</span>,<span class="string">"c"</span>),(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)))<span class="comment">#长度不同，以最短的为主</span></span><br><span class="line">print(dict5,type(dict5))</span><br></pre></td></tr></table></figure>
<h3 id="字典的遍历"><a href="#字典的遍历" class="headerlink" title="字典的遍历"></a><strong>字典的遍历</strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> dict5.items():</span><br><span class="line">    print(key,value)</span><br></pre></td></tr></table></figure>

<h2 id="四、字典的内置方法"><a href="#四、字典的内置方法" class="headerlink" title="四、字典的内置方法"></a>四、字典的内置方法</h2><h3 id="1、items-字典转化为类似元祖的方式"><a href="#1、items-字典转化为类似元祖的方式" class="headerlink" title="1、items 字典转化为类似元祖的方式"></a>1、items 字典转化为类似元祖的方式</h3><h3 id="2、keys-将字典所有key组合成一个序列"><a href="#2、keys-将字典所有key组合成一个序列" class="headerlink" title="2、keys    将字典所有key组合成一个序列"></a>2、keys    将字典所有key组合成一个序列</h3><h3 id="3、values-将字典所有value组合成一个序列"><a href="#3、values-将字典所有value组合成一个序列" class="headerlink" title="3、values  将字典所有value组合成一个序列**"></a>3、values  将字典所有value组合成一个序列**</h3><h3 id="4、复制-copy"><a href="#4、复制-copy" class="headerlink" title="4、复制 copy"></a><strong>4、复制 copy</strong></h3><p>copy是浅拷贝，当二级字典发生变化是，拷贝的也会改变</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#复制copy</span></span><br><span class="line">dict1 = &#123;<span class="string">"1"</span>:&#123;<span class="string">"a"</span>:<span class="number">2</span>,<span class="string">"b"</span>:<span class="number">3</span>,<span class="string">"c"</span>:<span class="number">4</span>&#125;&#125;</span><br><span class="line"><span class="comment">#复制copy</span></span><br><span class="line">dict2 = dict1.copy()</span><br><span class="line">print(dict2)</span><br><span class="line">dict1[<span class="string">"1"</span>][<span class="string">"d"</span>] = <span class="number">1</span> <span class="comment">#字典添加</span></span><br><span class="line">print(dict2)        <span class="comment">#在二级字典里的会随之改变</span></span><br><span class="line">print(dict1)</span><br></pre></td></tr></table></figure>
<h3 id="5、get-根据key，返回value"><a href="#5、get-根据key，返回value" class="headerlink" title="5、get 根据key，返回value"></a><strong>5、get 根据key，返回value</strong></h3><p>好处是没有的key，不会报错，而是返回none</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#get 根据key，获取value</span></span><br><span class="line">dict1 = &#123;<span class="string">"a"</span>:<span class="number">1</span>,<span class="string">"b"</span>:<span class="number">2</span>,<span class="string">"c"</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="comment">#res = dict1[1] #如果这里搜索没有的key，报错导致程序结束</span></span><br><span class="line">res = dict1.get(<span class="string">"ab"</span>)</span><br><span class="line">print(res) <span class="comment">#则返回none</span></span><br></pre></td></tr></table></figure>
<h3 id="6、pop-移除指定元素，返回键对应值，popitem-删除最后一个，字典为空，则报错"><a href="#6、pop-移除指定元素，返回键对应值，popitem-删除最后一个，字典为空，则报错" class="headerlink" title="6、pop 移除指定元素，返回键对应值，popitem() 删除最后一个，字典为空，则报错"></a><strong>6、pop 移除指定元素，返回键对应值，popitem() 删除最后一个，字典为空，则报错</strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pop 移除指定元素，返回键对应值</span></span><br><span class="line">res = dict1.pop(<span class="string">"a"</span>,<span class="string">"key is no in here"</span>)<span class="comment">#加上默认值则可以不用报错</span></span><br><span class="line">print(res)</span><br><span class="line">print(dict1)</span><br><span class="line"><span class="comment">#popitem() 删除最后一个，字典为空，则报错</span></span><br><span class="line">dict1 = &#123;<span class="string">"a"</span>:<span class="number">1</span>,<span class="string">"b"</span>:<span class="number">2</span>,<span class="string">"c"</span>:<span class="number">3</span>&#125;</span><br><span class="line">res = dict1.popitem()</span><br><span class="line">print(res)</span><br><span class="line">print(dict1)</span><br></pre></td></tr></table></figure>
<h3 id="7、setdefault-添加一个键，如果存在则不进行操作"><a href="#7、setdefault-添加一个键，如果存在则不进行操作" class="headerlink" title="7、setdefault 添加一个键，如果存在则不进行操作"></a><strong>7、setdefault 添加一个键，如果存在则不进行操作</strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#setdefault 添加一个键，如果存在则不进行操作</span></span><br><span class="line">dict1.setdefault(<span class="string">"cc"</span>,<span class="number">7</span>)</span><br><span class="line">print(dict1)</span><br></pre></td></tr></table></figure>
<h3 id="8、update-没有的键值会添加，已有的会进行更新"><a href="#8、update-没有的键值会添加，已有的会进行更新" class="headerlink" title="8、update 没有的键值会添加，已有的会进行更新"></a><strong>8、update 没有的键值会添加，已有的会进行更新</strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#update</span></span><br><span class="line">dict1.update(&#123;<span class="string">"jj"</span>:<span class="string">"hh"</span>&#125;)</span><br><span class="line">print(dict1)</span><br><span class="line">dict2 = &#123;<span class="string">"d"</span>:<span class="number">5</span>,<span class="string">"e"</span>:<span class="number">5</span>,<span class="string">"ff"</span>:<span class="number">7</span>&#125;</span><br><span class="line">dict1.update(dict2)</span><br><span class="line">print(dict1)    <span class="comment">#没有的键值会添加，已有的会进行更新</span></span><br></pre></td></tr></table></figure>
<h2 id="五、文件操作"><a href="#五、文件操作" class="headerlink" title="五、文件操作"></a>五、文件操作</h2><p>open(file_path,mode)<br>mode 权限：</p>
<h3 id="w-write-写，如果没有这个人间会自动创建一个）"><a href="#w-write-写，如果没有这个人间会自动创建一个）" class="headerlink" title="w(write 写，如果没有这个人间会自动创建一个）"></a><strong>w(write 写，如果没有这个人间会自动创建一个）</strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = open(<span class="string">"user.txt"</span>,<span class="string">"w"</span>)</span><br><span class="line">f.write(<span class="string">"www.python.com"</span>)</span><br><span class="line">f.close()       <span class="comment">#写完之后记得关闭</span></span><br></pre></td></tr></table></figure>

<h3 id="r-read-读：read读取全部、readline读取一行、readlines以行为单位全部读取"><a href="#r-read-读：read读取全部、readline读取一行、readlines以行为单位全部读取" class="headerlink" title="r(read 读：read读取全部、readline读取一行、readlines以行为单位全部读取"></a><strong>r(read 读：read读取全部、readline读取一行、readlines以行为单位全部读取</strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = open(<span class="string">"user.txt"</span>,<span class="string">"r"</span>)</span><br><span class="line"><span class="comment">#content = f.read()</span></span><br><span class="line"><span class="comment">#content = f.readline()</span></span><br><span class="line">content = f.readlines() <span class="comment">#最常用，以行为单位全部读取</span></span><br><span class="line">print(content)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>

<h3 id="a-append-追加，如果没有这个文件则创建一个，如果有则在文件末尾追加"><a href="#a-append-追加，如果没有这个文件则创建一个，如果有则在文件末尾追加" class="headerlink" title="a(append 追加，如果没有这个文件则创建一个，如果有则在文件末尾追加)"></a>a(append 追加，如果没有这个文件则创建一个，如果有则在文件末尾追加)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = open(<span class="string">"user.txt"</span>,<span class="string">"a"</span>)</span><br><span class="line">f.write(<span class="string">"hello"</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>

<h3 id="w-读写权限-会覆盖之前内容（先清空再覆盖"><a href="#w-读写权限-会覆盖之前内容（先清空再覆盖" class="headerlink" title="w+ 读写权限 会覆盖之前内容（先清空再覆盖"></a>w+ 读写权限 会覆盖之前内容（先清空再覆盖</h3><h3 id="r-读写-（不会先清空再覆盖，即没有创建新文件的权限"><a href="#r-读写-（不会先清空再覆盖，即没有创建新文件的权限" class="headerlink" title="r+ 读写  （不会先清空再覆盖，即没有创建新文件的权限"></a>r+ 读写  （不会先清空再覆盖，即没有创建新文件的权限</h3><h3 id="a-读写-（不会清除文件，而是在文件尾部追加）"><a href="#a-读写-（不会清除文件，而是在文件尾部追加）" class="headerlink" title="a+ 读写 （不会清除文件，而是在文件尾部追加）"></a>a+ 读写 （不会清除文件，而是在文件尾部追加）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = open(<span class="string">"user.txt"</span>,<span class="string">"w+"</span>)</span><br><span class="line">f.write(<span class="string">"hello world"</span>)</span><br><span class="line">f.seek(<span class="number">0</span>,<span class="number">0</span>)  <span class="comment">#写操作之后光标会在最末端，导致读取从最末端开始，seek移动光标</span></span><br><span class="line">content = f.read()</span><br><span class="line">print(content)</span><br><span class="line">f.close()</span><br><span class="line">f = open(<span class="string">"user.txt"</span>,<span class="string">"r+"</span>)</span><br><span class="line">f.write(<span class="string">"world"</span>)</span><br><span class="line">f.seek(<span class="number">0</span>,<span class="number">0</span>)  <span class="comment">#写操作之后光标会在最末端，导致读取从最末端开始，seek移动光标</span></span><br><span class="line">content = f.read()</span><br><span class="line">print(content)</span><br><span class="line">f.close()</span><br><span class="line">f = open(<span class="string">"user.txt"</span>,<span class="string">"a+"</span>)</span><br><span class="line">f.write(<span class="string">"world"</span>)</span><br><span class="line">f.seek(<span class="number">0</span>,<span class="number">0</span>)  <span class="comment">#写操作之后光标会在最末端，导致读取从最末端开始，seek移动光标</span></span><br><span class="line">content = f.read()</span><br><span class="line">print(content)</span><br><span class="line">f.close()</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出结果为</span></span><br><span class="line"><span class="string">hello world</span></span><br><span class="line"><span class="string">world world</span></span><br><span class="line"><span class="string">world worldworld</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>
<h3 id="wb-二进制写"><a href="#wb-二进制写" class="headerlink" title="wb 二进制写"></a>wb 二进制写</h3><h3 id="rb-二进制读"><a href="#rb-二进制读" class="headerlink" title="rb 二进制读"></a>rb 二进制读</h3><h3 id="ab-二进制追加写"><a href="#ab-二进制追加写" class="headerlink" title="ab 二进制追加写"></a>ab 二进制追加写</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#二进制模式一般在计算机交互时使用</span></span><br><span class="line">f = open(<span class="string">"user.txt"</span>,<span class="string">"wb"</span>)</span><br><span class="line">f.write(<span class="string">"我好好学习"</span>.encode(<span class="string">"utf-8"</span>))</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">"user.txt"</span>,<span class="string">"rb"</span>)</span><br><span class="line">content = f.read().decode(<span class="string">"utf-8"</span>)</span><br><span class="line">print(content)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过使用errors参数可以不报错，但是会是乱码</span></span><br><span class="line">f = open(<span class="string">"user.txt"</span>,<span class="string">"w"</span>,encoding=<span class="string">"utf-8"</span>)<span class="comment"># binary mode doesn't take an encoding argument</span></span><br><span class="line">f.write(<span class="string">"我好好学习"</span>)</span><br><span class="line">f.close()</span><br><span class="line">f = open(<span class="string">"user.txt"</span>,<span class="string">"r"</span>,encoding=<span class="string">"gbk"</span>,errors=<span class="string">"ignore"</span>)</span><br><span class="line">content = f.read()</span><br><span class="line">print(content)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>
<h3 id="为什么要close"><a href="#为什么要close" class="headerlink" title="为什么要close"></a><strong>为什么要close</strong></h3><p>在write的时候，是写到缓冲区中，而不是直接写进文件，<br>并且，文件不去close会导致文件没有保存，既没有生成</p>
<p>刷新缓冲区的方式：（即把缓冲区的内容写入文件中）<br>    1、缓冲区呗占满了<br>    2、关闭文件时自动刷新<br>    3、程序运行结束<br>    4、手动刷新缓冲区 flush（）</p>
<h3 id="with语法，不用手动关闭文件，执行结束，自动关闭文件"><a href="#with语法，不用手动关闭文件，执行结束，自动关闭文件" class="headerlink" title="with语法，不用手动关闭文件，执行结束，自动关闭文件"></a><strong>with语法，不用手动关闭文件，执行结束，自动关闭文件</strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#with语法，不用手动关闭文件，执行结束，自动关闭文件</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"user.txt"</span>,<span class="string">"w"</span>,encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">"这是一个测试"</span>)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"user.txt"</span>,<span class="string">"r"</span>,encoding=<span class="string">"utf-8"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    content = f.read()</span><br><span class="line">    print(content)</span><br></pre></td></tr></table></figure>

<h2 id="六、pickle模块"><a href="#六、pickle模块" class="headerlink" title="六、pickle模块"></a>六、pickle模块</h2><p>使用前需要导入 import pickle<br>四个函数：<br>dump    （文件用）<br>load<br>dumps        （列表等使用）<br>loads<br>通过使用pickle模块可以方便二进制的数据传输解码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle <span class="comment">#是一个模块需要导入</span></span><br><span class="line">L = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">res = pickle.dumps(L)<span class="comment">#当网络发送时，转换成二进制发送</span></span><br><span class="line">print(res)</span><br><span class="line">con = pickle.loads(res)</span><br><span class="line">print(con)  <span class="comment">#接收时解码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#dump是用于文件操作的</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"user.txt"</span>,<span class="string">"wb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    str = <span class="string">"这是一个测试"</span></span><br><span class="line">    pickle.dump(str,f)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"user.txt"</span>,<span class="string">"rb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    res = pickle.load(f)</span><br><span class="line">    print(res)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>day14：time模块、异常处理、装饰器、主程序调用</title>
    <url>/2020/04/03/day14%EF%BC%9Atime%E6%A8%A1%E5%9D%97%E3%80%81%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E3%80%81%E8%A3%85%E9%A5%B0%E5%99%A8%E3%80%81%E4%B8%BB%E7%A8%8B%E5%BA%8F%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<h2 id="一、time模块"><a href="#一、time模块" class="headerlink" title="一、time模块"></a>一、time模块</h2><p>import time使用前记得import</p>
<h3 id="1、time-time-时间戳"><a href="#1、time-time-时间戳" class="headerlink" title="1、time.time 时间戳"></a>1、time.time 时间戳</h3><p>从1970年1月1日0.0开始到现在过去了多少秒</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#time.time 时间戳</span></span><br><span class="line">res = time.time()<span class="comment">#从1970年1月1日0.0开始到现在过去了多少秒</span></span><br><span class="line">print(<span class="string">"timeis: %s"</span>%res)</span><br><span class="line"><span class="comment">#一般用于计算程序运行时间</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100000</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">resl = time.time()</span><br><span class="line">run = resl - res</span><br><span class="line">print(<span class="string">"runTimeis: %s"</span>%run)</span><br></pre></td></tr></table></figure>
<h3 id="2、time-localtime"><a href="#2、time-localtime" class="headerlink" title="2、time.localtime"></a>2、time.localtime</h3><p>显示时间，有参数时显示1970-1-1零点过去两分钟（东八区会多八小时</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#time.localtime</span></span><br><span class="line">res = time.localtime()</span><br><span class="line">print(res)</span><br><span class="line">res = time.localtime(<span class="number">120</span>)<span class="comment">#1970-1-1零点过去两分钟（东八区会多八小时</span></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
<h3 id="3、time-gmtime世界协调时，会自动减去8小时"><a href="#3、time-gmtime世界协调时，会自动减去8小时" class="headerlink" title="3、time.gmtime世界协调时，会自动减去8小时"></a>3、time.gmtime世界协调时，会自动减去8小时</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#time.gmtime</span></span><br><span class="line">var = time.gmtime() <span class="comment">#utf世界协调时，会自动减去8小时</span></span><br><span class="line">print(var)</span><br></pre></td></tr></table></figure>
<h3 id="4、mktime-结构化一个时间戳"><a href="#4、mktime-结构化一个时间戳" class="headerlink" title="4、mktime 结构化一个时间戳"></a>4、mktime 结构化一个时间戳</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#mktime 结构化一个时间戳</span></span><br><span class="line">res = time.mktime(var)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
<h3 id="5、time-ctime-返回英式时间-time-strtime-时间格式化"><a href="#5、time-ctime-返回英式时间-time-strtime-时间格式化" class="headerlink" title="5、time.ctime 返回英式时间 time.strtime 时间格式化"></a>5、time.ctime 返回英式时间 time.strtime 时间格式化</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#time.ctime 返回英式时间 time.strtime 时间格式化</span></span><br><span class="line">res = time.ctime()</span><br><span class="line">print(res)</span><br><span class="line">res = time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>,time.localtime())</span><br><span class="line">print(res) <span class="comment">#2020-03-11 10:39:31</span></span><br></pre></td></tr></table></figure>
<h3 id="6、time-strptime-结构化时间"><a href="#6、time-strptime-结构化时间" class="headerlink" title="6、time.strptime 结构化时间"></a>6、time.strptime 结构化时间</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#time.strptime 结构化时间</span></span><br><span class="line">var = time.strptime(res,<span class="string">"%Y-%m-%d %X"</span>)</span><br><span class="line">print(var)</span><br></pre></td></tr></table></figure>
<h3 id="7、time-sleep-休眠"><a href="#7、time-sleep-休眠" class="headerlink" title="7、time.sleep 休眠"></a>7、time.sleep 休眠</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#time.sleep</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    print(<span class="string">"yeyeyeye"</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h2 id="二、异常处理"><a href="#二、异常处理" class="headerlink" title="二、异常处理"></a>二、异常处理</h2><p>异常处理<br>try:<br>    可能发生错误的语句<br>except 异常类型:<br>    如果发生异常 那么执行此处的语句</p>
<p>目的：当程序中出现异常后也能继续运行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">异常处理</span></span><br><span class="line"><span class="string">try:</span></span><br><span class="line"><span class="string">    可能发生错误的语句</span></span><br><span class="line"><span class="string">except 异常类型:</span></span><br><span class="line"><span class="string">    如果发生异常 那么执行此处的语句</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">当程序中出现异常后也能继续运行</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="number">1</span>/<span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError <span class="keyword">as</span> e:</span><br><span class="line">    print(e)    <span class="comment">#division by zero</span></span><br><span class="line">    print(<span class="string">"除数不能为0"</span>)</span><br><span class="line"></span><br><span class="line">L = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(L[<span class="number">6</span>])</span><br><span class="line"><span class="keyword">except</span> IndexError <span class="keyword">as</span> e:</span><br><span class="line">    print(e) <span class="comment">#list index out of range</span></span><br><span class="line">print(<span class="string">"1"</span>+<span class="string">"1"</span>)</span><br></pre></td></tr></table></figure>
<p>异常处理<br>try:<br>    可能发生错误的语句<br>except 异常类型:<br>    如果发生异常 那么执行此处的语句<br>else:<br>    没发生异常执行的语句</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">异常处理</span></span><br><span class="line"><span class="string">try:</span></span><br><span class="line"><span class="string">    可能发生错误的语句</span></span><br><span class="line"><span class="string">except 异常类型:</span></span><br><span class="line"><span class="string">    如果发生异常 那么执行此处的语句</span></span><br><span class="line"><span class="string">else:</span></span><br><span class="line"><span class="string">    没发生异常执行的语句</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">L = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(L[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">except</span> IndexError <span class="keyword">as</span> e:</span><br><span class="line">    print(e) <span class="comment">#list index out of range</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"写对了。。。"</span>)</span><br></pre></td></tr></table></figure>
<p>try:<br>    可能异常的语句<br>except 异常信息 as e:<br>    异常处理<br>finally:<br>    无论如何都会运行的语句</p>
<p><strong>文件操作中经常使用finally来关闭文件</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">try:</span></span><br><span class="line"><span class="string">    可能异常的语句</span></span><br><span class="line"><span class="string">except 异常信息 as e:</span></span><br><span class="line"><span class="string">    异常处理</span></span><br><span class="line"><span class="string">finally:</span></span><br><span class="line"><span class="string">    无论如何都会运行的语句</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">文件操作中经常使用finally来关闭文件</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">L = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(L[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">except</span> IndexError <span class="keyword">as</span> e:</span><br><span class="line">    print(e) <span class="comment">#list index out of range</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">"我一定运行"</span>)</span><br></pre></td></tr></table></figure>
<p>所有异常都继承于一个BaseException<br>如果在补货时不知道是什么错，可以<br>except BaseException:<br>一般写Exception就可以了</p>
<p><strong>注意：</strong><br>1，如果已经捕获到异常后，就不会再捕获了<br>2，可以捕获嵌套错误</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">所有异常都继承于一个BaseException</span></span><br><span class="line"><span class="string">如果在补货时不知道是什么错，可以</span></span><br><span class="line"><span class="string">except BaseException:</span></span><br><span class="line"><span class="string">一般写Exception就可以了</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">注意：</span></span><br><span class="line"><span class="string">1，如果已经捕获到异常后，就不会再捕获了</span></span><br><span class="line"><span class="string">2，可以捕获嵌套错误</span></span><br><span class="line"><span class="string">如</span></span><br><span class="line"><span class="string">try:</span></span><br><span class="line"><span class="string">    main()</span></span><br><span class="line"><span class="string">except BaseException:</span></span><br><span class="line"><span class="string">    pass</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">L = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(L[<span class="number">6</span>])</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e) <span class="comment">#list index out of range</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">"我一定运行"</span>)</span><br></pre></td></tr></table></figure>

<h2 id="三、装饰器"><a href="#三、装饰器" class="headerlink" title="三、装饰器"></a>三、装饰器</h2><h3 id="1、装饰器："><a href="#1、装饰器：" class="headerlink" title="1、装饰器："></a>1、装饰器：</h3><p>在不改变原函数的情况下，给这个函数增加一个新功能<br>写接口时会用到<br>实现如下<br><strong>使用装饰器后，调用func() == 调用inner()</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">(fn)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        fn()</span><br><span class="line">        run = time.time() - start</span><br><span class="line">        print(run)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"><span class="meta">@outer #装饰器 是语法糖</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100000</span>):</span><br><span class="line">       <span class="keyword">pass</span></span><br><span class="line">    print(<span class="string">"hello"</span>)</span><br><span class="line">func() <span class="comment">#使用装饰器后，调用func() == 调用inner()</span></span><br></pre></td></tr></table></figure>
<p>运行原理如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(fn)</span>:</span></span><br><span class="line">    start = time.time()</span><br><span class="line">    fn()</span><br><span class="line">    run = time.time() - start</span><br><span class="line">    print(run)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100000</span>):</span><br><span class="line">       <span class="keyword">pass</span></span><br><span class="line">    print(<span class="string">"hello"</span>)</span><br><span class="line">foo(func)</span><br></pre></td></tr></table></figure>
<h3 id="2、当被装饰的函数带参数时"><a href="#2、当被装饰的函数带参数时" class="headerlink" title="2、当被装饰的函数带参数时"></a>2、当被装饰的函数带参数时</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#当被装饰的函数带参数时：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">(fn)</span>:</span>  <span class="comment">#接收被装饰的函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args,**kwargs)</span>:</span> <span class="comment">#接收被装饰的函数的形参</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        fn(*args,**kwargs)</span><br><span class="line">        run = time.time() - start</span><br><span class="line">        print(run)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"><span class="meta">@outer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(name,user,pwd)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100000</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    print(user+<span class="string">"说 得了吧"</span>+name,pwd)</span><br><span class="line">func(<span class="string">"jack"</span>,<span class="string">"rose"</span>,<span class="number">1234</span>)</span><br></pre></td></tr></table></figure>

<h3 id="3、当装饰器需要有参数时"><a href="#3、当装饰器需要有参数时" class="headerlink" title="3、当装饰器需要有参数时"></a>3、当装饰器需要有参数时</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#当装饰器需要有参数时</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">(num)</span>:</span> <span class="comment">#接收装饰器的参数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">middle</span><span class="params">(fn)</span>:</span> <span class="comment">#接收被装饰的函数</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args,**kwargs)</span>:</span> <span class="comment">#接收被装饰的函数的形参</span></span><br><span class="line">            start = time.time()</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">                fn(*args,**kwargs)</span><br><span class="line">            run = time.time() - start</span><br><span class="line">            print(run)</span><br><span class="line">        <span class="keyword">return</span> inner</span><br><span class="line">    <span class="keyword">return</span> middle</span><br><span class="line"><span class="meta">@outer(5)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(name,user,pwd)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100000</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    print(user+<span class="string">"说 得了吧"</span>+name,pwd)</span><br><span class="line">func(<span class="string">"jack"</span>,<span class="string">"rose"</span>,<span class="number">1234</span>)</span><br></pre></td></tr></table></figure>

<h2 id="四、主程序调用"><a href="#四、主程序调用" class="headerlink" title="四、主程序调用"></a>四、主程序调用</h2><p>在py中，可以通过import与from来进行调用，如果想要实现只能在本文件中能实现的功能，不让调用的文件使用的话，可以使用主程序调用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"1111111111"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>: <span class="comment">#加入这句话可以让这下面的语句只能在本文件中调用</span></span><br><span class="line">    print(<span class="string">"hello"</span>)</span><br></pre></td></tr></table></figure>
<p>import与from调用的区别为：from导入要从当前打开的路径开始</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">import</span> 主程序判断</span><br><span class="line"><span class="comment">#输出 1111111111 而没有 hello</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#导入还可以通过from导入，不过要从当前打开的路径开始</span></span><br><span class="line"><span class="keyword">from</span> day14.主程序判断 <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># import *比较少用，会导致明明覆盖问题</span></span><br></pre></td></tr></table></figure>
<p>可以看出，通过if语句判断后，其他文件调用时不会打印hello</p>
<h2 id="五、面试题"><a href="#五、面试题" class="headerlink" title="五、面试题"></a>五、面试题</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#面试题</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x,l=[])</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(x):</span><br><span class="line">        l.append(i * i)</span><br><span class="line">    print(id(l))</span><br><span class="line">    print(l)</span><br><span class="line">f(<span class="number">2</span>)</span><br><span class="line">f(<span class="number">3</span>,[<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>])</span><br><span class="line">f(<span class="number">3</span>)</span><br><span class="line">f(<span class="number">3</span>,[<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[0, 1]</span></span><br><span class="line"><span class="string">[3, 2, 1, 0, 1, 4]</span></span><br><span class="line"><span class="string">[0, 1, 0, 1, 4]</span></span><br><span class="line"><span class="string">[1, 2, 0, 1, 4]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>
<p><strong>可以注意到，当默认参数为空列表的时候，python会开辟一个内存，之后每次当为空列表（即不传值时就会继续使用这个地址(id相同)。所以尽量不要定义空列表的默认参数<br>简单说就是传递一个参数和传递两个参数的内存地址不一样</strong></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>day13：os模块、os.path方法、递归函数</title>
    <url>/2020/04/03/day13%EF%BC%9Aos%E6%A8%A1%E5%9D%97%E3%80%81os-path%E6%96%B9%E6%B3%95%E3%80%81%E9%80%92%E5%BD%92%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="一、os模块"><a href="#一、os模块" class="headerlink" title="一、os模块"></a>一、os模块</h2><p>os是系统自带的模块<br><strong>通过os.来进行使用</strong></p>
<h3 id="1、os-name查询系统名"><a href="#1、os-name查询系统名" class="headerlink" title="1、os.name查询系统名"></a>1、os.name查询系统名</h3><a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = os.name</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
<h3 id="2、os-system调用系统命令"><a href="#2、os-system调用系统命令" class="headerlink" title="2、os.system调用系统命令"></a>2、os.system调用系统命令</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.system(<span class="string">"ipconfig"</span>) <span class="comment">#使用在cmd中可以使用的命令都可以用</span></span><br><span class="line">os.system(<span class="string">"notepad"</span>)</span><br></pre></td></tr></table></figure>
<h3 id="3、os-getcwd-返回当前工作路径"><a href="#3、os-getcwd-返回当前工作路径" class="headerlink" title="3、os.getcwd()返回当前工作路径"></a>3、os.getcwd()返回当前工作路径</h3><p>绝对路径：从盘服开始的<br>相对路径：相对于当前工作路径写出的路径 ../上一级目录</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = os.getcwd()</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
<h3 id="4、os-listdir（）-返回指定目录下的所有文件与文件夹"><a href="#4、os-listdir（）-返回指定目录下的所有文件与文件夹" class="headerlink" title="4、os.listdir（） 返回指定目录下的所有文件与文件夹"></a>4、os.listdir（） 返回指定目录下的所有文件与文件夹</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = os.listdir(<span class="string">"G:\project\pyProject\day13"</span>)</span><br><span class="line">print(res)</span><br><span class="line">res = os.listdir() <span class="comment">#"../" 则返回上一级目录</span></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
<h3 id="5、os-remove-删除指定文件"><a href="#5、os-remove-删除指定文件" class="headerlink" title="5、os.remove 删除指定文件"></a>5、os.remove 删除指定文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.remove(<span class="string">"../txt"</span>)</span><br></pre></td></tr></table></figure>
<h3 id="6、os-mkdir-创建目录-os-makedirs-创建多级目录"><a href="#6、os-mkdir-创建目录-os-makedirs-创建多级目录" class="headerlink" title="6、os.mkdir 创建目录 os.makedirs 创建多级目录"></a>6、os.mkdir 创建目录 os.makedirs 创建多级目录</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.mkdir(<span class="string">"../day14"</span>)</span><br><span class="line">os.makedirs(<span class="string">"../day14/day15/day16"</span>)</span><br></pre></td></tr></table></figure>
<h3 id="7、os-rmdir-删除指定目录"><a href="#7、os-rmdir-删除指定目录" class="headerlink" title="7、os.rmdir 删除指定目录"></a>7、os.rmdir 删除指定目录</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.rmdir(<span class="string">"../day14/day15/day16"</span>) <span class="comment">#删除了day16</span></span><br></pre></td></tr></table></figure>
<h3 id="8、os-removedirs-删除路劲中所有空文件"><a href="#8、os-removedirs-删除路劲中所有空文件" class="headerlink" title="8、os.removedirs 删除路劲中所有空文件"></a>8、os.removedirs 删除路劲中所有空文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.removedirs(<span class="string">"../day14/day15"</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">如果文件夹中有文件不为空，则删除不掉，使用os不行</span></span><br><span class="line"><span class="string">使用shutil可以，shutil.rmtree("../day14")可以直接删除day14及其内部的东西</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>
<h3 id="9、os-chdir-更换工作路径"><a href="#9、os-chdir-更换工作路径" class="headerlink" title="9、os.chdir 更换工作路径"></a>9、os.chdir 更换工作路径</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.chdir(<span class="string">"../day13"</span>)</span><br><span class="line">res = os.getcwd()</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
<h3 id="10、os-rename-更名-注意两个参数都是路径"><a href="#10、os-rename-更名-注意两个参数都是路径" class="headerlink" title="10、os.rename 更名,注意两个参数都是路径"></a>10、os.rename 更名,注意两个参数都是路径</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.rename(<span class="string">"../day10/a.py"</span>,<span class="string">"../day10/b.py"</span>)<span class="comment">#如果不写路径就会改到其他文件夹去导致文件位置改变</span></span><br></pre></td></tr></table></figure>
<h3 id="11、-os-walk-遍历目录下所有目录与文件"><a href="#11、-os-walk-遍历目录下所有目录与文件" class="headerlink" title="11、#os.walk 遍历目录下所有目录与文件"></a>11、#os.walk 遍历目录下所有目录与文件</h3><p>第一个参数：返回一个路径<br>第二个参数：这个路径下所有目录<br>第三个参数：这个路径下所有文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = os.walk(<span class="string">"../"</span>)</span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> res: <span class="comment">#res是生成器</span></span><br><span class="line">    print(var)</span><br></pre></td></tr></table></figure>

<h2 id="二、os-path方法"><a href="#二、os-path方法" class="headerlink" title="二、os.path方法"></a>二、os.path方法</h2><h3 id="1、os-path-abspath将相对路径转化为绝对路径"><a href="#1、os-path-abspath将相对路径转化为绝对路径" class="headerlink" title="1、os.path.abspath将相对路径转化为绝对路径"></a>1、os.path.abspath将相对路径转化为绝对路径</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment">#os.path.abspath</span></span><br><span class="line"><span class="comment">#将相对路径转化为绝对路径</span></span><br><span class="line">res = os.path.abspath(<span class="string">"../day10/b.py"</span>)<span class="comment">#G:\project\pyProject\day10\b\py</span></span><br><span class="line">print(res)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">在window中，文件夹使用\来显示，这样可能是转义字符，要用“\\”</span></span><br><span class="line"><span class="string">最好写成//</span></span><br><span class="line"><span class="string">之后还会遇到这样转换操作 "".replace("\\","/")</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>
<h3 id="2、os-path-split-分割目录和文件名"><a href="#2、os-path-split-分割目录和文件名" class="headerlink" title="2、os.path.split 分割目录和文件名"></a>2、os.path.split 分割目录和文件名</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#os.path.split 分割目录和文件名</span></span><br><span class="line">res = os.path.split(<span class="string">"G:\project\pyProject\day10/b.py"</span>)</span><br><span class="line">print(res) <span class="comment">#('G:\\project\\pyProject\\day10', 'b.py')</span></span><br></pre></td></tr></table></figure>
<h3 id="3、os-path-join-拼接目录和文件名"><a href="#3、os-path-join-拼接目录和文件名" class="headerlink" title="3、os.path.join 拼接目录和文件名"></a>3、os.path.join 拼接目录和文件名</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#os.path.join 拼接目录和文件名</span></span><br><span class="line">res = os.path.join(<span class="string">"G:\\project\\pyProject\\day10"</span>,<span class="string">"b.py"</span>)</span><br><span class="line">print(res) <span class="comment">#G;\project\pyProject\day10\b.py</span></span><br></pre></td></tr></table></figure>
<h3 id="4、os-path-exists-判断一个路径是否存在"><a href="#4、os-path-exists-判断一个路径是否存在" class="headerlink" title="4、os.path.exists 判断一个路径是否存在"></a>4、os.path.exists 判断一个路径是否存在</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#os.path.exists 判断一个路径是否存在</span></span><br><span class="line">res = os.path.exists(<span class="string">"G:\\project\\pyProject\\day10\\b.py"</span>)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
<h3 id="5、os-path-isfile-判断是否是一个文件"><a href="#5、os-path-isfile-判断是否是一个文件" class="headerlink" title="5、os.path.isfile 判断是否是一个文件"></a>5、os.path.isfile 判断是否是一个文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = os.path.isfile(<span class="string">"G:\project\pyProject\day10\\b.py"</span>)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
<h3 id="6、os-path-isdir-判断是否是一个目录"><a href="#6、os-path-isdir-判断是否是一个目录" class="headerlink" title="6、os.path.isdir 判断是否是一个目录"></a>6、os.path.isdir 判断是否是一个目录</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#os.path.isdir 判断是否是一个目录</span></span><br><span class="line">res = os.path.isdir(<span class="string">"G:/project/pyProject/day10"</span>)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
<h3 id="7、os-path-getsize-获取一个文件大小"><a href="#7、os-path-getsize-获取一个文件大小" class="headerlink" title="7、os.path.getsize 获取一个文件大小"></a>7、os.path.getsize 获取一个文件大小</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#os.path.getsize 获取一个文件大小</span></span><br><span class="line">res = os.path.getsize(<span class="string">"G:\project\pyProject\day10\optionOfDict.py"</span>)</span><br><span class="line">print(res) <span class="comment">#1663字节</span></span><br></pre></td></tr></table></figure>

<h2 id="三、递归函数"><a href="#三、递归函数" class="headerlink" title="三、递归函数"></a>三、递归函数</h2><p>递归，自身调用自身 最重要的是找到一个出口<br>好处：精简程序执行中的重复调用<br>例如：</p>
<h3 id="求阶乘"><a href="#求阶乘" class="headerlink" title="求阶乘"></a>求阶乘</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#求阶层 5*4*3*2*1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> func(n<span class="number">-1</span>) * n</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">res = func(4)*5 -&gt; func(3)*4*5 -&gt; func(2)*3*4*5 -&gt; func(1)*2*3*4*5</span></span><br><span class="line"><span class="string">res = 1*2*3*4*5</span></span><br><span class="line"><span class="string">注意</span></span><br><span class="line"><span class="string">每调用一次函数就会增加一层栈帧 没计算一次就会少一层栈帧</span></span><br><span class="line"><span class="string">栈帧超过999就会报错</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">res = func(<span class="number">5</span>) <span class="comment">#999报错，超出了递归的最大范围</span></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
<p>为了防止栈溢出报错，我们需要引用尾递归方法<br>遗憾的是python目前没有对尾递归进行优化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#尾递归</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> fact_iter(n,<span class="number">1</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact_iter</span><span class="params">(num,product)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> product</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fact_iter(num<span class="number">-1</span>,product*num)</span><br><span class="line"><span class="comment"># fact_iter(4,5)</span></span><br><span class="line"><span class="comment"># fact_iter(3,20)</span></span><br><span class="line"><span class="comment"># fact_iter(2.60)</span></span><br><span class="line"><span class="comment"># fact_iter(1,120)</span></span><br><span class="line"><span class="comment"># product = 120</span></span><br><span class="line">print(fact(<span class="number">5</span>))</span><br></pre></td></tr></table></figure>
<h3 id="计算斐波那契额数列"><a href="#计算斐波那契额数列" class="headerlink" title="计算斐波那契额数列"></a><strong>计算斐波那契额数列</strong></h3><p>1、1、2、3、5、8、13、21、34、、、n</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funcFBNQ</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">1</span> <span class="keyword">or</span> n==<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span>  funcFBNQ(n<span class="number">-2</span>) + funcFBNQ(n<span class="number">-1</span>)</span><br><span class="line"><span class="comment">#这个数为前两个数加前一个数</span></span><br><span class="line">print(funcFBNQ(<span class="number">10</span>))</span><br></pre></td></tr></table></figure>
<h3 id="汉诺塔游戏"><a href="#汉诺塔游戏" class="headerlink" title="汉诺塔游戏"></a><strong>汉诺塔游戏</strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funcHNT</span><span class="params">(n,a,b,c)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">        print(a,<span class="string">"--&gt;"</span>,c)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        funcHNT(n<span class="number">-1</span>,a,c,b)</span><br><span class="line">        print(a,<span class="string">"--&gt;"</span>,c)</span><br><span class="line">        funcHNT(n<span class="number">-1</span>,b,a,c)</span><br><span class="line">funcHNT(<span class="number">3</span>,<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>)</span><br></pre></td></tr></table></figure>

<h2 id="四、超市小练习"><a href="#四、超市小练习" class="headerlink" title="四、超市小练习"></a>四、超市小练习</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding: utf-8 -*-"</span></span><br><span class="line">shop_list = [[<span class="string">"健力宝"</span>,<span class="number">5.6</span>],[<span class="string">"加多宝"</span>,<span class="number">10</span>],[<span class="string">"QQ星"</span>,<span class="number">50</span>],[<span class="string">"动脉"</span>,<span class="number">100</span>]]</span><br><span class="line">buy_list = []</span><br><span class="line">prise = <span class="number">0</span></span><br><span class="line">print(<span class="string">"====================宝昌面包====================="</span>)</span><br><span class="line"><span class="keyword">for</span> num,shop <span class="keyword">in</span> enumerate(shop_list):</span><br><span class="line">    print(num,shop[<span class="number">0</span>],shop[<span class="number">1</span>])</span><br><span class="line">print(<span class="string">"按0退出系统"</span>)</span><br><span class="line">print(<span class="string">"================================================="</span>)</span><br><span class="line"></span><br><span class="line">salary = int(input(<span class="string">"请输入你有多少salary："</span>))</span><br><span class="line"><span class="keyword">if</span> salary &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        buyNum = int(input(<span class="string">"请输入你要买的商品："</span>))</span><br><span class="line">        <span class="keyword">if</span> buyNum == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> salary &gt;= shop_list[buyNum<span class="number">-1</span>][<span class="number">1</span>]:</span><br><span class="line">            print(<span class="string">"购买成功"</span>)</span><br><span class="line">            salary -= shop_list[buyNum<span class="number">-1</span>][<span class="number">1</span>]</span><br><span class="line">            prise += shop_list[buyNum<span class="number">-1</span>][<span class="number">1</span>]</span><br><span class="line">            buy_list.append(shop_list[buyNum<span class="number">-1</span>][<span class="number">0</span>])</span><br><span class="line">            print(<span class="string">"感谢购买，消费%s，余额%s"</span> %(shop_list[buyNum<span class="number">-1</span>][<span class="number">1</span>],salary))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"无法购买，穷逼"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"清先充钱"</span>)</span><br><span class="line">print(<span class="string">"购买清单为："</span>)</span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> buy_list:</span><br><span class="line">    print(var)</span><br><span class="line">print(<span class="string">"感谢使用"</span>)</span><br></pre></td></tr></table></figure>

<h3 id="路径中有中文报错时，在文件头加上即可-coding-utf-8"><a href="#路径中有中文报错时，在文件头加上即可-coding-utf-8" class="headerlink" title="路径中有中文报错时，在文件头加上即可 #-- coding: utf-8 --"></a><strong>路径中有中文报错时，在文件头加上即可 #-<em>- coding: utf-8 -</em>-</strong></h3>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>day15：面向对象</title>
    <url>/2020/04/03/day15%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h2 id="一、面向对象"><a href="#一、面向对象" class="headerlink" title="一、面向对象"></a>一、面向对象</h2><p>面向对象，更加注重过程的编程方法<br>面向对象三大特性：封装，继承，多态<br>py中所有的类都继承与一个父类</p>
<a id="more"></a>
<h3 id="1、使用class建立类"><a href="#1、使用class建立类" class="headerlink" title="1、使用class建立类"></a>1、使用class建立类</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#class 类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">   <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>给类加入属性：<br>    #属性<br>    name = “js”<br>    age = 18<br>    hair = “black”<br>给类加入方法：<br>   def tell(self)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#class 类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="comment">#属性</span></span><br><span class="line">    name = <span class="string">"js"</span></span><br><span class="line">    age = <span class="number">18</span></span><br><span class="line">    hair = <span class="string">"black"</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#方法 self：谁调用就是谁</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tell</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"my name is %s,age %s,hair is %s"</span>%(self.name,self.age,self.hair))</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<h3 id="2、实例化对象"><a href="#2、实例化对象" class="headerlink" title="2、实例化对象"></a>2、实例化对象</h3><p>使用 类名() 表示实例化一个对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = Person()</span><br><span class="line">print(p.name)</span><br><span class="line">p.tell()</span><br></pre></td></tr></table></figure>
<h3 id="3、使用构造方法"><a href="#3、使用构造方法" class="headerlink" title="3、使用构造方法"></a>3、使用构造方法</h3><p>构造方法能够在实例化时就初始化实例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#class 类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="comment">#属性</span></span><br><span class="line">    name = <span class="string">"js"</span></span><br><span class="line">    age = <span class="number">18</span></span><br><span class="line">    hair = <span class="string">"black"</span></span><br><span class="line">    <span class="comment">#构造方法：在实例化的时候自动调用</span></span><br><span class="line">    <span class="comment">#如果定义了构造器则没有默认的缺省的构造器了</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">    <span class="comment">#方法 self：谁调用就是谁</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tell</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"my name is %s,age %s,hair is %s"</span>%(self.name,self.age,self.hair))</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment">#类名() 表示实例化一个对象</span></span><br><span class="line">p = Person(<span class="string">"js"</span>,<span class="number">18</span>)</span><br><span class="line">p.tell()</span><br><span class="line">p1 = Person(<span class="string">"LY"</span>,<span class="number">14</span>)</span><br><span class="line">p1.tell()</span><br></pre></td></tr></table></figure>
<h3 id="4、访问原来的属性"><a href="#4、访问原来的属性" class="headerlink" title="4、访问原来的属性"></a>4、访问原来的属性</h3><p>可以通过Person.来进行访问</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#访问原来属性：</span></span><br><span class="line">print(Person.name)</span><br><span class="line">print(Person.age)</span><br><span class="line">Person.tell(p1) <span class="comment">#self可以传入实例</span></span><br></pre></td></tr></table></figure>
<p>注意：<br>可以看出，类中与实例中属性不同。<br>当调用传入参数中没有的属性时，对调用类属性</p>
<h3 id="5、析构函数"><a href="#5、析构函数" class="headerlink" title="5、析构函数"></a>5、析构函数</h3><p>当实例被回收时自动调用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">    <span class="comment">#析构函数，当实例被回收时自动调用</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"析构函数调用"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tell</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"mtname is %s,age %s"</span>%(self.name,self.age))</span><br><span class="line"></span><br><span class="line">p = Person(<span class="string">"sj"</span>,<span class="number">18</span>)</span><br><span class="line">p.tell()</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">当程序结束时，析构函数就会调用</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="6、使用私有属性、私有方法"><a href="#6、使用私有属性、私有方法" class="headerlink" title="6、使用私有属性、私有方法"></a>6、使用私有属性、私有方法</h3><p>通过__ 就可以设置私有属性和私有方法：例如<br>__name<br>def __setName(self,name):</p>
<p>设置了私有之后，只能通过公有来调用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">        <span class="comment">#加两个下划线表示私有属性，不能直接被外部访问</span></span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__age = age</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getAge</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span>  self.__age</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setAge</span><span class="params">(self,age)</span>:</span></span><br><span class="line">        self.__age = age</span><br><span class="line">    <span class="comment">#可以设置私有方法，同理，只能通过公用方法调用</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setName</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        self.__name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setNamePass</span><span class="params">(self)</span>:</span></span><br><span class="line">        pwd = <span class="number">123</span></span><br><span class="line">        res = int(input(<span class="string">"请输入密码："</span>))</span><br><span class="line">        <span class="keyword">if</span> res == pwd:</span><br><span class="line">            self.__setName(<span class="string">"haha修改成功"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"pass word error"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tell</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"mtname is %s,age %s"</span>%(self.__name,self.__age))</span><br><span class="line"></span><br><span class="line">p = Person(<span class="string">"sj"</span>,<span class="number">18</span>)</span><br><span class="line">p.tell()</span><br><span class="line">print(p.getAge())</span><br><span class="line">p.setAge(<span class="number">10</span>)</span><br><span class="line">p.tell() <span class="comment">#可以看出修改成功</span></span><br><span class="line"></span><br><span class="line">p.setNamePass()</span><br><span class="line">p.tell()</span><br></pre></td></tr></table></figure>

<h3 id="7、继承、重写、拓展"><a href="#7、继承、重写、拓展" class="headerlink" title="7、继承、重写、拓展"></a>7、继承、重写、拓展</h3><p>继承，括号内填写父类,这样就能够拥有父类的方法属性，减少重复工作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#继承，括号内填写父类,如</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MtList</span><span class="params">(list)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>在继承中，经常引用其他文件中的类<br>通过 if <strong>name</strong> == ‘<strong>main</strong>‘ 可以只导入功能，在继承时十分常用</p>
<p>一个小练习如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> day15.面向对象 <span class="keyword">import</span> Person</span><br><span class="line"><span class="comment">#通过 if __name__ == '__main__' 可以只导入功能，</span></span><br><span class="line">p = Person(<span class="string">"LS"</span>,<span class="number">18</span>)</span><br><span class="line">p.tell()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Basterd</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="comment">#方法拓展，在保留父类方法时拓展</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age,badhobby)</span>:</span></span><br><span class="line">        super().__init__(name,age)</span><br><span class="line">        self.badhobby = badhobby</span><br><span class="line">    <span class="comment">#方法重写，完全覆盖父类方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tell</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"我叫%s，age %s，我爱%s"</span>%(self.name,self.age,self.badhobby))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">建立一个坏弹类，</span></span><br><span class="line"><span class="string">坏蛋是一个人，</span></span><br><span class="line"><span class="string">坏蛋有他特殊的属性与发方法</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p = Basterd(<span class="string">"ly"</span>,<span class="number">18</span>,<span class="string">"打架"</span>)</span><br><span class="line">    p.tell()</span><br></pre></td></tr></table></figure>
<p>其中，<strong>init</strong>()用到了拓展，<br>tell()则是直接覆盖了</p>
<h3 id="8、小练习"><a href="#8、小练习" class="headerlink" title="8、小练习"></a>8、小练习</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clip</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,bullet)</span>:</span></span><br><span class="line">        self.bullet = bullet</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gun</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,clip)</span>:</span></span><br><span class="line">        self.clip = clip</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fier</span><span class="params">(self,n)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.clip.bullet &gt; n:</span><br><span class="line">            self.clip.bullet -= n</span><br><span class="line">            print(<span class="string">"开枪；还剩%s发子弹"</span>%(self.clip.bullet))</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">                print(<span class="string">"tu~"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"子弹不够啦，上子弹啊！"</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,gun)</span>:</span></span><br><span class="line">        self.gun = gun</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fill</span><span class="params">(self,n)</span>:</span></span><br><span class="line">        self.gun.clip.bullet += n</span><br><span class="line">        print(<span class="string">"上弹成功，还有%s发"</span>%(self.gun.clip.bullet))</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> day15.clip <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> day15.gun <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> day15.Person <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = Clip(<span class="number">10</span>)</span><br><span class="line">g = Gun(c)</span><br><span class="line">p = Person(g)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    p.gun.fier(<span class="number">3</span>)</span><br><span class="line">p.fill(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    p.gun.fier(<span class="number">3</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">运行效果</span></span><br><span class="line"><span class="string">开枪；还剩7发子弹</span></span><br><span class="line"><span class="string">tu~</span></span><br><span class="line"><span class="string">tu~</span></span><br><span class="line"><span class="string">tu~</span></span><br><span class="line"><span class="string">开枪；还剩4发子弹</span></span><br><span class="line"><span class="string">tu~</span></span><br><span class="line"><span class="string">tu~</span></span><br><span class="line"><span class="string">tu~</span></span><br><span class="line"><span class="string">开枪；还剩1发子弹</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>day1：python的常用命名方式、语句分类、变量使用</title>
    <url>/2020/04/03/day1%EF%BC%9Apython%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E5%90%8D%E6%96%B9%E5%BC%8F%E3%80%81%E8%AF%AD%E5%8F%A5%E5%88%86%E7%B1%BB%E3%80%81%E5%8F%98%E9%87%8F%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>##一、python文件命名方式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#常常使用驼峰命名法或者是下划线分割法</span></span><br><span class="line"><span class="comment">#并且不能使用关键字</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#文件名：使用中文不会报错，除了第一天的代码，第二天开始都不要使用中文</span></span><br><span class="line">    <span class="comment">#1.可以使用中文</span></span><br><span class="line">    <span class="comment">#2.可以使用数字但是不要全部是数字</span></span><br><span class="line">    <span class="comment">#3.可以使用_或者-等分割字符分割</span></span><br><span class="line">    <span class="comment">#4,文件名要有描述性</span></span><br><span class="line">    <span class="comment">#5.不要和系统关键字冲突</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># python后缀文件</span></span><br><span class="line"><span class="comment">#.py    经常使用的脚本文件</span></span><br><span class="line"><span class="comment">#.pyc   临时文件</span></span><br><span class="line"><span class="comment">#.pyw   开发纯图形化界面程序的文件</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>##二、python语句分分类、注释的使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#注释：</span></span><br><span class="line"><span class="comment">#单行注释使用#</span></span><br><span class="line"><span class="comment">#多行注释使用</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">这样里边的内容都是注释</span></span><br><span class="line"><span class="string">我是多行注释，在run的时候不会执行里边的内容</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#语句分类：</span></span><br><span class="line"><span class="comment">#单行语句、代码块</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"oaoaoaoaoaoaoaoao sdadfasfsa"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#代码组</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">1</span>:</span><br><span class="line">    print(<span class="string">"true"</span>)</span><br><span class="line">    print(<span class="string">"我是真"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 变量看做是一个容器</span></span><br><span class="line"><span class="comment"># a = "hello word"</span></span><br><span class="line"><span class="comment"># print(a)</span></span><br><span class="line"><span class="comment"># print("a")#print会自己换行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用ctrl+？可以实现多行注释，</span></span><br></pre></td></tr></table></figure>
<p>##三、变量的命名方式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">    <span class="comment">#1、python3版本支持中文命名，一般不用</span></span><br><span class="line">    <span class="comment">#2、只能以数字，字母下划线组成，</span></span><br><span class="line">    <span class="comment">#3、数字不能作为开头</span></span><br><span class="line">    <span class="comment">#4、下划线作为开头是由特殊意义的，__私有，代表了集成式的继承特性</span></span><br><span class="line">    <span class="comment">#5、python严格区分大小写</span></span><br><span class="line">    <span class="comment">#6、变量命名需要有描述性</span></span><br><span class="line">    <span class="comment">#7、不能与关键字冲突</span></span><br><span class="line"></span><br><span class="line">age1=<span class="number">18</span></span><br><span class="line">age2=<span class="number">18</span></span><br><span class="line">age3=<span class="number">18</span></span><br><span class="line">print(age1,id(age1))</span><br><span class="line">print(age2,id(age2))</span><br><span class="line">print(age3,id(age3))</span><br><span class="line">age1=age2=age3=<span class="number">18</span></span><br><span class="line">print(age1,id(age1))</span><br><span class="line">print(age2,id(age2))</span><br><span class="line">print(age3,id(age3))</span><br><span class="line"><span class="comment">#-5，会优先去看内存中是否有，如果有，那么地址就是一样的</span></span><br><span class="line"></span><br><span class="line">name,age,sex=<span class="string">"name"</span>,<span class="number">18</span>,<span class="string">"women"</span>  <span class="comment">#变量可以对应接收</span></span><br><span class="line">print(name)</span><br><span class="line">print(age)</span><br><span class="line">print(sex)</span><br><span class="line"></span><br><span class="line">a,*b,c=<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>  <span class="comment">#b,看做一个垃圾站，接收所有没人要的值，取成首地址，看成数组</span></span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure>
<p>##四、系统默认有6个基本类型<br>    1、Number    类型<br>        int<br>        float<br>            3.141526535<br>        bool<br>            True<br>            False<br>        complex 复数（由实部+虚部组成）<br>            a=实数+虚数（j）  1+1i<br>    2、string    字符型<br>        单引号定义   ‘’<br>        双引号定义   “”<br>        三引号<br>        #转义字符<br>    3、list      列表型<br>        a = [1,2,3]<br>    4、tuple     元组型<br>        a = (1,2,3)<br>        a = ()#空元组<br>    5、dict      字典型<br>        有映射关系的无序的数据组合<br>        有空字典<br>        a = {“a”:1,”b”:2,”c”:3}<br>    6、set       集合型<br>        一组特定数据的无序集合，所有数据不会重复<br>        a = {1,2,3,4,5}</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>day16：army小练习、@property、动态添加属性和方法、限制添加属性、__repr__和__str__、类方法和静态方法</title>
    <url>/2020/04/03/day16%EF%BC%9Aarmy%E5%B0%8F%E7%BB%83%E4%B9%A0%E3%80%81-property%E3%80%81%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95%E3%80%81%E9%99%90%E5%88%B6%E6%B7%BB%E5%8A%A0%E5%B1%9E%E6%80%A7%E3%80%81-repr-%E5%92%8C-str-%E3%80%81%E7%B1%BB%E6%96%B9%E6%B3%95%E5%92%8C%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="一、army小练习"><a href="#一、army小练习" class="headerlink" title="一、army小练习"></a>一、army小练习</h2><p>使用面向对象，实现army练习<br>创建一支军队：骑兵、法师、弓箭手<br>将军可以下达命令指挥军队</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">创建一支军队：骑兵、法师、弓箭手</span></span><br><span class="line"><span class="string">将军可以指挥军队下达命令</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cavalry</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">attack</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"My iron rides on you!"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">defend</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"cavalry defend!"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Archer</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">attack</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"My arrow is extremely accurate!"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">defend</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"archer defend!"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Magician</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">attack</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"My magic is infinite!"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">defend</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"magician defend!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    army = []</span><br><span class="line">    c = Cavalry()</span><br><span class="line">    m = Magician()</span><br><span class="line">    a = Archer()</span><br><span class="line"></span><br><span class="line">    army.append(c)</span><br><span class="line">    army.append(a)</span><br><span class="line">    army.append(m)</span><br><span class="line"></span><br><span class="line">    order = input(<span class="string">"please order the army:"</span>)</span><br><span class="line">    <span class="keyword">if</span> order == <span class="string">"attack"</span>:</span><br><span class="line">        <span class="keyword">for</span> var <span class="keyword">in</span> army:</span><br><span class="line">            var.attack()</span><br><span class="line">    <span class="keyword">elif</span> order == <span class="string">"defend"</span>:</span><br><span class="line">        <span class="keyword">for</span> var <span class="keyword">in</span> army:</span><br><span class="line">            var.defend()</span><br><span class="line">    <span class="keyword">elif</span> order == <span class="string">"flatten it"</span>:</span><br><span class="line">        <span class="keyword">for</span> var <span class="keyword">in</span> army:</span><br><span class="line">            <span class="keyword">if</span> isinstance(var,Cavalry):</span><br><span class="line">                var.attack()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                var.defend()</span><br><span class="line">    <span class="keyword">elif</span> order == <span class="string">"shoot it"</span>:</span><br><span class="line">        <span class="keyword">for</span> var <span class="keyword">in</span> army:</span><br><span class="line">            <span class="keyword">if</span> isinstance(var,Archer):</span><br><span class="line">                var.attack()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                var.defend()</span><br><span class="line">    <span class="keyword">elif</span> order == <span class="string">"magic it"</span>:</span><br><span class="line">        <span class="keyword">for</span> var <span class="keyword">in</span> army:</span><br><span class="line">            <span class="keyword">if</span> isinstance(var,Magician):</span><br><span class="line">                var.attack()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                var.defend()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"The wind is too hard to hear the order!"</span>)</span><br></pre></td></tr></table></figure>
<p><strong>运行效果</strong><br>please order the army:magic it<br>cavalry defend!<br>archer defend!<br>My magic is infinite!</p>
<h2 id="二、-property"><a href="#二、-property" class="headerlink" title="二、@property"></a>二、@property</h2><p>把一个方法当做属性来用<br>例如在方法前加上@property<br>会导致私有属性去私有化</p>
<p>使用@age.setter注意，三个age，必须是相同的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#把一个方法当做属性来用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,n,age)</span>:</span></span><br><span class="line">        self.name = n</span><br><span class="line">        self.__age = age</span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__age</span><br><span class="line"><span class="meta">    @age.setter #注意，三个age，必须是相同的</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self,n)</span>:</span></span><br><span class="line">        self.__age = n</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p = Person(<span class="string">"小红"</span>,<span class="number">18</span>)</span><br><span class="line">    print(p.name)</span><br><span class="line">    <span class="comment">#通过property可以像属性一样使用</span></span><br><span class="line">    p.age = <span class="number">21</span></span><br><span class="line">    print(p.age) <span class="comment">#导致私有属性去私有化</span></span><br></pre></td></tr></table></figure>

<h2 id="三、动态添加属性和方法"><a href="#三、动态添加属性和方法" class="headerlink" title="三、动态添加属性和方法"></a>三、动态添加属性和方法</h2><p><strong>动态添加属性</strong>：类内没有的属性，可以直接添加</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#动态添加属性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tell</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(<span class="string">"my name is %s"</span>%self.name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p = Person()</span><br><span class="line">    <span class="comment">#动态添加一个属性给当前实例,仅限于当前实例访问，其他实例不可以访问</span></span><br><span class="line">    p.name = <span class="string">"js"</span></span><br><span class="line">    print(p.name)</span><br></pre></td></tr></table></figure>
<p><strong>动态添加方法</strong>：<br>需要引用from types import MethodType<br>可以将一个类外的函数绑定给对象<br>tell是要绑定的函数，p是函数绑定到被指定的实例<br>    p.speak = MethodType(tell,p)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#可以把一个方法动态的添加</span></span><br><span class="line"><span class="keyword">from</span> types <span class="keyword">import</span> MethodType</span><br><span class="line"></span><br><span class="line"><span class="comment">#动态添加属性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tell</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(<span class="string">"my name is %s"</span>%self.name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p = Person()</span><br><span class="line">    <span class="comment">#动态添加一个属性给当前实例,仅限于当前实例访问，其他实例不可以访问</span></span><br><span class="line">    p.name = <span class="string">"js"</span></span><br><span class="line">    print(p.name)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#动态添加方法</span></span><br><span class="line">    <span class="comment">#tell是要绑定的函数，p是函数绑定到被指定的实例</span></span><br><span class="line">    p.speak = MethodType(tell,p)</span><br><span class="line">    p.speak()</span><br></pre></td></tr></table></figure>

<h2 id="四、限制添加属性"><a href="#四、限制添加属性" class="headerlink" title="四、限制添加属性"></a>四、限制添加属性</h2><p>在类内添加<strong>slots</strong> = (“name”,)<br>可以现在添加属性，注意这里是元祖。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="comment">#限制添加属性</span></span><br><span class="line">    __slots__ = (<span class="string">"name"</span>,) <span class="comment">#注意这里是元祖，就算只有一个元素也必须要添加逗号</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p = Person(<span class="string">"js"</span>,<span class="number">11</span>) <span class="comment">#AttributeError: 'Person' object has no attribute 'age'</span></span><br></pre></td></tr></table></figure>

<h2 id="五、repr和str"><a href="#五、repr和str" class="headerlink" title="五、repr和str"></a>五、<strong>repr</strong>和<strong>str</strong></h2><p>当调用print打印实例的时候，才会调用str<br>而repr在文件交互模式下输入实例，按下回车的时候会自动调用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name = <span class="string">"jack"</span>,age = <span class="number">19</span>)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestStr</span><span class="params">(Test)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span><span class="comment">#当str不存在的时候，repr=str</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"__repr__: %s,%s"</span>%(self.name,self.age)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"__str__: %s,%s"</span>%(self.name,self.age)</span><br><span class="line"></span><br><span class="line">t = TestStr()</span><br><span class="line">print(t.name)</span><br><span class="line">print(t) <span class="comment">#当调用print打印实例的时候，才会调用str</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#而repr在文件交互模式下输入实例，按下回车的时候会自动调用</span></span><br></pre></td></tr></table></figure>

<h2 id="六、类方法和静态方法"><a href="#六、类方法和静态方法" class="headerlink" title="六、类方法和静态方法"></a>六、类方法和静态方法</h2><p>它们都可以直接通过类名来调用<br><strong>在写接口的时候，会使用这样的方法，这样就不用一直创建实例来调用le</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="comment">#类属性</span></span><br><span class="line">    name = <span class="string">"jeck"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tell</span><span class="params">(self)</span>:</span> <span class="comment">#self 接收的是rose</span></span><br><span class="line">        print(self.name)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(cls)</span>:</span>   <span class="comment">#cls接收类，打印类属性</span></span><br><span class="line">        print(cls.name)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span><span class="params">()</span>:</span>     <span class="comment">#</span></span><br><span class="line">        print(Person.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p = Person(<span class="string">"rose"</span>)</span><br><span class="line">    p.tell()    <span class="comment">#rose</span></span><br><span class="line">    p.say()     <span class="comment">#jeck</span></span><br><span class="line">    p.talk()    <span class="comment">#jeck</span></span><br><span class="line"></span><br><span class="line">    Person.tell(p)  <span class="comment">#rose 这种写法不实用</span></span><br><span class="line">    Person.say()    <span class="comment">#jeck</span></span><br><span class="line">    Person.talk()   <span class="comment">#jeck</span></span><br></pre></td></tr></table></figure>
<p><strong>练习</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Date</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,year = <span class="number">0</span>,month = <span class="number">0</span>,day = <span class="number">0</span>)</span>:</span></span><br><span class="line">        self.year = year</span><br><span class="line">        self.month = month</span><br><span class="line">        self.day = day</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.year,self.month,self.day)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_date</span><span class="params">(string_date)</span>:</span></span><br><span class="line">        year, month, day = string_date.split(<span class="string">"-"</span>)</span><br><span class="line">        date1 = Date(year,month,day) <span class="comment">#这里必须为类名，如果类名变化，也需要变化</span></span><br><span class="line">        <span class="keyword">return</span> date1</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_dateL</span><span class="params">(cls,string_date)</span>:</span></span><br><span class="line">        year, month, day = string_date.split(<span class="string">"-"</span>)</span><br><span class="line">        date1 = cls(year, month, day) <span class="comment">#这里为cls而不是类名，可以随意修改类名</span></span><br><span class="line">        <span class="keyword">return</span> date1</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    假设用户输入2020-3-13</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    t = Date.get_date(<span class="string">"2020-3-13"</span>)</span><br><span class="line">    t.show()</span><br><span class="line">    t = Date.get_dateL(<span class="string">"2020-3-13"</span>)</span><br><span class="line">    t.show()</span><br></pre></td></tr></table></figure>
<p>注意：当需要对输入进行分割用split</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>day17：高阶函数：map、reduce、sorted、fliter、lambda</title>
    <url>/2020/04/03/day17%EF%BC%9A%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%EF%BC%9Amap%E3%80%81reduce%E3%80%81sorted%E3%80%81fliter%E3%80%81lambda/</url>
    <content><![CDATA[<h2 id="一、map"><a href="#一、map" class="headerlink" title="一、map"></a>一、map</h2><p>map(fn,lsd)<br>fn: 可以是自己写的，也可以是系统自带的<br>lsd:  一个序列<br>功能：把lsd中每一个元素分别作用在fn上</p>
<p>例如：字符串列表变为int列表</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">map(fn,lsd)</span></span><br><span class="line"><span class="string">fn: 可以是自己写的，也可以是系统自带的</span></span><br><span class="line"><span class="string">lsd:  一个序列</span></span><br><span class="line"><span class="string">功能：把lsd中每一个元素分别作用在fn上</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment">#比如变为int列表</span></span><br><span class="line">L = [<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>]</span><br><span class="line">L1 = []</span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> L:</span><br><span class="line">    L1.append(int(var))</span><br><span class="line">print(L1)</span><br><span class="line"></span><br><span class="line">res = list(map(int,L)) <span class="comment">#分配进行处理，即把L都用int转换成int型</span></span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span><span class="params">(key)</span>:</span></span><br><span class="line">    dict1 = &#123;<span class="string">"1"</span>:<span class="number">1</span>,<span class="string">"2"</span>:<span class="number">2</span>,<span class="string">"3"</span>:<span class="number">3</span>,<span class="string">"4"</span>:<span class="number">4</span>,<span class="string">"5"</span>:<span class="number">5</span>,<span class="string">"6"</span>:<span class="number">6</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> dict1[key]</span><br><span class="line">res = list(map(convert,L))</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

<h2 id="二、reduce"><a href="#二、reduce" class="headerlink" title="二、reduce"></a>二、reduce</h2><p>reduce(fn,lsd)<br>fn:     一个函数<br>lsd:    一个序列<br>功能：把lsd中的每一个元素一次作用在fn上，fn必须有两个参数<br>执行流程：lsd的前两个元素作用在fn上，然后得到一个结果，得到的结果在和第三个数组成两个数作用在fn上，以此类推直到lsd中的<br>所有元素计算完毕</p>
<p>例如：把列表reduce成数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">reduce(fn,lsd)</span></span><br><span class="line"><span class="string">fn:     一个函数</span></span><br><span class="line"><span class="string">lsd:    一个序列</span></span><br><span class="line"><span class="string">功能：把lsd中的每一个元素一次作用在fn上，fn必须有两个参数</span></span><br><span class="line"><span class="string">执行流程：lsd的前两个元素作用在fn上，然后得到一个结果，得到的结果在和第三个数组成两个数作用在fn上，以此类推直到lsd中的</span></span><br><span class="line"><span class="string">所有元素计算完毕</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 例如把列表reduce成数</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">L = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a * <span class="number">10</span> + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">res = reduce(func,L)</span><br><span class="line">print(res,type(res))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">L = [<span class="string">"1"</span>,<span class="string">"ad3"</span>,<span class="string">"c2"</span>,<span class="string">"h2o"</span>,[<span class="string">"co2"</span>,<span class="string">"k2mo4"</span>,<span class="string">"na2"</span>],<span class="number">34</span>]</span><br><span class="line"><span class="comment">#将数字放入L1中</span></span><br><span class="line">L1=[]</span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> L:</span><br><span class="line">    <span class="comment">#判断是否是字符串</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(var,str):</span><br><span class="line">        <span class="keyword">for</span> val <span class="keyword">in</span> var:</span><br><span class="line">            <span class="keyword">if</span> val.isdigit():</span><br><span class="line">                L1.append(val)</span><br><span class="line">    <span class="comment">#判断是否是列表</span></span><br><span class="line">    <span class="keyword">elif</span> isinstance(var,list):</span><br><span class="line">        <span class="comment">#遍历二级列表</span></span><br><span class="line">        <span class="keyword">for</span> val <span class="keyword">in</span> var:</span><br><span class="line">            <span class="keyword">if</span> isinstance(val,str):</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> val:</span><br><span class="line">                    <span class="keyword">if</span> i.isdigit():</span><br><span class="line">                        L1.append(i)</span><br><span class="line">    <span class="comment">#如果是数字直接添加</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        L1.append(var)</span><br><span class="line">print(L1)</span><br><span class="line"><span class="comment">#然后将L1转换成一个整数(map和reduce一般配合使用</span></span><br><span class="line">res = list(map(int,L1))</span><br><span class="line">print(reduce(func,res))</span><br></pre></td></tr></table></figure>

<h2 id="三、sorted"><a href="#三、sorted" class="headerlink" title="三、sorted"></a>三、sorted</h2><p>用于排序<br>sort和sorted的区别<br>sort是无返回值的<br>sorted是有返回值的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">sort和sorted的区别</span></span><br><span class="line"><span class="string">sort是无返回值的</span></span><br><span class="line"><span class="string">sorted是有返回值的</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">L = [<span class="number">3</span>,<span class="number">5</span>,<span class="number">-856</span>,<span class="number">7645</span>,<span class="number">-32</span>,<span class="number">1</span>]</span><br><span class="line"><span class="comment"># L.sort()</span></span><br><span class="line"><span class="comment"># print(L)</span></span><br><span class="line"></span><br><span class="line">res = sorted(L)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="comment">#sort和sorted都可以加key参数，采用指定的方式进行排序</span></span><br><span class="line">res = sorted(L,key=abs)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

<h2 id="四、filter"><a href="#四、filter" class="headerlink" title="四、filter"></a>四、filter</h2><p>filter(fn,lsd)<br>功能：过滤<br>执行流程：lsd中的每一个元素一次作用在fn上，如果返回True;那就保留该数据，如果返回Flase，<br>则过滤掉这个数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">filter(fn,lsd)</span></span><br><span class="line"><span class="string">功能：过滤</span></span><br><span class="line"><span class="string">执行流程：lsd中的每一个元素一次作用在fn上，如果返回True;那就保留该数据，如果返回Flase，</span></span><br><span class="line"><span class="string">则过滤掉这个数据</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">lsd = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(key)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> key%<span class="number">2</span> == <span class="number">0</span></span><br><span class="line">res = filter(func,lsd)</span><br><span class="line">print(res) <span class="comment">#&lt;filter object at 0x00000180BA325780&gt;</span></span><br><span class="line">print(list(res)) <span class="comment">#序列化</span></span><br><span class="line"></span><br><span class="line">res = list(filter(func,lsd)) <span class="comment">#直接在过滤后转换</span></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>

<h2 id="五、lambda"><a href="#五、lambda" class="headerlink" title="五、lambda"></a>五、lambda</h2><p>lambda 表示式是一种简洁格式的函数 这个表达式不是正常的函数结构，而是属于表达式的类型<br>lambda 参数1，参数2：函数功能代码</p>
<p>一般只会用于实现简单功能</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">lambda 表示式是一种简洁格式的函数 这个表达式不是正常的函数结构，而是属于表达式的类型</span></span><br><span class="line"><span class="string">lambda 参数1，参数2：函数功能代码</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">一般只会用于实现简单功能</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">res = <span class="keyword">lambda</span> x,y:x+y</span><br><span class="line">print(res(<span class="number">1</span>,<span class="number">2</span>)) <span class="comment">#类似于宏定义</span></span><br><span class="line"></span><br><span class="line">res = <span class="keyword">lambda</span> sex:<span class="string">"胡子"</span> <span class="keyword">if</span> sex == <span class="string">"man"</span> <span class="keyword">else</span> <span class="string">"mei胡子"</span></span><br><span class="line">print(res(<span class="string">"man"</span>))</span><br></pre></td></tr></table></figure>

<h2 id="六、整合练习"><a href="#六、整合练习" class="headerlink" title="六、整合练习"></a>六、整合练习</h2><p>求lsd列表当中偶数组成的最大整数<br>以及奇数组成的最小整数</p>
<p>最后，尝试一句话实现功能</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lsd = [<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"7"</span>,<span class="string">"8"</span>,<span class="string">"9"</span>]</span><br><span class="line"><span class="comment">#求偶数的最大整数</span></span><br><span class="line">res = map(int,lsd) <span class="comment">#转换为int</span></span><br><span class="line">var = filter(<span class="keyword">lambda</span> x:<span class="literal">True</span> <span class="keyword">if</span> x%<span class="number">2</span>==<span class="number">0</span> <span class="keyword">else</span> <span class="literal">False</span>,res)</span><br><span class="line">val = sorted(var, reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="comment">#对数据整合</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a*<span class="number">10</span> + b</span><br><span class="line">res1 = reduce(func,val)</span><br><span class="line">print(res1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#求奇数的最小整数</span></span><br><span class="line">res = map(int,lsd) <span class="comment">#转换为int</span></span><br><span class="line">var = filter(<span class="keyword">lambda</span> x:<span class="literal">True</span> <span class="keyword">if</span> x%<span class="number">2</span>==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">False</span>,res)</span><br><span class="line">val = sorted(var,reverse=<span class="literal">False</span>)</span><br><span class="line">res2 = reduce(func,val)</span><br><span class="line">print(res2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#求奇数的最小整数</span></span><br><span class="line">print(reduce(<span class="keyword">lambda</span> x,y:x*<span class="number">10</span>+y,sorted(filter(<span class="keyword">lambda</span> x:<span class="literal">True</span> <span class="keyword">if</span> x%<span class="number">2</span>==<span class="number">1</span> <span class="keyword">else</span> <span class="literal">False</span>,map(int,lsd)),reverse=<span class="literal">False</span>)))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>day2：基本数据类型列表、集合、元组、字典</title>
    <url>/2020/04/03/day2%EF%BC%9A%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%88%97%E8%A1%A8%E3%80%81%E9%9B%86%E5%90%88%E3%80%81%E5%85%83%E7%BB%84%E3%80%81%E5%AD%97%E5%85%B8/</url>
    <content><![CDATA[<p>##一、列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#列表， 使用标识符[]，每一个元素使用逗号区分，可以随时修改</span></span><br><span class="line"><span class="comment">#列表可以嵌套列表</span></span><br><span class="line"><span class="comment">#对应于数组使用，功能比数组强大</span></span><br><span class="line">list1 = <span class="string">'[1,2,3,"a","b",(1,2),[1,2,3]]'</span></span><br><span class="line">print(list1,type(list1))</span><br><span class="line"></span><br><span class="line"><span class="comment">#索引 0 1 2 3 4 5  （正向）index</span></span><br><span class="line"><span class="comment">#    -5 -4 -3 -2 -1（反向）</span></span><br><span class="line"></span><br><span class="line">list2 = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>]</span><br><span class="line">ver = list2[<span class="number">1</span>]</span><br><span class="line">print(ver,type(ver))</span><br><span class="line"></span><br><span class="line">list3 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>]]</span><br><span class="line">ver = list3[<span class="number">3</span>][<span class="number">1</span>]</span><br><span class="line">print(ver,type(ver))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">list4 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>],<span class="literal">True</span>]</span><br><span class="line">ver = list4[<span class="number">4</span>] = <span class="literal">False</span></span><br><span class="line">print(ver)</span><br><span class="line">print(list4)</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>##二、元组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#元组：是一些列元素的组合，用逗号分割，标识符是，逗号，并且定义之后元素不能再进行修改</span></span><br><span class="line"><span class="comment">#其他用法与列表类似</span></span><br><span class="line">tuple1 = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,[<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>])</span><br><span class="line">print(tuple1)</span><br><span class="line">print(tuple1[<span class="number">1</span>])</span><br><span class="line">tuple1[<span class="number">5</span>][<span class="number">0</span>]=<span class="number">10</span>     <span class="comment">#元组不能修改，但是元组内的列表可以修改</span></span><br><span class="line">print(tuple1)</span><br><span class="line"><span class="comment">#注意：</span></span><br><span class="line">b=(<span class="number">1</span>)</span><br><span class="line">print(type(b))  <span class="comment">#int型，没有标识符时就不是元组</span></span><br><span class="line"></span><br><span class="line">c=(<span class="number">1</span>,)</span><br><span class="line">print(type(c))</span><br></pre></td></tr></table></figure>
<p>##三、集合</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#一种特定数据的组合，所有元素不能重复，不能修改</span></span><br><span class="line"></span><br><span class="line">set1=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>&#125;</span><br><span class="line">print(set1)     <span class="comment">#&#123;1, 2, 3, 4&#125;   集合会自动去重复</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#多用于计算补集    交集  并集  子集  超集。。。</span></span><br><span class="line">四、字典</span><br><span class="line"></span><br><span class="line"><span class="comment">#有映射关系的无序的组合，可以修改</span></span><br><span class="line">dict1 = &#123;<span class="string">"啊"</span>:<span class="string">"one"</span> , <span class="string">"我开炮"</span>:<span class="string">"连长"</span> , <span class="string">"花和尚"</span>:<span class="string">"鲁智深"</span>&#125;</span><br><span class="line">print(dict1)</span><br><span class="line">ver=dict1[<span class="string">"啊"</span>]</span><br><span class="line">print(ver,type(ver))</span><br><span class="line"></span><br><span class="line"><span class="comment">#冒号前面的是键值，键值是唯一的，并且不可以修改，</span></span><br><span class="line"><span class="comment">#冒号后面的才是可以修改的</span></span><br><span class="line">dict1[<span class="string">"啊"</span>]=<span class="string">"gggg"</span></span><br><span class="line">print(dict1)</span><br><span class="line"></span><br><span class="line"><span class="comment">#字典嵌套只能使用在，冒号后面上，键值必须唯一</span></span><br><span class="line">dict2 = &#123;<span class="string">"四大名著"</span>:&#123;<span class="string">"西游记"</span>:<span class="string">"吴承恩"</span>,<span class="string">"水浒传"</span>:<span class="string">"罗贯中"</span>,<span class="string">"红楼梦"</span>:<span class="string">"曹雪芹"</span>&#125;&#125;</span><br><span class="line">print(dict2[<span class="string">"四大名著"</span>])</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>day3：数据类型转换</title>
    <url>/2020/04/03/day3%EF%BC%9A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<p>##一、向int转换</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数据类型转换：强制类型转换，自动类型转换。</span></span><br><span class="line"><span class="comment">#自动类型转换：</span></span><br><span class="line">    <span class="comment">#朝着让精度更加大的方向进行转换</span></span><br><span class="line">    <span class="comment">#自动转换不需要人工干预</span></span><br><span class="line">    <span class="comment">#都发生在运算以及判断中</span></span><br><span class="line"><span class="comment">#强制类型转换：（手动类型转换）</span></span><br><span class="line">    <span class="comment">#随着程序员的意图进行转换</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">可以转换：</span></span><br><span class="line"><span class="string">    float</span></span><br><span class="line"><span class="string">    bool</span></span><br><span class="line"><span class="string">    str 纯数字字符串</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">不可转换：</span></span><br><span class="line"><span class="string">    complex</span></span><br><span class="line"><span class="string">    str 非纯数字</span></span><br><span class="line"><span class="string">    list</span></span><br><span class="line"><span class="string">    tuple</span></span><br><span class="line"><span class="string">    set</span></span><br><span class="line"><span class="string">    dict</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">容器类型</span></span><br><span class="line"><span class="string">    str     有序可变</span></span><br><span class="line"><span class="string">    list    有序可变</span></span><br><span class="line"><span class="string">    tuple   有序不可变</span></span><br><span class="line"><span class="string">    set     无序不可变</span></span><br><span class="line"><span class="string">    dict    无序可变</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>##二、向float转换</p>
<p>与int转换相同</p>
<p>##三、向complex转换</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">向复数类型转化</span></span><br><span class="line"><span class="string">    int     可以</span></span><br><span class="line"><span class="string">    float    可以</span></span><br><span class="line"><span class="string">    bool    可以</span></span><br><span class="line"><span class="string">    str     纯数字可以</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    list    不行</span></span><br><span class="line"><span class="string">    tuple   不行</span></span><br><span class="line"><span class="string">    set     不行</span></span><br><span class="line"><span class="string">    dict    不行</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>
<p>##四、向bool类型转换</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">向bool类型转换（所有的类型都可以转换为bool）</span></span><br><span class="line"><span class="string">    0 --- False</span></span><br><span class="line"><span class="string">    1 --- True</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">字符串只有""空字符串才能转换为False</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">list也是只有空列表才转换为False</span></span><br><span class="line"><span class="string">tuple</span></span><br><span class="line"><span class="string">set</span></span><br><span class="line"><span class="string">dict</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">一般用于判断用，判断是否为空</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>
<p>##五、向list进行转换</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">int </span></span><br><span class="line"><span class="string">float</span></span><br><span class="line"><span class="string">complex 不可以转换</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">str     可以</span></span><br><span class="line"><span class="string">tuple</span></span><br><span class="line"><span class="string">dict</span></span><br><span class="line"><span class="string">set</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">['c', 'a', 'b'] &lt;class 'list'&gt; 只转换字典的键不转换值</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>
<p>##六、向str转换</p>
<p>所有都可以转换，在最外边加上双引号<br> 字典在转换时： #{‘a’: 1, ‘b’: 2, ‘c’: 3} &lt;class ‘str’&gt;<br>##七、向tuple转换</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">向tuple进行转换，</span></span><br><span class="line"><span class="string">如，int float bool 不能转换，不能迭代（因为不是容器）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">其他容器类型都可以转换</span></span><br><span class="line"><span class="string">(str是一个特殊的容器)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">str：  #('1', ',', '2', ',', '3') &lt;class 'tuple'&gt;</span></span><br><span class="line"><span class="string">dict： #('c', 'a', 'b') &lt;class 'tuple'&gt;只有键值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>从高考到程序员</title>
    <url>/2020/04/03/%E4%BB%8E%E9%AB%98%E8%80%83%E5%88%B0%E7%A8%8B%E5%BA%8F%E5%91%98/</url>
    <content><![CDATA[<p>##1、前言<br>首先，本人是一名物联网工程专业大一的学生。可以说我是去年刚刚才走出高中、迈进大学的校门的，我知道我还不能算是一名程序员！我知道我还不能算是一名程序员！我知道我还不能算是一名程序员！但我有着一颗成为程序员的心，我相信，有一天我可以做到。</p>
<p>主要想写给自己，记录自己这一小段路的足迹。同时，也为一些将要进入大学的、志同道合的同学献上我的经验。</p>
<p>本人经历的虽然不多，但是在这有限的时间里，感触还是挺多的。</p>
<a id="more"></a>
<p>##2、我的高中<br>初中那一会，完全不把学习放在心上，每天只知道玩手机，看小说，打游戏。最后也不知道怎么就稀里糊涂的过去了，上了我们那排名最末尾的一所重点高中。到了高中，高一的时候还是没能静下心来学习，到了高二分重点班也没有机会能进，可以说是白白失去了很多机会。我想说：关键的时候一定要咬牙！真的，长点志气，别整天嬉皮笑脸的，如果自己都不想让自己变的更好的话，那谁也帮不了你，机会要自己去把握。</p>
<p>到了高二，我还在普通班里，要说不学习到不至于，只是没有去拼。等到我终于意识到学习是一件需要我使出浑身解数的时候，我在不知不觉中已经落后了别人太多了。在高二下到高考结束，我付出了不知多少的辛苦，我知道，比我努力的大有人在，我只求做到问心无愧。在我疯狂的学习之下，我终于赶上了班里的大部分人，最后最令我妈妈惊喜的是我也能考上一本。</p>
<p>现在回首我的高中，仿佛就是刚刚才过去，但也让人怀念。虽然高中浪费了很多的时间，但高中也留给了我无比珍贵的东西——敢于奋斗，敢于付出，敢于牺牲的精神。每个人都不是生来的天才，只有足够的努力才能让自己成为强者。千万别现在还年轻，此时不搏何时搏。卯足了劲，打他一个！</p>
<p>建议：</p>
<p>在大学之前培养自己的兴趣爱好。–高一高二不忙，就多看看书，想办法开拓自己的视野，给自己找好目标，定好位就赢在了起跑线上了，聪明的人早早就规划好了自己。<br>敢于尝试，敢于付出自己的时间。–哪怕是走错了路，选错了目标，花掉的时间也绝不是浪费。<br>不要拘泥于自己的小世界。———用好网络，书籍等自己身边一切资源，你会发现世界远比你想象的丰富。<br>高三要沉住气，做得住。<br>一定要好好学英语!一定要好好学英语！一定要好好学英语！多看书！多看书！多看书！</p>
<p>##3、开始的迷茫<br>刚开始进入大学，什么东西都是焕然一新的，（到了大学机会更要自己去把握。）无论如何，只要自己想，就去做,不要过多的在意他人的看法，大学里靠自己拼搏。</p>
<p>多多自学，用好互联网，靠自学！</p>
<p>暂时，想说的就这么多，希望可以对他人有所帮助！</p>
]]></content>
      <categories>
        <category>编码之外</category>
      </categories>
      <tags>
        <tag>编码之外</tag>
      </tags>
  </entry>
  <entry>
    <title>使用花生壳+树莓派实现内网穿透</title>
    <url>/2020/04/03/%E4%BD%BF%E7%94%A8%E8%8A%B1%E7%94%9F%E5%A3%B3-%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
    <content><![CDATA[<p>最近在做毕设的过程中，在内网使用树莓派以及esp8266搭建了内网的智能家居系统，想要实现本人不在家中，也能通过外网对家里的智能家居系统进行访问。最后本人选择的方案是使用花生壳进行内网穿透。<br>选择原因：花生壳赠送一个域名，能够免费进行远程桌面，远程连接树莓派的内网穿透，如果想要穿透web的http协议也仅需6元即可永久开通<br>开始之前给出<a href="http://service.oray.com/category/peanut.html" target="_blank" rel="noopener">花生壳官方参考资料</a>地址，里面的教程更加详细。</p>
<a id="more"></a>
<h2 id="一、树莓派下载花生壳客户端："><a href="#一、树莓派下载花生壳客户端：" class="headerlink" title="一、树莓派下载花生壳客户端："></a>一、树莓派下载花生壳客户端：</h2><p>在树莓派上下载花生壳可以参照这一步骤：<a href="http://service.oray.com/question/1696.html" target="_blank" rel="noopener">安装花生壳</a><br><strong>注意</strong>：在树莓派上，一定要先将安装完成时的sn码和初始密码用来登录（类似一个绑定的操作，否则可能出现一直提示请检查服务器是否运行）如果是已有账号的小伙伴也需要这一步，放心之后可以将账号再绑定上去。</p>
<h2 id="二、启动花生壳服务，注册账号"><a href="#二、启动花生壳服务，注册账号" class="headerlink" title="二、启动花生壳服务，注册账号"></a>二、启动花生壳服务，注册账号</h2><p>输入phddns start 命令启用花生壳<br>默认内置帐号只有公网版服务，如需使用内网穿透功能，要自行开通</p>
<h2 id="三、进入控制台，设置要穿透的内网"><a href="#三、进入控制台，设置要穿透的内网" class="headerlink" title="三、进入控制台，设置要穿透的内网"></a>三、进入控制台，设置要穿透的内网</h2><p>如果选择http需要6元<br><img src="/2020/04/03/%E4%BD%BF%E7%94%A8%E8%8A%B1%E7%94%9F%E5%A3%B3-%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/1.png" alt="设置页面"></p>
<h2 id="四、诊断看看是否运行成功"><a href="#四、诊断看看是否运行成功" class="headerlink" title="四、诊断看看是否运行成功"></a>四、诊断看看是否运行成功</h2><p>恭喜啦，到这一步没什么问题的话就成功啦！</p>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>内网穿透</tag>
        <tag>毕设</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/04/02/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>策爷拿到日本offer</title>
    <url>/2020/04/03/%E7%AD%96%E7%88%B7%E6%8B%BF%E5%88%B0%E6%97%A5%E6%9C%ACoffer/</url>
    <content><![CDATA[<h2 id="恭喜恭喜策爷"><a href="#恭喜恭喜策爷" class="headerlink" title="恭喜恭喜策爷"></a>恭喜恭喜策爷</h2><p>我和我的好朋友沈策，今天去海边玩耍，得知一个好消息，策爷拿到了去日本留学的offfer，是早稻田大学。<br>恭喜恭喜啊，努力就会有回报这句话果然没有错！还有就是苟富贵勿相忘啦哈哈哈</p>
<a id="more"></a>
<h2 id="自己也要继续努力"><a href="#自己也要继续努力" class="headerlink" title="自己也要继续努力"></a>自己也要继续努力</h2><p>确实看到身边的人，有的拿了offer，有的保研了，有些人做得毕业设计使用的东西自己都看不懂了，还是只会在家玩游戏，确实不应该。既然自己能够知道自己的不足，那赶紧努力追赶上吧！<br><img src="/2020/04/03/%E7%AD%96%E7%88%B7%E6%8B%BF%E5%88%B0%E6%97%A5%E6%9C%ACoffer/IMG_3138.JPG" alt="纪念"></p>
]]></content>
      <categories>
        <category>编码之外</category>
      </categories>
      <tags>
        <tag>编码之外</tag>
      </tags>
  </entry>
</search>
